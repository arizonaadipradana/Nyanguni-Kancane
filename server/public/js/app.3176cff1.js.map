{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/Game/GameLog.vue?4d8c","webpack:///./src/components/Game/GameChat.vue?f997","webpack:///./src/components/ApiDiagnostic.vue?0f78","webpack:///./src/components/Game/WinnerDisplay.vue?199d","webpack:///./src/components/Game/GameDebugPanel.vue?13e3","webpack:///./src/views/Game.vue?d439","webpack:///./src/App.vue","webpack:///./src/App.vue?3746","webpack:///./src/views/Home.vue","webpack:///src/views/Home.vue","webpack:///./src/views/Home.vue?03e8","webpack:///./src/views/Home.vue?86b4","webpack:///./src/views/Login.vue","webpack:///./src/components/ApiDiagnostic.vue","webpack:///src/components/ApiDiagnostic.vue","webpack:///./src/components/ApiDiagnostic.vue?39ba","webpack:///./src/components/ApiDiagnostic.vue?1545","webpack:///src/views/Login.vue","webpack:///./src/views/Login.vue?4fe3","webpack:///./src/views/Login.vue?b6b6","webpack:///./src/views/Register.vue","webpack:///src/views/Register.vue","webpack:///./src/views/Register.vue?a9d9","webpack:///./src/views/Register.vue?8f4a","webpack:///./src/views/Lobby.vue","webpack:///./src/store/index.js","webpack:///./src/services/config.js","webpack:///./src/services/SocketService.js","webpack:///src/views/Lobby.vue","webpack:///./src/views/Lobby.vue?e061","webpack:///./src/views/Lobby.vue?2c38","webpack:///./src/views/Game.vue","webpack:///./src/components/Game/GameHeader.vue","webpack:///src/components/Game/GameHeader.vue","webpack:///./src/components/Game/GameHeader.vue?cc64","webpack:///./src/components/Game/GameHeader.vue?7826","webpack:///./src/components/Game/GameStatus.vue","webpack:///./src/components/Game/PlayerReadyComponent.vue","webpack:///src/components/Game/PlayerReadyComponent.vue","webpack:///./src/components/Game/PlayerReadyComponent.vue?de4a","webpack:///./src/components/Game/PlayerReadyComponent.vue?d07e","webpack:///src/components/Game/GameStatus.vue","webpack:///./src/components/Game/GameStatus.vue?44e2","webpack:///./src/components/Game/GameStatus.vue?d1bd","webpack:///./src/components/Game/CommunityCards.vue","webpack:///src/components/Game/CommunityCards.vue","webpack:///./src/components/Game/CommunityCards.vue?b805","webpack:///./src/components/Game/CommunityCards.vue?2bd9","webpack:///./src/components/Game/PlayerList.vue","webpack:///src/components/Game/PlayerList.vue","webpack:///./src/components/Game/PlayerList.vue?5d00","webpack:///./src/components/Game/PlayerList.vue?2470","webpack:///./src/components/Game/PlayerActions.vue","webpack:///src/components/Game/PlayerActions.vue","webpack:///./src/components/Game/PlayerActions.vue?d713","webpack:///./src/components/Game/PlayerActions.vue?44e1","webpack:///./src/components/Game/GameLog.vue","webpack:///src/components/Game/GameLog.vue","webpack:///./src/components/Game/GameLog.vue?d5b1","webpack:///./src/components/Game/GameLog.vue?1221","webpack:///./src/components/Game/GameDebugPanel.vue","webpack:///src/components/Game/GameDebugPanel.vue","webpack:///./src/components/Game/GameDebugPanel.vue?af6a","webpack:///./src/components/Game/GameDebugPanel.vue?b750","webpack:///./src/utils/PokerHandEvaluator.js","webpack:///./src/components/Game/GameHandlers.js","webpack:///./src/utils/gameUtils.js","webpack:///./src/components/Game/ActionTimer.vue","webpack:///src/components/Game/ActionTimer.vue","webpack:///./src/components/Game/ActionTimer.vue?1abd","webpack:///./src/components/Game/ActionTimer.vue?e56a","webpack:///./src/components/Game/WinnerDisplay.vue","webpack:///src/components/Game/WinnerDisplay.vue","webpack:///./src/components/Game/WinnerDisplay.vue?d3dd","webpack:///./src/components/Game/WinnerDisplay.vue?b945","webpack:///./src/components/Game/GameChat.vue","webpack:///src/components/Game/GameChat.vue","webpack:///./src/components/Game/GameChat.vue?4431","webpack:///./src/components/Game/GameChat.vue?e6cd","webpack:///src/views/Game.vue","webpack:///./src/views/Game.vue?be3c","webpack:///./src/views/Game.vue?4180","webpack:///./src/router/index.js","webpack:///./src/main.js","webpack:///./src/views/Lobby.vue?6717","webpack:///./src/components/Game/GameStatus.vue?c9fd","webpack:///./src/views/Login.vue?d1a4","webpack:///./src/components/Game/GameHeader.vue?946a","webpack:///./src/views/Register.vue?a092","webpack:///./src/views/Home.vue?16c0","webpack:///./src/components/Game/PlayerActions.vue?18ef","webpack:///./src/components/Game/ActionTimer.vue?8e29","webpack:///./src/App.vue?eb2b","webpack:///./src/components/Game/PlayerReadyComponent.vue?6305","webpack:///./src/components/Game/PlayerList.vue?0b9d","webpack:///./src/components/Game/CommunityCards.vue?cba1"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","render","_vm","this","_c","_self","attrs","staticRenderFns","script","component","staticClass","_v","isAuthenticated","on","logout","_m","computed","mapGetters","methods","mapActions","errorMessage","_s","clearErrorMessage","_e","$event","preventDefault","handleLogin","arguments","directives","rawName","username","expression","domProps","target","composing","password","isLoading","showDiagnostics","ref","toggleDiagnostics","loading","class","success","apiStatus","error","apiUrl","currentOrigin","testConnection","testDirectConnection","clearNgrok","axios","defaults","baseURL","location","origin","mounted","console","log","localStorage","removeItem","setItem","setTimeout","reload","message","pingResponse","timeout","status","configResponse","configError","response","statusText","request","directUrl","components","ApiDiagnostic","loginAttempts","mapMutations","$refs","diagnostics","timeoutPromise","Promise","_","reject","Error","race","login","token","getItem","headers","common","$store","getters","currentUser","dispatch","warn","$router","catch","err","_error$response","SET_ERROR_MESSAGE","includes","$nextTick","isCreating","post","creatorId","id","creatorName","gameId","msg","apiTestResult","baseResponse","authResponse","JSON","stringify","authError","gamesResponse","gamesError","isJoining","statusMessage","playerId","playerName","commit","href","errorMsg","beforeUnmount","handleRegister","confirmPassword","passwordsMatch","register","balance","formatRupiah","handleCreateGame","gameIdInput","handleJoinGame","Vue","use","Vuex","Store","state","user","currentGame","currentGameId","playerHand","isYourTurn","availableActions","gamesList","userGames","mutations","SET_LOADING","SET_TOKEN","SET_USER","_standardizedUser$id","_standardizedUser$_id","_standardizedUser$id2","_standardizedUser$_id2","standardizedUser","_id","$oid","toString","String","CLEAR_AUTH","SET_CURRENT_GAME","game","SET_CURRENT_GAME_ID","SET_PLAYER_HAND","cards","map","rank","suit","join","FORCE_UPDATE_CARDS","Array","isArray","forEach","card","_updated","Date","now","CLEAR_ERROR_MESSAGE","SET_YOUR_TURN","isTurn","SET_AVAILABLE_ACTIONS","actions","SET_GAMES_LIST","games","SET_USER_GAMES","UPDATE_USER_BALANCE","credentials","userData","_error$response2","router","userId","axiosError","_axiosError$response$","requestPromise","_error$response3","_error$response4","_error$response5","updateGameState","gameState","_gameState$players","currentTurn","playerCount","players","bettingRound","enhancedGameState","some","hasCards","creator","receiveCards","hand","yourTurn","options","endTurn","action","amount","put","_error$response6","stats","forceUpdatePlayerHand","config","loadPromise","lastFetchTime","CACHE_DURATION","loadConfig","async","forceRefresh","resolve","fetchConfig","useNgrok","configUrl","isNgrok","originError","determineServerUrl","socketUrl","env","version","isFallback","hostname","savedNgrokUrl","match","port","lastUpdateTime","SocketService","constructor","socket","gameSocket","isConnected","events","connectionPromise","connectionAttempts","maxConnectionAttempts","connectionTimeout","clearTimeout","setupConnection","disconnect","supportsWebsockets","WebSocket","CLOSING","io","transports","reconnection","reconnectionAttempts","reconnectionDelay","autoConnect","withCredentials","forceNew","engine","transport","store","registerUser","reason","setupGameListeners","init","then","once","emit","joinPromise","joinTimeout","errorHandler","requestGameUpdate","startGame","startTimeout","leaveGame","lastUpdate","onGameUpdate","off","timeoutId","sendPlayerAction","parseFloat","isNaN","sendChatMessage","event","callback","filter","cb","isSocketConnected","connected","debug","_this$gameSocket","_this$gameSocket2","_this$gameSocket3","group","keys","groupEnd","socketId","handlers","maxRetries","retries","joinGame","ensureGameUpdate","intervalMs","duration","intervalId","setInterval","currentTime","clearInterval","setPlayerReady","isReady","operationTimeout","showFallbackOptions","process","isValidGameId","test","created","Intl","NumberFormat","style","currency","minimumFractionDigits","format","setOperationTimeout","operation","timeoutMs","clearOperationTimeout","directJoinGame","beforeDestroy","copyGameId","gameInitialized","isCreator","isStarting","handleStartGame","getCurrentPlayerName","requestInitialization","requestStateUpdate","addToLog","communityCards","formatCard","shouldShowActions","betAmount","raiseAmount","handleAction","getPlayerChipsInPot","getCurrentPlayer","actionTimeLimit","handleTimerComplete","handWinners","allPlayersCards","winningPot","showWinnerDisplay","isFoldWin","previousPlayerHand","handleWinnerDisplayClose","startNextHand","gameLog","showDebugPanel","forceStartGame","pot","$emit","props","type","required","default","isObserver","observerMessage","onPlayersReady","enoughPlayersReady","currentBet","formatBettingRound","getCompletionMessage","hasZeroBalance","returnToLobby","isCurrentPlayerReady","toggleReady","isDevelopment","debugVisible","getCreatorUsername","readyPlayersCount","checkReadyPlayers","_l","player","readySummary","Boolean","currentPlayer","find","readyCount","totalPlayers","areEnoughPlayersReady","readyPlayers","watch","handler","checkReadyStatus","deep","newValue","handlePlayerReadyUpdate","handleAllPlayersReady","readyStatus","allReady","every","_SocketService$gameSo","_this$currentUser","PlayerReadyComponent","newGame","endMessage","findCompletionMessage","actionHistory","completionAction","pop","totalChips","_this$currentGame$cre","round","formats","enoughReady","index","Function","updateKey","hasFolded","chips","hasActed","displayPlayerHand","lastHandUpdate","currentHandTimestamp","lastKnownHandState","playerDebugInfo","firstPlayer","_key","getCurrentGameStatus","newHand","oldHand","newHandString","oldHandString","newStatus","clearPlayerCards","updateInterval","parent","$parent","forceUpdate","updateForNewHand","timestamp","$forceUpdate","isGameActive","getCallAmount","formattedCallAmount","handleAllIn","getMaxChips","decrementBet","internalBetAmount","modifiers","getMaxBetAmount","updateLocalBetAmount","validateBetAmount","_n","incrementBet","handleBet","decrementRaise","internalRaiseAmount","getMinRaiseAmount","getMaxRaiseAmount","updateLocalRaiseAmount","validateRaiseAmount","incrementRaise","handleRaise","Number","allInAmount","playerChips","callAmount","Math","max","chipsInPot","parseInt","maxBet","minRaise","maxRaise","min","newVal","immediate","entry","enabled","refreshGameState","reconnectSocket","RANKS","RANK_VALUES","evaluateHand","playerCards","description","allCards","combinations","getCombinations","evaluations","combo","analyzeHand","sort","a","b","array","generateCombinations","combination","rankCounts","suitCounts","isFlush","values","count","sortedRanks","isStraight","isLowStraight","rankDistribution","handType","handValue","handDescription","quadsRank","tripsRank","pairRanks","pairRank","getHandDescription","evaluation","createHandlers","handleGameUpdate","activePlayers","isActive","winner","handName","getDefaultOptions","handleGameStarted","gameInProgress","handlePlayerJoined","handlePlayerLeft","handleChatMessage","handleDealCards","$set","handleYourTurn","currentTurnId","userTurn","gameTurn","isYourTurnProcessed","startActionTimer","timeLimit","handleTurnChanged","handleActionTaken","isCurrentUser","_component$currentGam","actionText","handleDealFlop","handleDealTurn","handleDealRiver","handleHandResult","winners","safeWinners","commCards","isWinner","w","winnerNames","logMessage","forceCardUpdate","clearActionTimer","handleNewHand","handleGameEnded","handleGameError","handleCreatorInfo","explicitIsCreator","handleClearPlayerHands","playerList","handleCreatorChanged","newCreator","isNewCreator","previousCreator","handleBecameCreator","alert","handlePlayerRemoved","isDuplicateLogMessage","lastLogMessages","dedupeTime","item","time","addToGameLog","messageDedupeTime","toLocaleTimeString","logTracking","isDuplicate","updatedLog","timeRemaining","width","progressPercentage","backgroundColor","timerColor","initialTime","timerInterval","startTimer","stopTimer","restartTimer","resetTimer","visible","displayCommunityCards","processedPlayers","cardIndex","splitPotAmount","emitStartNextHand","closeWinnerDisplay","allPlayers","formattedPlayerResults","formattedPlayer","determineHandType","processedPlayer","handEvaluation","PokerHandEvaluator","floor","ranks","pairCount","hasThreeOfKind","hasFourOfKind","rankValues","highestRank","reduce","highest","toggleChat","chatMinimized","chatMessages","formatTime","newMessage","inputDisabled","indexOf","_k","keyCode","sendMessage","recentMessages","Map","rateLimit","messageCount","lastResetTime","waiting","messageRateLimit","rateLimitResetTime","setupChatListeners","scrollToBottom","isDuplicateMessage","set","has","recentMsg","timeDiff","trim","isRateLimited","myRecentMessage","incrementRateLimit","messagesContainer","scrollTop","scrollHeight","date","hour","minute","GameHeader","GameStatus","CommunityCards","PlayerList","PlayerActions","GameLog","GameDebugPanel","ActionTimer","WinnerDisplay","GameChat","showResult","handResult","actionTimer","actionTimeRemaining","setupComplete","eventHandlers","cardRefreshCounter","firstPlayerId","currentUserId","canJoinGame","suitSymbols","hearts","diamonds","clubs","spades","suitSymbol","toLowerCase","navigator","clipboard","writeText","el","document","createElement","body","appendChild","select","execCommand","removeChild","confirm","apiResult","triggerGameInitialize","GameHandlers","handlerName","charAt","toUpperCase","playerReadyUpdateHandler","allPlayersReadyHandler","requestGameState","setupSocketConnection","fetchGame","$children","child","handleWinnerDisplayComplete","resetGameState","_SocketService$gameSo2","_SocketService$gameSo3","handleGameStateChange","handleGameStatusChange","statusData","checkLastPlayerStanding","handleObserverStatus","newTurnId","newPlayers","oldPlayers","oldActivePlayers","newActivePlayers","$route","params","replace","fetchGameWithRetry","_this$currentGame","cardRefreshInterval","gameUpdateHandler","gameStatusChangeHandler","newHandCardsHandler","$watch","oldStatus","VueRouter","originalPush","routes","path","Home","Login","Register","Lobby","meta","requiresAuth","Game","base","beforeEach","to","from","next","matched","record","hasUserData","isRedirectLoop","productionTip","localUrl","vm","info","initAuth","h","App","$mount","newUser"],"mappings":"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","file":"js/app.3176cff1.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameLog.vue?vue&type=style&index=0&id=09e9840d&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameChat.vue?vue&type=style&index=0&id=ac0316a6&prod&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ApiDiagnostic.vue?vue&type=style&index=0&id=743b3513&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WinnerDisplay.vue?vue&type=style&index=0&id=e566e614&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameDebugPanel.vue?vue&type=style&index=0&id=63a2e319&prod&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=style&index=0&id=2996416b&prod&scoped=true&lang=css\"","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"app\"}},[_c('router-view')],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=543c6752\"\nvar script = {}\nimport style0 from \"./App.vue?vue&type=style&index=0&id=543c6752&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"home\"},[_c('h1',[_vm._v(\"Nyanguni Kancane\")]),_c('h2',[_vm._v(\"Texas Hold'em Poker\")]),_c('div',{staticClass:\"card\"},[_c('p',[_vm._v(\"Welcome to Nyanguni Kancane, a simple Texas Hold'em poker game.\")]),_c('p',[_vm._v(\"1 chip = 500 rupiah\")]),(!_vm.isAuthenticated)?_c('div',{staticClass:\"action-buttons\"},[_c('router-link',{staticClass:\"btn\",attrs:{\"to\":\"/login\"}},[_vm._v(\"Login\")]),_c('router-link',{staticClass:\"btn btn-secondary\",attrs:{\"to\":\"/register\"}},[_vm._v(\"Register\")])],1):_c('div',{staticClass:\"action-buttons\"},[_c('router-link',{staticClass:\"btn\",attrs:{\"to\":\"/lobby\"}},[_vm._v(\"Enter Lobby\")]),_c('button',{staticClass:\"btn btn-secondary\",on:{\"click\":_vm.logout}},[_vm._v(\"Logout\")])],1)]),_vm._m(0)])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"card rules\"},[_c('h3',[_vm._v(\"Game Rules\")]),_c('h4',[_vm._v(\"1. The Basics:\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Hole Cards:\")]),_vm._v(\" Each player is dealt two private cards, which they keep hidden from other players.\")]),_c('li',[_c('strong',[_vm._v(\"Community Cards:\")]),_vm._v(\" Five cards are dealt face-up on the table, known as the \\\"board\\\".\")]),_c('li',[_c('strong',[_vm._v(\"Hand Formation:\")]),_vm._v(\" Players combine their two hole cards with any combination of the five community cards to create their best five-card poker hand.\")])]),_c('h4',[_vm._v(\"2. The Game Flow:\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Blinds:\")]),_vm._v(\" Before any cards are dealt, two players (the \\\"small blind\\\" and \\\"big blind\\\") are required to place compulsory bets.\")]),_c('li',[_c('strong',[_vm._v(\"Pre-Flop Betting:\")]),_vm._v(\" A round of betting occurs (players bet 1 chip into the pot) before the first three community cards (the \\\"flop\\\") are dealt.\")]),_c('li',[_c('strong',[_vm._v(\"The Flop:\")]),_vm._v(\" Three community cards are dealt face-up, followed by another round of betting.\")]),_c('li',[_c('strong',[_vm._v(\"The Turn:\")]),_vm._v(\" A fourth community card (the \\\"turn\\\") is dealt face-up, followed by another round of betting.\")]),_c('li',[_c('strong',[_vm._v(\"The River:\")]),_vm._v(\" A fifth and final community card (the \\\"river\\\") is dealt face-up, followed by the final round of betting.\")]),_c('li',[_c('strong',[_vm._v(\"Showdown:\")]),_vm._v(\" If multiple players remain in the hand after the final betting round, they reveal their hole cards, and the player with the best five-card poker hand wins the pot.\")])]),_c('h4',[_vm._v(\"3. Betting Options:\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Check:\")]),_vm._v(\" To pass the betting action to the next player without placing a bet.\")]),_c('li',[_c('strong',[_vm._v(\"Bet:\")]),_vm._v(\" To place a bet, requiring other players to match the bet or fold.\")]),_c('li',[_c('strong',[_vm._v(\"Call:\")]),_vm._v(\" To match the current bet.\")]),_c('li',[_c('strong',[_vm._v(\"Raise:\")]),_vm._v(\" To increase the current bet.\")]),_c('li',[_c('strong',[_vm._v(\"Fold:\")]),_vm._v(\" To discard your hand and forfeit your chips for that hand.\")])]),_c('h4',[_vm._v(\"4. Poker Hand Rankings (from highest to lowest):\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Royal Flush:\")]),_vm._v(\" Ace, King, Queen, Jack, and Ten of the same suit.\")]),_c('li',[_c('strong',[_vm._v(\"Straight Flush:\")]),_vm._v(\" Five consecutive cards of the same suit.\")]),_c('li',[_c('strong',[_vm._v(\"Four of a Kind:\")]),_vm._v(\" Four cards of the same rank.\")]),_c('li',[_c('strong',[_vm._v(\"Full House:\")]),_vm._v(\" Three of a kind and a pair.\")]),_c('li',[_c('strong',[_vm._v(\"Flush:\")]),_vm._v(\" Five cards of the same suit, not necessarily in sequence.\")]),_c('li',[_c('strong',[_vm._v(\"Straight:\")]),_vm._v(\" Five consecutive cards, not necessarily of the same suit.\")]),_c('li',[_c('strong',[_vm._v(\"Three of a Kind:\")]),_vm._v(\" Three cards of the same rank.\")]),_c('li',[_c('strong',[_vm._v(\"Two Pair:\")]),_vm._v(\" Two different pairs of cards.\")]),_c('li',[_c('strong',[_vm._v(\"One Pair:\")]),_vm._v(\" A pair of cards of the same rank.\")]),_c('li',[_c('strong',[_vm._v(\"High Card:\")]),_vm._v(\" If no other hand is formed, the highest card in the hand determines the winner.\")])])])\n}]\n\nexport { render, staticRenderFns }","<!-- client/src/views/Home.vue -->\r\n<template>\r\n    <div class=\"container\">\r\n      <div class=\"home\">\r\n        <h1>Nyanguni Kancane</h1>\r\n        <h2>Texas Hold'em Poker</h2>\r\n        \r\n        <div class=\"card\">\r\n          <p>Welcome to Nyanguni Kancane, a simple Texas Hold'em poker game.</p>\r\n          <p>1 chip = 500 rupiah</p>\r\n          \r\n          <div class=\"action-buttons\" v-if=\"!isAuthenticated\">\r\n            <router-link to=\"/login\" class=\"btn\">Login</router-link>\r\n            <router-link to=\"/register\" class=\"btn btn-secondary\">Register</router-link>\r\n          </div>\r\n          \r\n          <div class=\"action-buttons\" v-else>\r\n            <router-link to=\"/lobby\" class=\"btn\">Enter Lobby</router-link>\r\n            <button @click=\"logout\" class=\"btn btn-secondary\">Logout</button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"card rules\">\r\n          <h3>Game Rules</h3>\r\n          \r\n          <h4>1. The Basics:</h4>\r\n          <ul>\r\n            <li><strong>Hole Cards:</strong> Each player is dealt two private cards, which they keep hidden from other players.</li>\r\n            <li><strong>Community Cards:</strong> Five cards are dealt face-up on the table, known as the \"board\".</li>\r\n            <li><strong>Hand Formation:</strong> Players combine their two hole cards with any combination of the five community cards to create their best five-card poker hand.</li>\r\n          </ul>\r\n          \r\n          <h4>2. The Game Flow:</h4>\r\n          <ul>\r\n            <li><strong>Blinds:</strong> Before any cards are dealt, two players (the \"small blind\" and \"big blind\") are required to place compulsory bets.</li>\r\n            <li><strong>Pre-Flop Betting:</strong> A round of betting occurs (players bet 1 chip into the pot) before the first three community cards (the \"flop\") are dealt.</li>\r\n            <li><strong>The Flop:</strong> Three community cards are dealt face-up, followed by another round of betting.</li>\r\n            <li><strong>The Turn:</strong> A fourth community card (the \"turn\") is dealt face-up, followed by another round of betting.</li>\r\n            <li><strong>The River:</strong> A fifth and final community card (the \"river\") is dealt face-up, followed by the final round of betting.</li>\r\n            <li><strong>Showdown:</strong> If multiple players remain in the hand after the final betting round, they reveal their hole cards, and the player with the best five-card poker hand wins the pot.</li>\r\n          </ul>\r\n          \r\n          <h4>3. Betting Options:</h4>\r\n          <ul>\r\n            <li><strong>Check:</strong> To pass the betting action to the next player without placing a bet.</li>\r\n            <li><strong>Bet:</strong> To place a bet, requiring other players to match the bet or fold.</li>\r\n            <li><strong>Call:</strong> To match the current bet.</li>\r\n            <li><strong>Raise:</strong> To increase the current bet.</li>\r\n            <li><strong>Fold:</strong> To discard your hand and forfeit your chips for that hand.</li>\r\n          </ul>\r\n          \r\n          <h4>4. Poker Hand Rankings (from highest to lowest):</h4>\r\n          <ul>\r\n            <li><strong>Royal Flush:</strong> Ace, King, Queen, Jack, and Ten of the same suit.</li>\r\n            <li><strong>Straight Flush:</strong> Five consecutive cards of the same suit.</li>\r\n            <li><strong>Four of a Kind:</strong> Four cards of the same rank.</li>\r\n            <li><strong>Full House:</strong> Three of a kind and a pair.</li>\r\n            <li><strong>Flush:</strong> Five cards of the same suit, not necessarily in sequence.</li>\r\n            <li><strong>Straight:</strong> Five consecutive cards, not necessarily of the same suit.</li>\r\n            <li><strong>Three of a Kind:</strong> Three cards of the same rank.</li>\r\n            <li><strong>Two Pair:</strong> Two different pairs of cards.</li>\r\n            <li><strong>One Pair:</strong> A pair of cards of the same rank.</li>\r\n            <li><strong>High Card:</strong> If no other hand is formed, the highest card in the hand determines the winner.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { mapGetters, mapActions } from 'vuex'\r\n  \r\n  export default {\r\n    name: 'Home',\r\n    \r\n    computed: {\r\n      ...mapGetters(['isAuthenticated'])\r\n    },\r\n    \r\n    methods: {\r\n      ...mapActions(['logout'])\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .home {\r\n    max-width: 800px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n  }\r\n  \r\n  h1 {\r\n    color: #3f8c6e;\r\n    text-align: center;\r\n    font-size: 2.5em;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  h2 {\r\n    color: #999;\r\n    text-align: center;\r\n    font-size: 1.5em;\r\n    margin-top: 0;\r\n    margin-bottom: 30px;\r\n  }\r\n  \r\n  .action-buttons {\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  .rules {\r\n    margin-top: 30px;\r\n    text-align: left;\r\n  }\r\n  \r\n  .rules h3 {\r\n    color: #3f8c6e;\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .rules h4 {\r\n    margin-top: 20px;\r\n    margin-bottom: 10px;\r\n    color: #3f8c6e;\r\n  }\r\n  \r\n  .rules ul {\r\n    margin-top: 10px;\r\n    padding-left: 20px;\r\n  }\r\n  \r\n  .rules li {\r\n    margin-bottom: 5px;\r\n  }\r\n  </style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=24649ee0&scoped=true\"\nimport script from \"./Home.vue?vue&type=script&lang=js\"\nexport * from \"./Home.vue?vue&type=script&lang=js\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=24649ee0&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"24649ee0\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"auth-form\"},[_c('h2',[_vm._v(\"Login\")]),(_vm.errorMessage)?_c('div',{staticClass:\"error-message\"},[_vm._v(\" \"+_vm._s(_vm.errorMessage)+\" \"),_c('button',{staticClass:\"close-error\",on:{\"click\":_vm.clearErrorMessage}},[_vm._v(\"×\")])]):_vm._e(),_c('form',{on:{\"submit\":function($event){$event.preventDefault();return _vm.handleLogin.apply(null, arguments)}}},[_c('div',{staticClass:\"form-group\"},[_c('label',{attrs:{\"for\":\"username\"}},[_vm._v(\"Username\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.username),expression:\"username\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\",\"id\":\"username\",\"required\":\"\"},domProps:{\"value\":(_vm.username)},on:{\"input\":function($event){if($event.target.composing)return;_vm.username=$event.target.value}}})]),_c('div',{staticClass:\"form-group\"},[_c('label',{attrs:{\"for\":\"password\"}},[_vm._v(\"Password\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.password),expression:\"password\"}],staticClass:\"form-control\",attrs:{\"type\":\"password\",\"id\":\"password\",\"required\":\"\"},domProps:{\"value\":(_vm.password)},on:{\"input\":function($event){if($event.target.composing)return;_vm.password=$event.target.value}}})]),_c('button',{staticClass:\"btn\",attrs:{\"type\":\"submit\",\"disabled\":_vm.isLoading}},[_vm._v(\" \"+_vm._s(_vm.isLoading ? 'Logging in...' : 'Login')+\" \")])]),_c('p',{staticClass:\"register-link\"},[_vm._v(\" Don't have an account? \"),_c('router-link',{attrs:{\"to\":\"/register\"}},[_vm._v(\"Register\")])],1),(_vm.showDiagnostics)?_c('div',[_c('hr'),_c('ApiDiagnostic',{ref:\"diagnostics\"})],1):_vm._e(),_c('div',{staticClass:\"debug-section\"},[_c('button',{staticClass:\"debug-button\",on:{\"click\":_vm.toggleDiagnostics}},[_vm._v(\" \"+_vm._s(_vm.showDiagnostics ? 'Hide Diagnostics' : 'Show Diagnostics')+\" \")])])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"diagnostic-panel\"},[_c('h3',[_vm._v(\"API Diagnostic\")]),(_vm.loading)?_c('div',{staticClass:\"status-section\"},[_c('p',[_vm._v(\"Testing API connection...\")]),_c('div',{staticClass:\"loader\"})]):_c('div',{staticClass:\"status-section\"},[_c('div',{staticClass:\"status-item\",class:{ success: _vm.apiStatus === 'connected', error: _vm.apiStatus === 'failed' }},[_c('span',{staticClass:\"status-label\"},[_vm._v(\"API Status:\")]),_c('span',{staticClass:\"status-value\"},[_vm._v(_vm._s(_vm.apiStatus === 'connected' ? 'Connected' : 'Failed'))])]),_c('div',{staticClass:\"status-item\"},[_c('span',{staticClass:\"status-label\"},[_vm._v(\"API URL:\")]),_c('span',{staticClass:\"status-value\"},[_vm._v(_vm._s(_vm.apiUrl))])]),_c('div',{staticClass:\"status-item\"},[_c('span',{staticClass:\"status-label\"},[_vm._v(\"Current Origin:\")]),_c('span',{staticClass:\"status-value\"},[_vm._v(_vm._s(_vm.currentOrigin))])]),(_vm.errorMessage)?_c('div',{staticClass:\"status-item\"},[_c('span',{staticClass:\"status-label\"},[_vm._v(\"Error:\")]),_c('span',{staticClass:\"status-value error\"},[_vm._v(_vm._s(_vm.errorMessage))])]):_vm._e()]),_c('div',{staticClass:\"action-section\"},[_c('button',{staticClass:\"test-button\",attrs:{\"disabled\":_vm.loading},on:{\"click\":_vm.testConnection}},[_vm._v(\" Test Connection \")]),_c('button',{staticClass:\"test-button\",attrs:{\"disabled\":_vm.loading},on:{\"click\":_vm.testDirectConnection}},[_vm._v(\" Test Direct Connection (Port 5000) \")]),_c('button',{staticClass:\"test-button warning\",attrs:{\"disabled\":_vm.loading},on:{\"click\":_vm.clearNgrok}},[_vm._v(\" Clear Ngrok URL \")])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/ApiDiagnostic.vue -->\r\n<template>\r\n  <div class=\"diagnostic-panel\">\r\n    <h3>API Diagnostic</h3>\r\n    <div class=\"status-section\" v-if=\"loading\">\r\n      <p>Testing API connection...</p>\r\n      <div class=\"loader\"></div>\r\n    </div>\r\n    <div class=\"status-section\" v-else>\r\n      <div class=\"status-item\" :class=\"{ success: apiStatus === 'connected', error: apiStatus === 'failed' }\">\r\n        <span class=\"status-label\">API Status:</span>\r\n        <span class=\"status-value\">{{ apiStatus === 'connected' ? 'Connected' : 'Failed' }}</span>\r\n      </div>\r\n      <div class=\"status-item\">\r\n        <span class=\"status-label\">API URL:</span>\r\n        <span class=\"status-value\">{{ apiUrl }}</span>\r\n      </div>\r\n      <div class=\"status-item\">\r\n        <span class=\"status-label\">Current Origin:</span>\r\n        <span class=\"status-value\">{{ currentOrigin }}</span>\r\n      </div>\r\n      <div class=\"status-item\" v-if=\"errorMessage\">\r\n        <span class=\"status-label\">Error:</span>\r\n        <span class=\"status-value error\">{{ errorMessage }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"action-section\">\r\n      <button @click=\"testConnection\" :disabled=\"loading\" class=\"test-button\">\r\n        Test Connection\r\n      </button>\r\n      <button @click=\"testDirectConnection\" :disabled=\"loading\" class=\"test-button\">\r\n        Test Direct Connection (Port 5000)\r\n      </button>\r\n      <button @click=\"clearNgrok\" :disabled=\"loading\" class=\"test-button warning\">\r\n        Clear Ngrok URL\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'ApiDiagnostic',\r\n  \r\n  data() {\r\n    return {\r\n      apiStatus: 'unknown',\r\n      apiUrl: axios.defaults.baseURL || window.location.origin + '/api',\r\n      currentOrigin: window.location.origin,\r\n      loading: false,\r\n      errorMessage: ''\r\n    };\r\n  },\r\n  \r\n  mounted() {\r\n    // Test connection when component is mounted\r\n    this.testConnection();\r\n  },\r\n  \r\n  methods: {\r\n    async clearNgrok() {\r\n      this.loading = true;\r\n      this.errorMessage = '';\r\n      \r\n      try {\r\n        console.log('Removing ngrok URL from localStorage');\r\n        localStorage.removeItem('ngrokUrl');\r\n        localStorage.setItem('useNgrok', 'false');\r\n        \r\n        // Update URLs to use current origin\r\n        this.apiUrl = window.location.origin + '/api';\r\n        \r\n        // Reset axios default URL\r\n        axios.defaults.baseURL = this.apiUrl;\r\n        \r\n        // Test the connection with the new URL\r\n        await this.testConnection();\r\n        \r\n        // Reload the page to apply changes\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 1000);\r\n      } catch (error) {\r\n        console.error('Error clearing ngrok settings:', error);\r\n        this.errorMessage = 'Failed to clear ngrok settings: ' + error.message;\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    async testConnection() {\r\n      this.loading = true;\r\n      this.errorMessage = '';\r\n      \r\n      try {\r\n        // Use relative URL to avoid CORS and proxy issues\r\n        const pingResponse = await axios.get('/api', {\r\n          timeout: 5000 // 5 second timeout\r\n        });\r\n        \r\n        console.log('API ping response:', pingResponse.data);\r\n        \r\n        if (pingResponse.status === 200) {\r\n          this.apiStatus = 'connected';\r\n          \r\n          // Try to fetch any config info\r\n          try {\r\n            const configResponse = await axios.get('/api/config', {\r\n              timeout: 5000\r\n            });\r\n            console.log('API config:', configResponse.data);\r\n            \r\n            // Update URL if different from what we're showing\r\n            if (configResponse.data.apiUrl) {\r\n              this.apiUrl = configResponse.data.apiUrl;\r\n            }\r\n          } catch (configError) {\r\n            console.log('Config fetch error (non-critical):', configError);\r\n          }\r\n        } else {\r\n          this.apiStatus = 'failed';\r\n          this.errorMessage = `Unexpected status: ${pingResponse.status}`;\r\n        }\r\n      } catch (error) {\r\n        this.apiStatus = 'failed';\r\n        console.error('API connection test failed:', error);\r\n        \r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          this.errorMessage = `Server responded with error: ${error.response.status} ${error.response.statusText}`;\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          this.errorMessage = 'No response received from server. Check your connection and make sure the server is running.';\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          this.errorMessage = `Request setup error: ${error.message}`;\r\n        }\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    async testDirectConnection() {\r\n      this.loading = true;\r\n      this.errorMessage = '';\r\n      \r\n      try {\r\n        // Try to connect directly to port 5000\r\n        const directUrl = 'http://localhost:5000/api';\r\n        console.log('Testing direct connection to:', directUrl);\r\n        \r\n        const pingResponse = await axios.get(directUrl, {\r\n          timeout: 5000\r\n        });\r\n        \r\n        console.log('Direct API ping response:', pingResponse.data);\r\n        \r\n        if (pingResponse.status === 200) {\r\n          this.apiStatus = 'connected';\r\n          this.apiUrl = directUrl;\r\n          this.errorMessage = 'Direct connection successful! Try restarting your client app.';\r\n        } else {\r\n          this.apiStatus = 'failed';\r\n          this.errorMessage = `Direct connection - Unexpected status: ${pingResponse.status}`;\r\n        }\r\n      } catch (error) {\r\n        this.apiStatus = 'failed';\r\n        console.error('Direct connection test failed:', error);\r\n        \r\n        if (error.response) {\r\n          this.errorMessage = `Direct connection - Server responded: ${error.response.status}`;\r\n        } else if (error.request) {\r\n          this.errorMessage = 'Direct connection failed - No response received. Ensure server is running on port 5000.';\r\n        } else {\r\n          this.errorMessage = `Direct connection error: ${error.message}`;\r\n        }\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.diagnostic-panel {\r\n  background-color: #2a2a2a;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  margin-bottom: 20px;\r\n  color: #f0f0f0;\r\n}\r\n\r\nh3 {\r\n  margin-top: 0;\r\n  margin-bottom: 15px;\r\n  color: #3f8c6e;\r\n}\r\n\r\n.status-section {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.status-item {\r\n  margin-bottom: 8px;\r\n  display: flex;\r\n  align-items: flex-start;\r\n}\r\n\r\n.status-label {\r\n  font-weight: bold;\r\n  min-width: 100px;\r\n}\r\n\r\n.status-value {\r\n  word-break: break-all;\r\n}\r\n\r\n.success {\r\n  color: #4caf50;\r\n}\r\n\r\n.error {\r\n  color: #f44336;\r\n}\r\n\r\n.action-section {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.test-button {\r\n  background-color: #3f8c6e;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 8px 15px;\r\n  cursor: pointer;\r\n}\r\n\r\n.test-button:hover {\r\n  background-color: #2c664e;\r\n}\r\n\r\n.test-button.warning {\r\n  background-color: #e74c3c;\r\n}\r\n\r\n.test-button.warning:hover {\r\n  background-color: #c0392b;\r\n}\r\n\r\n.test-button:disabled {\r\n  background-color: #555;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.loader {\r\n  border: 3px solid #f3f3f3;\r\n  border-top: 3px solid #3f8c6e;\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n  animation: spin 1s linear infinite;\r\n  margin: 10px auto;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ApiDiagnostic.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ApiDiagnostic.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ApiDiagnostic.vue?vue&type=template&id=743b3513&scoped=true\"\nimport script from \"./ApiDiagnostic.vue?vue&type=script&lang=js\"\nexport * from \"./ApiDiagnostic.vue?vue&type=script&lang=js\"\nimport style0 from \"./ApiDiagnostic.vue?vue&type=style&index=0&id=743b3513&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"743b3513\",\n  null\n  \n)\n\nexport default component.exports","<!-- client/src/views/Login.vue -->\r\n<template>\r\n  <div class=\"container\">\r\n    <div class=\"auth-form\">\r\n      <h2>Login</h2>\r\n\r\n      <div v-if=\"errorMessage\" class=\"error-message\">\r\n        {{ errorMessage }}\r\n        <button @click=\"clearErrorMessage\" class=\"close-error\">×</button>\r\n      </div>\r\n\r\n      <form @submit.prevent=\"handleLogin\">\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">Username</label>\r\n          <input type=\"text\" id=\"username\" v-model=\"username\" required class=\"form-control\" />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <input type=\"password\" id=\"password\" v-model=\"password\" required class=\"form-control\" />\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn\" :disabled=\"isLoading\">\r\n          {{ isLoading ? 'Logging in...' : 'Login' }}\r\n        </button>\r\n      </form>\r\n\r\n      <p class=\"register-link\">\r\n        Don't have an account?\r\n        <router-link to=\"/register\">Register</router-link>\r\n      </p>\r\n\r\n      <!-- Show API diagnostics if there's an error -->\r\n      <div v-if=\"showDiagnostics\">\r\n        <hr>\r\n        <ApiDiagnostic ref=\"diagnostics\" />\r\n      </div>\r\n\r\n      <div class=\"debug-section\">\r\n        <button @click=\"toggleDiagnostics\" class=\"debug-button\">\r\n          {{ showDiagnostics ? 'Hide Diagnostics' : 'Show Diagnostics' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\nimport ApiDiagnostic from '@/components/ApiDiagnostic.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'Login',\r\n\r\n  components: {\r\n    ApiDiagnostic\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      isLoading: false,\r\n      showDiagnostics: false,\r\n      loginAttempts: 0\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters(['errorMessage'])\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['login', 'clearErrorMessage']),\r\n    ...mapMutations(['SET_ERROR_MESSAGE']),\r\n\r\n    toggleDiagnostics() {\r\n      this.showDiagnostics = !this.showDiagnostics;\r\n      if (this.showDiagnostics && this.$refs.diagnostics) {\r\n        this.$refs.diagnostics.testConnection();\r\n      }\r\n    },\r\n\r\n    async handleLogin() {\r\n      this.isLoading = true;\r\n      this.clearErrorMessage();\r\n\r\n      try {\r\n        // Log request info for debugging\r\n        console.log('Login request to:', axios.defaults.baseURL);\r\n\r\n        // Create a timeout promise\r\n        const timeoutPromise = new Promise((_, reject) => {\r\n          setTimeout(() => reject(new Error('Login request timed out')), 10000);\r\n        });\r\n\r\n        // Race against timeout\r\n        const result = await Promise.race([\r\n          this.login({\r\n            username: this.username,\r\n            password: this.password\r\n          }),\r\n          timeoutPromise\r\n        ]);\r\n\r\n        if (result.success) {\r\n          console.log('Login successful!', result);\r\n\r\n          // Ensure token is set in localStorage\r\n          const token = result.token || localStorage.getItem('token');\r\n          if (token) {\r\n            localStorage.setItem('token', token);\r\n            console.log('Token saved to localStorage');\r\n\r\n            // Set auth header for future requests\r\n            axios.defaults.headers.common['x-auth-token'] = token;\r\n            console.log('Auth header set for axios');\r\n\r\n            // If we don't have user data yet, fetch it\r\n            if (!this.$store.getters.currentUser) {\r\n              console.log('No user data available, fetching from server');\r\n              await this.$store.dispatch('fetchUserData');\r\n            }\r\n          } else {\r\n            console.warn('No token received from login');\r\n          }\r\n\r\n          // Navigate to lobby - FIX: Use catch to handle navigation errors\r\n          this.$router.push('/lobby').catch(err => {\r\n            // Only log errors that aren't NavigationDuplicated\r\n            if (err.name !== 'NavigationDuplicated') {\r\n              console.error('Navigation error:', err);\r\n            }\r\n          });\r\n        } else {\r\n          console.error('Login failed:', result);\r\n\r\n          // Auto-show diagnostics after multiple failed attempts\r\n          this.loginAttempts++;\r\n          if (this.loginAttempts >= 2) {\r\n            this.showDiagnostics = true;\r\n            if (this.$refs.diagnostics) {\r\n              this.$refs.diagnostics.testConnection();\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Login error:', error);\r\n\r\n        // Provide more helpful error messages for common issues\r\n        if (error.message === 'Login request timed out') {\r\n          this.SET_ERROR_MESSAGE('Login request timed out. Please check your connection and try again.');\r\n        } else if (error.response?.status === 0 || error.message.includes('Network Error')) {\r\n          this.SET_ERROR_MESSAGE('Network error. Please ensure you have internet access and the server is running.');\r\n        } else {\r\n          this.SET_ERROR_MESSAGE(error.message || 'Login failed. Please try again.');\r\n        }\r\n\r\n        // Auto-show diagnostics for network errors\r\n        this.showDiagnostics = true;\r\n        if (this.$refs.diagnostics) {\r\n          this.$nextTick(() => {\r\n            this.$refs.diagnostics.testConnection();\r\n          });\r\n        }\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    /**\r\n     * Create a game directly using axios instead of store action\r\n     */\r\n    async createGameDirectly() {\r\n      this.isCreating = true;\r\n      this.clearErrorMessage();\r\n\r\n      try {\r\n        // Make the API call with axios directly\r\n        const token = localStorage.getItem('token');\r\n\r\n        if (!token) {\r\n          throw new Error('No authentication token found');\r\n        }\r\n\r\n        const response = await axios.post('/api/games', {\r\n          creatorId: this.currentUser.id,\r\n          creatorName: this.currentUser.username\r\n        }, {\r\n          headers: {\r\n            'x-auth-token': token,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n        console.log('Direct API response:', response.data);\r\n\r\n        if (response.data && response.data.gameId) {\r\n          this.$router.push(`/game/${response.data.gameId}`);\r\n        } else {\r\n          throw new Error('Invalid server response');\r\n        }\r\n      } catch (error) {\r\n        console.error('Direct API call error:', error);\r\n\r\n        if (error.response) {\r\n          console.error('Response data:', error.response.data);\r\n          console.error('Status:', error.response.status);\r\n          this.SET_ERROR_MESSAGE(error.response.data.msg || `Error ${error.response.status}`);\r\n        } else if (error.request) {\r\n          this.SET_ERROR_MESSAGE('No response from server. Check your connection.');\r\n        } else {\r\n          this.SET_ERROR_MESSAGE(error.message || 'Error creating game');\r\n        }\r\n      } finally {\r\n        this.isCreating = false;\r\n      }\r\n    },\r\n\r\n    async testApiConnection() {\r\n      this.apiTestResult = 'Testing API connection...';\r\n\r\n      try {\r\n        // Test basic API connection\r\n        const baseResponse = await axios.get('/api', { timeout: 5000 });\r\n        this.apiTestResult = `API base endpoint: ${baseResponse.status} OK\\n`;\r\n\r\n        // Test authentication\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          this.apiTestResult += 'No auth token found!\\n';\r\n          return;\r\n        }\r\n\r\n        try {\r\n          const authResponse = await axios.get('/api/auth/user', {\r\n            headers: { 'x-auth-token': token },\r\n            timeout: 5000\r\n          });\r\n\r\n          this.apiTestResult += `Auth test: ${authResponse.status} OK\\n`;\r\n          this.apiTestResult += `User data: ${JSON.stringify(authResponse.data, null, 2)}\\n`;\r\n        } catch (authError) {\r\n          this.apiTestResult += `Auth test failed: ${authError.message}\\n`;\r\n          if (authError.response) {\r\n            this.apiTestResult += `Status: ${authError.response.status}\\n`;\r\n            this.apiTestResult += `Response: ${JSON.stringify(authError.response.data, null, 2)}\\n`;\r\n          }\r\n        }\r\n\r\n        // Test games endpoint\r\n        try {\r\n          const gamesResponse = await axios.get('/api/games', {\r\n            headers: { 'x-auth-token': token },\r\n            timeout: 5000\r\n          });\r\n\r\n          this.apiTestResult += `Games list test: ${gamesResponse.status} OK\\n`;\r\n          this.apiTestResult += `Games count: ${gamesResponse.data.length}\\n`;\r\n        } catch (gamesError) {\r\n          this.apiTestResult += `Games list test failed: ${gamesError.message}\\n`;\r\n          if (gamesError.response) {\r\n            this.apiTestResult += `Status: ${gamesError.response.status}\\n`;\r\n            this.apiTestResult += `Response: ${JSON.stringify(gamesError.response.data, null, 2)}\\n`;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        this.apiTestResult = `API test failed: ${error.message}`;\r\n        console.error('API test error:', error);\r\n      }\r\n    },\r\n    /**\r\n     * Direct method to join a game\r\n     */\r\n    async directJoinGame(gameId) {\r\n      if (!gameId) {\r\n        this.SET_ERROR_MESSAGE('Game ID is required');\r\n        return;\r\n      }\r\n\r\n      this.isJoining = true;\r\n      this.statusMessage = 'Joining game...';\r\n\r\n      try {\r\n        console.log(`Directly joining game ${gameId}`);\r\n\r\n        // Get auth token\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          throw new Error('No authentication token found');\r\n        }\r\n\r\n        // Join the game via API\r\n        const response = await axios.post(`/api/games/join/${gameId}`, {\r\n          playerId: this.currentUser.id,\r\n          playerName: this.currentUser.username\r\n        }, {\r\n          headers: {\r\n            'x-auth-token': token\r\n          },\r\n          timeout: 5000\r\n        });\r\n\r\n        console.log('Join game response:', response.data);\r\n\r\n        // Set game ID in store\r\n        this.$store.commit('SET_CURRENT_GAME_ID', gameId);\r\n\r\n        // Navigate to game page\r\n        this.statusMessage = 'Joined! Redirecting...';\r\n\r\n        // Use window.location for direct navigation\r\n        window.location.href = `/game/${gameId}`;\r\n      } catch (error) {\r\n        console.error('Error joining game:', error);\r\n\r\n        let errorMsg = 'Error joining game. Please try again.';\r\n\r\n        if (error.response) {\r\n          console.error('Server response:', error.response.data);\r\n          errorMsg = error.response.data.msg || `Server error: ${error.response.status}`;\r\n        } else if (error.request) {\r\n          errorMsg = 'No response from server. Check your network connection.';\r\n        } else {\r\n          errorMsg = error.message || errorMsg;\r\n        }\r\n\r\n        this.SET_ERROR_MESSAGE(errorMsg);\r\n      } finally {\r\n        this.statusMessage = '';\r\n        this.isJoining = false;\r\n      }\r\n    }\r\n\r\n  },\r\n\r\n  beforeUnmount() {\r\n    this.clearErrorMessage();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.auth-form {\r\n  max-width: 400px;\r\n  margin: 40px auto;\r\n  padding: 30px;\r\n  background-color: #2a2a2a;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-top: 0;\r\n  margin-bottom: 20px;\r\n  color: #3f8c6e;\r\n}\r\n\r\n.error-message {\r\n  background-color: #e74c3c;\r\n  color: white;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 15px;\r\n  position: relative;\r\n}\r\n\r\n.close-error {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  margin-top: 10px;\r\n}\r\n\r\n.register-link {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  font-size: 14px;\r\n}\r\n\r\n.register-link a {\r\n  color: #3f8c6e;\r\n  text-decoration: none;\r\n}\r\n\r\n.register-link a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.debug-section {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.debug-button {\r\n  background-color: #555;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 6px 12px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  width: auto;\r\n}\r\n\r\n.debug-button:hover {\r\n  background-color: #444;\r\n}\r\n\r\nhr {\r\n  border: none;\r\n  border-top: 1px solid #444;\r\n  margin: 20px 0;\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Login.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Login.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Login.vue?vue&type=template&id=de3b954c&scoped=true\"\nimport script from \"./Login.vue?vue&type=script&lang=js\"\nexport * from \"./Login.vue?vue&type=script&lang=js\"\nimport style0 from \"./Login.vue?vue&type=style&index=0&id=de3b954c&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"de3b954c\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"auth-form\"},[_c('h2',[_vm._v(\"Register\")]),(_vm.errorMessage)?_c('div',{staticClass:\"error-message\"},[_vm._v(\" \"+_vm._s(_vm.errorMessage)+\" \")]):_vm._e(),_c('form',{on:{\"submit\":function($event){$event.preventDefault();return _vm.handleRegister.apply(null, arguments)}}},[_c('div',{staticClass:\"form-group\"},[_c('label',{attrs:{\"for\":\"username\"}},[_vm._v(\"Username\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.username),expression:\"username\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\",\"id\":\"username\",\"required\":\"\"},domProps:{\"value\":(_vm.username)},on:{\"input\":function($event){if($event.target.composing)return;_vm.username=$event.target.value}}})]),_c('div',{staticClass:\"form-group\"},[_c('label',{attrs:{\"for\":\"password\"}},[_vm._v(\"Password\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.password),expression:\"password\"}],staticClass:\"form-control\",attrs:{\"type\":\"password\",\"id\":\"password\",\"required\":\"\"},domProps:{\"value\":(_vm.password)},on:{\"input\":function($event){if($event.target.composing)return;_vm.password=$event.target.value}}})]),_c('div',{staticClass:\"form-group\"},[_c('label',{attrs:{\"for\":\"confirmPassword\"}},[_vm._v(\"Confirm Password\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.confirmPassword),expression:\"confirmPassword\"}],staticClass:\"form-control\",attrs:{\"type\":\"password\",\"id\":\"confirmPassword\",\"required\":\"\"},domProps:{\"value\":(_vm.confirmPassword)},on:{\"input\":function($event){if($event.target.composing)return;_vm.confirmPassword=$event.target.value}}}),(!_vm.passwordsMatch)?_c('div',{staticClass:\"validation-error\"},[_vm._v(\" Passwords do not match \")]):_vm._e()]),_c('button',{staticClass:\"btn\",attrs:{\"type\":\"submit\",\"disabled\":_vm.isLoading || !_vm.passwordsMatch}},[_vm._v(\" \"+_vm._s(_vm.isLoading ? 'Registering...' : 'Register')+\" \")])]),_c('p',{staticClass:\"login-link\"},[_vm._v(\" Already have an account? \"),_c('router-link',{attrs:{\"to\":\"/login\"}},[_vm._v(\"Login\")])],1)])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/views/Register.vue -->\r\n<template>\r\n    <div class=\"container\">\r\n      <div class=\"auth-form\">\r\n        <h2>Register</h2>\r\n        \r\n        <div v-if=\"errorMessage\" class=\"error-message\">\r\n          {{ errorMessage }}\r\n        </div>\r\n        \r\n        <form @submit.prevent=\"handleRegister\">\r\n          <div class=\"form-group\">\r\n            <label for=\"username\">Username</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"username\" \r\n              v-model=\"username\" \r\n              required \r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"password\">Password</label>\r\n            <input \r\n              type=\"password\" \r\n              id=\"password\" \r\n              v-model=\"password\" \r\n              required \r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"confirmPassword\">Confirm Password</label>\r\n            <input \r\n              type=\"password\" \r\n              id=\"confirmPassword\" \r\n              v-model=\"confirmPassword\" \r\n              required \r\n              class=\"form-control\"\r\n            />\r\n            <div v-if=\"!passwordsMatch\" class=\"validation-error\">\r\n              Passwords do not match\r\n            </div>\r\n          </div>\r\n          \r\n          <button \r\n            type=\"submit\" \r\n            class=\"btn\" \r\n            :disabled=\"isLoading || !passwordsMatch\"\r\n          >\r\n            {{ isLoading ? 'Registering...' : 'Register' }}\r\n          </button>\r\n        </form>\r\n        \r\n        <p class=\"login-link\">\r\n          Already have an account? \r\n          <router-link to=\"/login\">Login</router-link>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { mapGetters, mapActions } from 'vuex'\r\n  \r\n  export default {\r\n    name: 'Register',\r\n    \r\n    data() {\r\n      return {\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        isLoading: false\r\n      }\r\n    },\r\n    \r\n    computed: {\r\n      ...mapGetters(['errorMessage']),\r\n      \r\n      passwordsMatch() {\r\n        return !this.confirmPassword || this.password === this.confirmPassword\r\n      }\r\n    },\r\n    \r\n    methods: {\r\n      ...mapActions(['register', 'clearErrorMessage']),\r\n      \r\n      async handleRegister() {\r\n        if (!this.passwordsMatch) {\r\n          return\r\n        }\r\n        \r\n        this.isLoading = true\r\n        \r\n        try {\r\n          const result = await this.register({\r\n            username: this.username,\r\n            password: this.password\r\n          })\r\n          \r\n          if (result.success) {\r\n            this.$router.push('/lobby')\r\n          }\r\n        } catch (error) {\r\n          console.error('Registration error:', error)\r\n        } finally {\r\n          this.isLoading = false\r\n        }\r\n      }\r\n    },\r\n    \r\n    beforeUnmount() {\r\n      this.clearErrorMessage()\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .auth-form {\r\n    max-width: 400px;\r\n    margin: 40px auto;\r\n    padding: 30px;\r\n    background-color: #2a2a2a;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  }\r\n  \r\n  h2 {\r\n    text-align: center;\r\n    margin-top: 0;\r\n    margin-bottom: 20px;\r\n    color: #3f8c6e;\r\n  }\r\n  \r\n  .error-message {\r\n    background-color: #e74c3c;\r\n    color: white;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .validation-error {\r\n    color: #e74c3c;\r\n    font-size: 12px;\r\n    margin-top: 5px;\r\n  }\r\n  \r\n  button {\r\n    width: 100%;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .login-link {\r\n    text-align: center;\r\n    margin-top: 20px;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .login-link a {\r\n    color: #3f8c6e;\r\n    text-decoration: none;\r\n  }\r\n  \r\n  .login-link a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  </style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Register.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Register.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Register.vue?vue&type=template&id=08a69fab&scoped=true\"\nimport script from \"./Register.vue?vue&type=script&lang=js\"\nexport * from \"./Register.vue?vue&type=script&lang=js\"\nimport style0 from \"./Register.vue?vue&type=style&index=0&id=08a69fab&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"08a69fab\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"lobby\"},[_c('h2',[_vm._v(\"Game Lobby\")]),(_vm.errorMessage)?_c('div',{staticClass:\"error-message\"},[_vm._v(\" \"+_vm._s(_vm.errorMessage)+\" \"),_c('button',{staticClass:\"close-error\",on:{\"click\":_vm.clearErrorMessage}},[_vm._v(\"×\")])]):_vm._e(),(_vm.statusMessage)?_c('div',{staticClass:\"status-message\"},[_vm._v(\" \"+_vm._s(_vm.statusMessage)+\" \")]):_vm._e(),_c('div',{staticClass:\"user-info card\"},[_c('h3',[_vm._v(\"Welcome, \"+_vm._s(_vm.currentUser ? _vm.currentUser.username : 'Player'))]),_c('p',[_vm._v(\"Balance: \"+_vm._s(_vm.currentUser ? _vm.currentUser.balance : 0)+\" chips (\"+_vm._s(_vm.formatRupiah(_vm.currentUser ? _vm.currentUser.balance * 500 : 0))+\")\")])]),_c('div',{staticClass:\"lobby-actions\"},[_c('div',{staticClass:\"card\"},[_c('h3',[_vm._v(\"Create New Game\")]),_c('p',[_vm._v(\"Start a new poker table and invite other players\")]),_c('button',{staticClass:\"btn\",attrs:{\"disabled\":_vm.isCreating || _vm.isJoining},on:{\"click\":_vm.handleCreateGame}},[_vm._v(\" \"+_vm._s(_vm.isCreating ? 'Creating...' : 'Create Game')+\" \")])]),_c('div',{staticClass:\"card\"},[_c('h3',[_vm._v(\"Join Existing Game\")]),_c('p',[_vm._v(\"Enter a 6-character game ID to join\")]),_c('div',{staticClass:\"form-group\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.gameIdInput),expression:\"gameIdInput\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\",\"placeholder\":\"Enter Game ID\",\"maxlength\":\"6\",\"disabled\":_vm.isCreating || _vm.isJoining},domProps:{\"value\":(_vm.gameIdInput)},on:{\"input\":function($event){if($event.target.composing)return;_vm.gameIdInput=$event.target.value}}})]),_c('button',{staticClass:\"btn\",attrs:{\"disabled\":(_vm.gameIdInput ? _vm.gameIdInput.length !== 6 : true) || _vm.isCreating || _vm.isJoining},on:{\"click\":_vm.handleJoinGame}},[_vm._v(\" \"+_vm._s(_vm.isJoining ? 'Joining...' : 'Join Game')+\" \")])])]),_c('div',{staticClass:\"lobby-footer\"},[_c('button',{staticClass:\"btn btn-secondary\",attrs:{\"disabled\":_vm.isCreating || _vm.isJoining},on:{\"click\":_vm.logout}},[_vm._v(\"Logout\")])])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// client/src/store/index.js\r\nimport Vue from \"vue\";\r\nimport Vuex from \"vuex\";\r\nimport axios from \"axios\";\r\nimport router from \"../router\";\r\n\r\nVue.use(Vuex);\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n    user: null,\r\n    token: localStorage.getItem(\"token\") || \"\",\r\n    currentGame: null,\r\n    currentGameId: null,\r\n    playerHand: [],\r\n    errorMessage: \"\",\r\n    isYourTurn: false,\r\n    availableActions: [],\r\n    isLoading: false,\r\n    gamesList: [],\r\n    userGames: [],\r\n  },\r\n\r\n  getters: {\r\n    isAuthenticated: (state) => !!state.token,\r\n    currentUser: (state) => state.user,\r\n    currentGameId: (state) => state.currentGameId,\r\n    currentGame: (state) => state.currentGame,\r\n    playerHand: (state) => state.playerHand,\r\n    errorMessage: (state) => state.errorMessage,\r\n    isYourTurn: (state) => state.isYourTurn,\r\n    availableActions: (state) => state.availableActions,\r\n    isLoading: (state) => state.isLoading,\r\n    gamesList: (state) => state.gamesList,\r\n    userGames: (state) => state.userGames,\r\n  },\r\n\r\n  mutations: {\r\n    SET_LOADING(state, isLoading) {\r\n      state.isLoading = isLoading;\r\n    },\r\n\r\n    SET_TOKEN(state, token) {\r\n      state.token = token;\r\n    },\r\n\r\n    SET_USER(state, user) {\r\n      // Handle both id and _id (MongoDB uses _id)\r\n      if (user) {\r\n        // Create a new object to avoid mutation issues\r\n        const standardizedUser = { ...user };\r\n        \r\n        // Make sure we have an id property, copying from _id if needed\r\n        if (!standardizedUser.id && standardizedUser._id) {\r\n          standardizedUser.id = standardizedUser._id;\r\n        }\r\n        \r\n        // Also do the reverse - ensure _id exists if we have id\r\n        if (standardizedUser.id && !standardizedUser._id) {\r\n          standardizedUser._id = standardizedUser.id;\r\n        }\r\n        \r\n        // Handle MongoDB $oid format if present\r\n        if (typeof standardizedUser.id === 'object' && standardizedUser.id?.$oid) {\r\n          standardizedUser.id = standardizedUser.id.$oid;\r\n        }\r\n        if (typeof standardizedUser._id === 'object' && standardizedUser._id?.$oid) {\r\n          standardizedUser._id = standardizedUser._id.$oid;\r\n        }\r\n        \r\n        // Handle objects with toString method (like MongoDB ObjectID)\r\n        if (typeof standardizedUser.id === 'object' && typeof standardizedUser.id?.toString === 'function') {\r\n          standardizedUser.id = standardizedUser.id.toString();\r\n        }\r\n        if (typeof standardizedUser._id === 'object' && typeof standardizedUser._id?.toString === 'function') {\r\n          standardizedUser._id = standardizedUser._id.toString();\r\n        }\r\n        \r\n        // Ensure both are strings to make comparison easier\r\n        if (standardizedUser.id) standardizedUser.id = String(standardizedUser.id);\r\n        if (standardizedUser._id) standardizedUser._id = String(standardizedUser._id);\r\n        \r\n        // Set the standardized user in state\r\n        state.user = standardizedUser;\r\n        \r\n        console.log('User data standardized and stored in state:', standardizedUser);\r\n      } else {\r\n        state.user = null;\r\n      }\r\n    },\r\n\r\n    CLEAR_AUTH(state) {\r\n      state.token = \"\";\r\n      state.user = null;\r\n    },\r\n\r\n    SET_CURRENT_GAME(state, game) {\r\n      state.currentGame = game;\r\n    },\r\n\r\n    SET_CURRENT_GAME_ID(state, gameId) {\r\n      state.currentGameId = gameId;\r\n    },\r\n\r\n    SET_PLAYER_HAND(state, cards) {\r\n      // First clear the array to ensure Vue reactivity triggers\r\n      state.playerHand = [];\r\n      \r\n      // Force Vue to detect the change by using Vue.set or a new array\r\n      // Option 1: Set with a completely new array\r\n      state.playerHand = [...cards];\r\n      \r\n      // Log for debugging\r\n      console.log('Vuex store updated player hand:', cards.map(c => `${c.rank} of ${c.suit}`).join(', '));\r\n    },\r\n\r\n    FORCE_UPDATE_CARDS(state, cards) {\r\n      if (!cards || !Array.isArray(cards)) return;\r\n      \r\n      // Reset the array\r\n      state.playerHand.length = 0;\r\n      \r\n      // Add the cards one by one to ensure Vue reactivity\r\n      cards.forEach(card => {\r\n        state.playerHand.push({\r\n          ...card, // Create new object to avoid reference issues\r\n          _updated: Date.now() // Add timestamp to force reactivity\r\n        });\r\n      });\r\n      \r\n      console.log('Vuex store FORCE updated player hand:', state.playerHand.map(c => `${c.rank} of ${c.suit}`).join(', '));\r\n    },\r\n\r\n    SET_ERROR_MESSAGE(state, message) {\r\n      state.errorMessage = message;\r\n    },\r\n\r\n    CLEAR_ERROR_MESSAGE(state) {\r\n      state.errorMessage = \"\";\r\n    },\r\n\r\n    SET_YOUR_TURN(state, isTurn) {\r\n      state.isYourTurn = isTurn;\r\n    },\r\n\r\n    SET_AVAILABLE_ACTIONS(state, actions) {\r\n      state.availableActions = actions;\r\n    },\r\n\r\n    SET_GAMES_LIST(state, games) {\r\n      state.gamesList = games;\r\n    },\r\n\r\n    SET_USER_GAMES(state, games) {\r\n      state.userGames = games;\r\n    },\r\n\r\n    UPDATE_USER_BALANCE(state, balance) {\r\n      if (state.user) {\r\n        state.user.balance = balance;\r\n      }\r\n    },\r\n  },\r\n\r\n  actions: {\r\n    // Authentication\r\n    async login({ commit, dispatch }, credentials) {\r\n      commit(\"SET_LOADING\", true);\r\n      commit(\"CLEAR_ERROR_MESSAGE\");\r\n\r\n      try {\r\n        console.log(\"Sending login request with credentials:\", {\r\n          username: credentials.username,\r\n          password: \"***HIDDEN***\",\r\n        });\r\n\r\n        const response = await axios.post(\"/api/auth/login\", credentials);\r\n        console.log(\"Login response received:\", response);\r\n\r\n        const { token, user } = response.data;\r\n\r\n        if (!token) {\r\n          commit(\"SET_ERROR_MESSAGE\", \"No token received from server\");\r\n          return { success: false, error: \"Authentication failed\" };\r\n        }\r\n\r\n        // Store token in localStorage and state\r\n        localStorage.setItem(\"token\", token);\r\n        commit(\"SET_TOKEN\", token);\r\n\r\n        // Set up auth header for axios\r\n        axios.defaults.headers.common[\"x-auth-token\"] = token;\r\n\r\n        // If the server returns user data with the token, use it\r\n        if (user && user.id && user.username) {\r\n          commit(\"SET_USER\", user);\r\n          return { success: true, token };\r\n        } else {\r\n          // Otherwise fetch user data\r\n          const userData = await dispatch(\"fetchUserData\");\r\n          return { success: userData.success, token };\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Login error full details:\", error);\r\n        const errorMsg = error.response?.data?.msg || \"Login failed\";\r\n        commit(\"SET_ERROR_MESSAGE\", errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    async register({ commit, dispatch }, credentials) {\r\n      commit(\"SET_LOADING\", true);\r\n      commit(\"CLEAR_ERROR_MESSAGE\");\r\n\r\n      try {\r\n        const response = await axios.post(\"/api/auth/register\", credentials);\r\n        const { token, user } = response.data;\r\n\r\n        localStorage.setItem(\"token\", token);\r\n        commit(\"SET_TOKEN\", token);\r\n\r\n        // If the server returns user data with the token, use it\r\n        if (user && user.id && user.username) {\r\n          commit(\"SET_USER\", user);\r\n          return { success: true };\r\n        } else {\r\n          // Otherwise fetch user data\r\n          return await dispatch(\"fetchUserData\");\r\n        }\r\n      } catch (error) {\r\n        const errorMsg = error.response?.data?.msg || \"Registration failed\";\r\n        commit(\"SET_ERROR_MESSAGE\", errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    async fetchUserData({ commit, state, dispatch }) {\r\n      commit(\"SET_LOADING\", true);\r\n\r\n      try {\r\n        // Make sure we have a token\r\n        if (!state.token) {\r\n          const token = localStorage.getItem(\"token\");\r\n          if (!token) {\r\n            commit(\"SET_ERROR_MESSAGE\", \"No authentication token\");\r\n            return { success: false, error: \"No authentication token\" };\r\n          }\r\n          commit(\"SET_TOKEN\", token);\r\n          axios.defaults.headers.common[\"x-auth-token\"] = token;\r\n        }\r\n\r\n        const response = await axios.get(\"/api/auth/user\", {\r\n          headers: {\r\n            \"x-auth-token\": state.token,\r\n          },\r\n          timeout: 8000, // Increase timeout for slower networks\r\n        });\r\n\r\n        const userData = response.data;\r\n\r\n        // Validate the user data\r\n        if (\r\n          !userData ||\r\n          (!userData.id && !userData._id) ||\r\n          !userData.username\r\n        ) {\r\n          console.error(\"Incomplete user data received:\", userData);\r\n          commit(\r\n            \"SET_ERROR_MESSAGE\",\r\n            \"Received incomplete user data from server\"\r\n          );\r\n          return { success: false, error: \"Incomplete user data\" };\r\n        }\r\n\r\n        // Create a standardized user object\r\n        const standardizedUser = {\r\n          ...userData,\r\n          id: userData.id || userData._id,\r\n          _id: userData._id || userData.id,\r\n        };\r\n\r\n        // Store both id and _id to prevent issues\r\n        if (\r\n          typeof standardizedUser.id === \"object\" &&\r\n          standardizedUser.id.$oid\r\n        ) {\r\n          standardizedUser.id = standardizedUser.id.$oid;\r\n        }\r\n        if (\r\n          typeof standardizedUser._id === \"object\" &&\r\n          standardizedUser._id.$oid\r\n        ) {\r\n          standardizedUser._id = standardizedUser._id.$oid;\r\n        }\r\n\r\n        // Ensure both are strings\r\n        standardizedUser.id = String(standardizedUser.id);\r\n        standardizedUser._id = String(standardizedUser._id);\r\n\r\n        commit(\"SET_USER\", standardizedUser);\r\n        console.log(\"User data fetched successfully:\", standardizedUser);\r\n        return { success: true, user: standardizedUser };\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch user data:\", error);\r\n\r\n        // Handle token expiration\r\n        if (error.response && error.response.status === 401) {\r\n          console.log(\"Authentication token expired. Logging out...\");\r\n          dispatch(\"logout\");\r\n        }\r\n\r\n        commit(\"SET_ERROR_MESSAGE\", \"Failed to fetch user data\");\r\n        return { success: false, error: \"Failed to fetch user data\" };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    logout({ commit }) {\r\n      localStorage.removeItem(\"token\");\r\n      commit(\"CLEAR_AUTH\");\r\n      router.push(\"/login\");\r\n    },\r\n\r\n    // Game management\r\n    async fetchGames({ commit, state }) {\r\n      commit(\"SET_LOADING\", true);\r\n\r\n      try {\r\n        const response = await axios.get(\"/api/games\", {\r\n          headers: { \"x-auth-token\": state.token },\r\n        });\r\n\r\n        commit(\"SET_GAMES_LIST\", response.data);\r\n        return { success: true, games: response.data };\r\n      } catch (error) {\r\n        console.error(\"Fetch games error:\", error);\r\n        return { success: false, error: \"Failed to fetch games\" };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    async fetchUserGames({ commit, state }) {\r\n      commit(\"SET_LOADING\", true);\r\n\r\n      try {\r\n        const response = await axios.get(\"/api/games/user\", {\r\n          headers: { \"x-auth-token\": state.token },\r\n        });\r\n\r\n        commit(\"SET_USER_GAMES\", response.data);\r\n        return { success: true, games: response.data };\r\n      } catch (error) {\r\n        console.error(\"Fetch user games error:\", error);\r\n        return { success: false, error: \"Failed to fetch your games\" };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    // UPDATED: Create game with timeout handling\r\n    async createGame({ commit, state }) {\r\n      commit(\"SET_LOADING\", true);\r\n      commit(\"CLEAR_ERROR_MESSAGE\");\r\n\r\n      try {\r\n        // Make sure the user is authenticated\r\n        if (!state.user || !state.token) {\r\n          commit(\"SET_ERROR_MESSAGE\", \"User not authenticated\");\r\n          return { success: false, error: \"User not authenticated\" };\r\n        }\r\n\r\n        // Ensure we have a valid user ID and username\r\n        const userId = state.user.id;\r\n        const username = state.user.username;\r\n\r\n        if (!userId || !username) {\r\n          commit(\"SET_ERROR_MESSAGE\", \"User information incomplete\");\r\n          return { success: false, error: \"User information incomplete\" };\r\n        }\r\n\r\n        console.log(\r\n          \"Creating game with user ID:\",\r\n          userId,\r\n          \"and username:\",\r\n          username\r\n        );\r\n\r\n        // Use a more robust approach with explicit error handling\r\n        try {\r\n          const response = await axios.post(\r\n            \"/api/games\",\r\n            {\r\n              creatorId: userId,\r\n              creatorName: username,\r\n            },\r\n            {\r\n              headers: { \"x-auth-token\": state.token },\r\n              timeout: 10000, // 10 second timeout\r\n            }\r\n          );\r\n\r\n          console.log(\"Game creation API response:\", response.data);\r\n\r\n          if (response.data && response.data.gameId) {\r\n            commit(\"SET_CURRENT_GAME_ID\", response.data.gameId);\r\n            return { success: true, gameId: response.data.gameId };\r\n          } else {\r\n            console.error(\"Invalid server response format:\", response.data);\r\n            commit(\"SET_ERROR_MESSAGE\", \"Invalid server response format\");\r\n            return { success: false, error: \"Invalid server response\" };\r\n          }\r\n        } catch (axiosError) {\r\n          console.error(\"Axios error during game creation:\", axiosError);\r\n\r\n          if (axiosError.response) {\r\n            // The server responded with an error\r\n            const errorMsg =\r\n              axiosError.response.data?.msg ||\r\n              `Server error: ${axiosError.response.status}`;\r\n            commit(\"SET_ERROR_MESSAGE\", errorMsg);\r\n            return { success: false, error: errorMsg };\r\n          } else if (axiosError.request) {\r\n            // The request was made but no response was received\r\n            commit(\r\n              \"SET_ERROR_MESSAGE\",\r\n              \"No response from server. Check your connection.\"\r\n            );\r\n            return { success: false, error: \"Network error - no response\" };\r\n          } else {\r\n            // Something else happened\r\n            commit(\r\n              \"SET_ERROR_MESSAGE\",\r\n              axiosError.message || \"Request setup error\"\r\n            );\r\n            return {\r\n              success: false,\r\n              error: axiosError.message || \"Unknown error\",\r\n            };\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Create game error:\", error);\r\n        const errorMsg = error.message || \"Failed to create game\";\r\n        commit(\"SET_ERROR_MESSAGE\", errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    // UPDATED: Join game with timeout handling\r\n    async joinGame({ commit, state }, gameId) {\r\n      commit(\"SET_LOADING\", true);\r\n      commit(\"CLEAR_ERROR_MESSAGE\");\r\n\r\n      try {\r\n        // Make sure we have user data\r\n        if (!state.user || !state.user.id || !state.user.username) {\r\n          commit(\"SET_ERROR_MESSAGE\", \"User information incomplete\");\r\n          return { success: false, error: \"User information incomplete\" };\r\n        }\r\n\r\n        // Use Promise.race with a timeout to prevent hanging requests\r\n        const timeoutPromise = new Promise((_, reject) => {\r\n          setTimeout(\r\n            () => reject(new Error(\"Join game request timed out\")),\r\n            8000\r\n          );\r\n        });\r\n\r\n        const requestPromise = axios.post(\r\n          `/api/games/join/${gameId}`,\r\n          {\r\n            playerId: state.user.id,\r\n            playerName: state.user.username,\r\n          },\r\n          {\r\n            headers: { \"x-auth-token\": state.token },\r\n          }\r\n        );\r\n\r\n        await Promise.race([requestPromise, timeoutPromise]);\r\n\r\n        commit(\"SET_CURRENT_GAME_ID\", gameId);\r\n        return { success: true };\r\n      } catch (error) {\r\n        console.error(\"Join game error:\", error);\r\n        const errorMsg =\r\n          error.message === \"Join game request timed out\"\r\n            ? \"Request timed out. Please try again.\"\r\n            : error.response?.data?.msg || \"Failed to join game\";\r\n        commit(\"SET_ERROR_MESSAGE\", errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    async fetchGame({ commit, state }, gameId) {\r\n      commit(\"SET_LOADING\", true);\r\n\r\n      try {\r\n        const response = await axios.get(`/api/games/${gameId}`, {\r\n          headers: { \"x-auth-token\": state.token },\r\n        });\r\n\r\n        commit(\"SET_CURRENT_GAME\", response.data);\r\n        commit(\"SET_CURRENT_GAME_ID\", gameId);\r\n        return { success: true, game: response.data };\r\n      } catch (error) {\r\n        const errorMsg =\r\n          error.response?.data?.msg || \"Failed to fetch game data\";\r\n        commit(\"SET_ERROR_MESSAGE\", errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    // In your store's actions section\r\n\r\n    async startGame({ commit, state }, gameId) {\r\n      commit(\"SET_LOADING\", true);\r\n      console.log(\"Store startGame action called with gameId:\", gameId);\r\n      console.log(\"Current user in store:\", state.user);\r\n\r\n      try {\r\n        console.log(\"Making start game API request...\");\r\n        const response = await axios.post(\r\n          `/api/games/start/${gameId}`,\r\n          {\r\n            playerId: state.user.id,\r\n          },\r\n          {\r\n            headers: { \"x-auth-token\": state.token },\r\n          }\r\n        );\r\n\r\n        console.log(\"Start game API response:\", response.data);\r\n\r\n        if (response.data && response.data.success) {\r\n          console.log(\"Game started successfully through API\");\r\n          return { success: true };\r\n        } else {\r\n          console.error(\"API response did not indicate success\");\r\n          return { success: false, error: \"Server did not report success\" };\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Start game API error details:\", error);\r\n        const errorMsg = error.response?.data?.msg || \"Failed to start game\";\r\n        commit(\"SET_ERROR_MESSAGE\", errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    // Socket event handlers\r\n    updateGameState({ commit, state }, gameState) {\r\n      if (!gameState) return;\r\n\r\n      // Log detailed game state for debugging\r\n      console.log(\"Updating game state with data:\", {\r\n        id: gameState.id,\r\n        status: gameState.status,\r\n        currentTurn: gameState.currentTurn,\r\n        playerCount: gameState.players?.length || 0,\r\n        bettingRound: gameState.bettingRound,\r\n      });\r\n\r\n      // Make sure important fields are present\r\n      const enhancedGameState = { ...gameState };\r\n\r\n      // Force status to 'active' if players have cards but status doesn't reflect it\r\n      if (\r\n        gameState.players &&\r\n        gameState.players.some((p) => p.hasCards) &&\r\n        gameState.status !== \"active\"\r\n      ) {\r\n        console.log(\r\n          \"Players have cards but game status is not active; forcing to active\"\r\n        );\r\n        enhancedGameState.status = \"active\";\r\n      }\r\n\r\n      // Add creator info if it's missing but we previously had it\r\n      if (\r\n        !gameState.creator &&\r\n        state.currentGame &&\r\n        state.currentGame.creator\r\n      ) {\r\n        console.log(\"Preserving creator info that was missing in update\");\r\n        enhancedGameState.creator = state.currentGame.creator;\r\n      }\r\n\r\n      // Commit the enhanced state\r\n      commit(\"SET_CURRENT_GAME\", enhancedGameState);\r\n\r\n      // If this update includes turn info and it's the current user's turn,\r\n      // make sure the isYourTurn flag is set\r\n      if (\r\n        state.user &&\r\n        gameState.currentTurn &&\r\n        gameState.currentTurn === state.user.id &&\r\n        !state.isYourTurn\r\n      ) {\r\n        console.log(\r\n          \"Game state shows it is your turn, updating isYourTurn flag\"\r\n        );\r\n        commit(\"SET_YOUR_TURN\", true);\r\n\r\n        // Derive available actions if needed\r\n        if (state.availableActions.length === 0) {\r\n          commit(\"SET_AVAILABLE_ACTIONS\", [\r\n            \"fold\",\r\n            \"check\",\r\n            \"call\",\r\n            \"bet\",\r\n            \"raise\",\r\n          ]);\r\n        }\r\n      }\r\n    },\r\n\r\n    receiveCards({ commit }, { hand }) {\r\n      if (!hand) return;\r\n      commit(\"SET_PLAYER_HAND\", hand);\r\n    },\r\n\r\n    yourTurn({ commit }, { options }) {\r\n      commit(\"SET_YOUR_TURN\", true);\r\n      commit(\"SET_AVAILABLE_ACTIONS\", options || []);\r\n    },\r\n\r\n    endTurn({ commit }) {\r\n      commit(\"SET_YOUR_TURN\", false);\r\n      commit(\"SET_AVAILABLE_ACTIONS\", []);\r\n    },\r\n\r\n    // Player actions\r\n    async performAction({ commit }, { action, amount }) {\r\n      try {\r\n        commit(\"SET_YOUR_TURN\", false);\r\n        return { success: true, action, amount };\r\n      } catch (error) {\r\n        commit(\"SET_ERROR_MESSAGE\", \"Failed to perform action\");\r\n        return { success: false, error: \"Failed to perform action\" };\r\n      }\r\n    },\r\n\r\n    clearErrorMessage({ commit }) {\r\n      commit(\"CLEAR_ERROR_MESSAGE\");\r\n    },\r\n\r\n    // User profile\r\n    async updateProfile({ commit, state }, userData) {\r\n      commit(\"SET_LOADING\", true);\r\n\r\n      try {\r\n        const response = await axios.put(\"/api/auth/profile\", userData, {\r\n          headers: { \"x-auth-token\": state.token },\r\n        });\r\n\r\n        commit(\"SET_USER\", response.data);\r\n        return { success: true, user: response.data };\r\n      } catch (error) {\r\n        const errorMsg =\r\n          error.response?.data?.msg || \"Failed to update profile\";\r\n        commit(\"SET_ERROR_MESSAGE\", errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n\r\n    async fetchUserStats({ commit, state }) {\r\n      commit(\"SET_LOADING\", true);\r\n\r\n      try {\r\n        const response = await axios.get(\"/api/auth/stats\", {\r\n          headers: { \"x-auth-token\": state.token },\r\n        });\r\n\r\n        return { success: true, stats: response.data };\r\n      } catch (error) {\r\n        console.error(\"Fetch user stats error:\", error);\r\n        return { success: false, error: \"Failed to fetch user statistics\" };\r\n      } finally {\r\n        commit(\"SET_LOADING\", false);\r\n      }\r\n    },\r\n    forceUpdatePlayerHand({ commit }, cards) {\r\n      commit('FORCE_UPDATE_CARDS', cards);\r\n      return { success: true };\r\n    },\r\n  },\r\n});\r\n","// client/src/services/config.js\r\n// Modified version for accessing the API through ngrok\r\n\r\nimport axios from \"axios\";\r\n\r\nlet config = null;\r\nlet isLoading = false;\r\nlet loadPromise = null;\r\nlet lastFetchTime = 0;\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\n/**\r\n * Load application configuration from the server with better error handling\r\n * @param {boolean} forceRefresh - Force a refresh of the configuration\r\n * @returns {Promise<Object>} Configuration object\r\n */\r\nexport const loadConfig = async (forceRefresh = false) => {\r\n  // Return cached config if it's recent and not forced to refresh\r\n  const now = Date.now();\r\n  if (config && !forceRefresh && now - lastFetchTime < CACHE_DURATION) {\r\n    return config;\r\n  }\r\n\r\n  // If already loading, return the existing promise\r\n  if (isLoading) {\r\n    return loadPromise;\r\n  }\r\n\r\n  isLoading = true;\r\n\r\n  loadPromise = new Promise((resolve) => {\r\n    const fetchConfig = async () => {\r\n      try {\r\n        // Remove ngrok URL from localStorage if it's causing issues\r\n        const useNgrok = localStorage.getItem(\"useNgrok\") === \"true\";\r\n        if (!useNgrok && localStorage.getItem(\"ngrokUrl\")) {\r\n          console.log(\"Removing saved ngrok URL from localStorage\");\r\n          localStorage.removeItem(\"ngrokUrl\");\r\n        }\r\n\r\n        // Start with direct server communication\r\n        let configUrl = `${window.location.origin}/api/config`;\r\n        console.log(\"Loading configuration from current origin:\", configUrl);\r\n\r\n        try {\r\n          const response = await axios.get(configUrl, {\r\n            timeout: 5000,\r\n            headers: { \"Cache-Control\": \"no-cache\" },\r\n          });\r\n\r\n          config = response.data;\r\n          console.log(\"Application configuration loaded:\", config);\r\n\r\n          // Only save ngrok URL if useNgrok is true\r\n          if (useNgrok && config.isNgrok && config.apiUrl) {\r\n            localStorage.setItem(\"ngrokUrl\", config.apiUrl);\r\n            console.log(\"Saved ngrok URL to localStorage:\", config.apiUrl);\r\n          }\r\n\r\n          lastFetchTime = Date.now();\r\n          isLoading = false;\r\n          resolve(config);\r\n          return;\r\n        } catch (originError) {\r\n          console.warn(\r\n            \"Failed to load from origin, will try fallback:\",\r\n            originError\r\n          );\r\n        }\r\n\r\n        // Create fallback config with improved URL determination\r\n        config = {\r\n          apiUrl: determineServerUrl(),\r\n          socketUrl: determineServerUrl(),\r\n          env: \"development\",\r\n          version: \"1.0.0\",\r\n          isFallback: true,\r\n        };\r\n\r\n        console.log(\"Using fallback configuration:\", config);\r\n        lastFetchTime = Date.now();\r\n\r\n        isLoading = false;\r\n        resolve(config);\r\n      } catch (error) {\r\n        console.error(\"Failed to load configuration, using defaults:\", error);\r\n\r\n        // Create simple fallback config with current origin\r\n        config = {\r\n          apiUrl: window.location.origin,\r\n          socketUrl: window.location.origin,\r\n          env: \"development\",\r\n          version: \"1.0.0\",\r\n          isFallback: true,\r\n        };\r\n\r\n        console.log(\"Using emergency fallback configuration:\", config);\r\n        lastFetchTime = Date.now();\r\n\r\n        isLoading = false;\r\n        resolve(config);\r\n      }\r\n    };\r\n\r\n    fetchConfig();\r\n  });\r\n\r\n  return loadPromise;\r\n};\r\n\r\n/**\r\n * Intelligently determine the server URL based on client URL\r\n * @returns {string} Best guess of server URL\r\n */\r\nfunction determineServerUrl() {\r\n  const hostname = window.location.hostname;\r\n\r\n  // Use the current origin as default - most reliable for development\r\n  const currentOrigin = window.location.origin;\r\n\r\n  // Only use ngrok if explicitly enabled\r\n  const useNgrok = localStorage.getItem(\"useNgrok\") === \"true\";\r\n  if (useNgrok) {\r\n    // Try to get saved ngrok URL if enabled\r\n    const savedNgrokUrl = localStorage.getItem(\"ngrokUrl\");\r\n    if (savedNgrokUrl) {\r\n      return savedNgrokUrl;\r\n    }\r\n  }\r\n\r\n  // For development with devices on local network, handle possible proxy setup\r\n  if (\r\n    hostname === \"localhost\" ||\r\n    hostname === \"127.0.0.1\" ||\r\n    hostname.match(/192\\.168\\./) ||\r\n    hostname.match(/10\\./)\r\n  ) {\r\n    // If we're not running on port 5000, we're likely using Vue devserver with proxy\r\n    if (window.location.port !== \"5000\") { // Updated from 3000 to 5000\r\n      console.log(\"Using current origin with proxy:\", currentOrigin);\r\n      return currentOrigin;\r\n    }\r\n    return currentOrigin;\r\n  }\r\n\r\n  // For production, assume API is on same domain\r\n  return currentOrigin;\r\n}\r\n\r\n/**\r\n * Reset the loaded configuration (useful for testing)\r\n */\r\nexport const resetConfig = () => {\r\n  config = null;\r\n  isLoading = false;\r\n  loadPromise = null;\r\n  lastFetchTime = 0;\r\n};\r\n\r\n/**\r\n * Get a specific configuration value\r\n * @param {string} key - Configuration key\r\n * @param {any} defaultValue - Default value if key not found\r\n * @returns {Promise<any>} Configuration value\r\n */\r\nexport const getConfigValue = async (key, defaultValue = null) => {\r\n  const conf = await loadConfig();\r\n  return conf[key] !== undefined ? conf[key] : defaultValue;\r\n};\r\n\r\n/**\r\n * Force reload the configuration\r\n * @returns {Promise<Object>} Fresh configuration\r\n */\r\nexport const refreshConfig = async () => {\r\n  return loadConfig(true);\r\n};","// client/src/services/SocketService.js\r\nimport io from \"socket.io-client\";\r\nimport store from \"../store\";\r\nimport { loadConfig } from \"./config\";\r\n\r\n/**\r\n * Service for handling Socket.IO connections\r\n */\r\n// Define a map to track the last update time for each game\r\nconst lastUpdateTime = {};\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.gameSocket = null;\r\n    this.isConnected = false;\r\n    this.events = {};\r\n    this.connectionPromise = null;\r\n    this.connectionAttempts = 0;\r\n    this.maxConnectionAttempts = 3;\r\n    this.connectionTimeout = null;\r\n  }\r\n\r\n  /**\r\n   * Initialize and connect to socket server\r\n   * @returns {Promise} Promise that resolves when connected\r\n   */\r\n  /**\r\n   * Initialize and connect to socket server with improved error handling\r\n   * @returns {Promise} Promise that resolves when connected\r\n   */\r\n  async init() {\r\n    // Clear any existing timeout\r\n    if (this.connectionTimeout) {\r\n      clearTimeout(this.connectionTimeout);\r\n      this.connectionTimeout = null;\r\n    }\r\n\r\n    // If we already have a connection promise, return it\r\n    if (this.connectionPromise) {\r\n      return this.connectionPromise;\r\n    }\r\n\r\n    // If we're already connected, resolve immediately\r\n    if (this.isConnected && this.gameSocket) {\r\n      return Promise.resolve(this.gameSocket);\r\n    }\r\n\r\n    // Create a connection promise with timeout handling\r\n    this.connectionPromise = new Promise((resolve, reject) => {\r\n      // Set a timeout to prevent hanging connections\r\n      this.connectionTimeout = setTimeout(() => {\r\n        console.error(\"Socket connection timeout after 10 seconds\");\r\n        this.connectionPromise = null;\r\n        reject(new Error(\"Connection timeout\"));\r\n      }, 10000);\r\n\r\n      const setupConnection = async () => {\r\n        try {\r\n          // Load configuration to get the socket URL\r\n          const config = await loadConfig();\r\n\r\n          // Get the socket URL from config\r\n          const socketUrl = config.socketUrl || window.location.origin;\r\n          console.log(\"Connecting to socket server at:\", socketUrl);\r\n\r\n          // If there's an existing socket, disconnect it\r\n          if (this.gameSocket) {\r\n            this.gameSocket.disconnect();\r\n            this.gameSocket = null;\r\n          }\r\n\r\n          // Try to determine if browser supports websockets\r\n          const supportsWebsockets =\r\n            \"WebSocket\" in window && window.WebSocket.CLOSING === 2;\r\n\r\n          // Connect to game namespace with optimized settings based on browser support\r\n          this.gameSocket = io(`${socketUrl}/game`, {\r\n            transports: supportsWebsockets\r\n              ? [\"websocket\"]\r\n              : [\"websocket\", \"polling\"],\r\n            reconnection: true,\r\n            reconnectionAttempts: 5,\r\n            reconnectionDelay: 1000,\r\n            timeout: 8000,\r\n            autoConnect: true,\r\n            withCredentials: true,\r\n            forceNew: true,\r\n          });\r\n\r\n          // Add connection event listener\r\n          this.gameSocket.on(\"connect\", () => {\r\n            console.log(\r\n              \"Connected to game socket with ID:\",\r\n              this.gameSocket.id\r\n            );\r\n            console.log(\r\n              \"Using transport:\",\r\n              this.gameSocket.io.engine.transport.name\r\n            );\r\n            this.isConnected = true;\r\n            this.connectionAttempts = 0;\r\n\r\n            // Clear the connection timeout\r\n            if (this.connectionTimeout) {\r\n              clearTimeout(this.connectionTimeout);\r\n              this.connectionTimeout = null;\r\n            }\r\n\r\n            // Register user if available\r\n            const user = store.getters.currentUser;\r\n            if (user && user.id) {\r\n              this.registerUser(user.id);\r\n            }\r\n\r\n            resolve(this.gameSocket);\r\n          });\r\n\r\n          // Add connection error listener with more details\r\n          this.gameSocket.on(\"connect_error\", (error) => {\r\n            console.error(\"Socket connection error:\", error);\r\n\r\n            // Increment connection attempts\r\n            this.connectionAttempts++;\r\n\r\n            if (this.connectionAttempts >= this.maxConnectionAttempts) {\r\n              if (this.connectionTimeout) {\r\n                clearTimeout(this.connectionTimeout);\r\n                this.connectionTimeout = null;\r\n              }\r\n              this.connectionPromise = null;\r\n              reject(\r\n                new Error(\r\n                  `Failed to connect after ${this.maxConnectionAttempts} attempts`\r\n                )\r\n              );\r\n            }\r\n          });\r\n\r\n          // Add disconnect listener\r\n          this.gameSocket.on(\"disconnect\", (reason) => {\r\n            console.log(\"Disconnected from game socket. Reason:\", reason);\r\n            this.isConnected = false;\r\n\r\n            // Reset connection promise if disconnected permanently\r\n            if (\r\n              reason === \"io server disconnect\" ||\r\n              reason === \"transport close\"\r\n            ) {\r\n              this.connectionPromise = null;\r\n            }\r\n          });\r\n\r\n          // Set up game event listeners\r\n          this.setupGameListeners();\r\n        } catch (error) {\r\n          console.error(\"Error during socket setup:\", error);\r\n\r\n          if (this.connectionTimeout) {\r\n            clearTimeout(this.connectionTimeout);\r\n            this.connectionTimeout = null;\r\n          }\r\n\r\n          this.connectionPromise = null;\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      // Execute the setup function\r\n      setupConnection();\r\n    });\r\n\r\n    return this.connectionPromise;\r\n  }\r\n\r\n  /**\r\n   * Register user with socket\r\n   * @param {string} userId - User ID\r\n   */\r\n  registerUser(userId) {\r\n    if (!userId) {\r\n      console.warn(\"Cannot register user - no userId provided\");\r\n      return;\r\n    }\r\n\r\n    if (!this.gameSocket) {\r\n      console.warn(\"Cannot register user - socket not initialized\");\r\n      return this.init().then(() => this.registerUser(userId));\r\n    }\r\n\r\n    if (!this.isConnected) {\r\n      console.warn(\"Socket not connected, will register when connected\");\r\n\r\n      // Add a one-time connect listener to register when connected\r\n      this.gameSocket.once(\"connect\", () => {\r\n        this.registerUser(userId);\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.gameSocket.emit(\"register\", { userId });\r\n    console.log(`Registered user ${userId} with socket`);\r\n  }\r\n\r\n  /**\r\n   * Join a game room\r\n   * @param {string} gameId - Game ID\r\n   * @param {string} userId - User ID\r\n   * @param {string} username - Username\r\n   * @returns {Promise} Promise that resolves when joined\r\n   */\r\n  async joinGame(gameId, userId, username) {\r\n    if (!gameId || !userId || !username) {\r\n      throw new Error(\"Missing required parameters for joinGame\");\r\n    }\r\n\r\n    // Make sure socket is initialized and connected with timeout\r\n    try {\r\n      // First initialize socket connection\r\n      await this.init();\r\n\r\n      // Then create promise for game joining\r\n      const joinPromise = new Promise((resolve, reject) => {\r\n        // Set a timeout for the join operation\r\n        const joinTimeout = setTimeout(() => {\r\n          reject(new Error(\"Join game timeout after 8 seconds\"));\r\n        }, 8000);\r\n\r\n        // Set up a one-time event listener for join confirmation\r\n        this.gameSocket.once(\"gameUpdate\", () => {\r\n          clearTimeout(joinTimeout);\r\n          resolve(true);\r\n        });\r\n\r\n        // Also listen for errors\r\n        const errorHandler = (error) => {\r\n          clearTimeout(joinTimeout);\r\n          reject(error);\r\n        };\r\n\r\n        this.gameSocket.once(\"gameError\", errorHandler);\r\n\r\n        console.log(`Joining game ${gameId} as ${username} (${userId})`);\r\n\r\n        // Join the game room\r\n        this.gameSocket.emit(\"joinGame\", {\r\n          gameId,\r\n          userId,\r\n          username,\r\n        });\r\n\r\n        // Request game state update as a backup\r\n        setTimeout(() => {\r\n          this.requestGameUpdate(gameId, userId);\r\n        }, 500);\r\n      });\r\n\r\n      return await joinPromise;\r\n    } catch (error) {\r\n      console.error(\"Error joining game:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start a game\r\n   * @param {string} gameId - Game ID\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise} Promise that resolves when game starts\r\n   */\r\n  startGame(gameId, userId) {\r\n    // First initialize the socket, then handle the game start\r\n    return this.init()\r\n      .then(() => {\r\n        return new Promise((resolve, reject) => {\r\n          if (!gameId || !userId) {\r\n            return reject(\r\n              new Error(\"Missing required parameters for startGame\")\r\n            );\r\n          }\r\n\r\n          if (!this.gameSocket || !this.isConnected) {\r\n            return reject(new Error(\"Socket not connected\"));\r\n          }\r\n\r\n          console.log(`Emitting startGame event for game ${gameId}`);\r\n\r\n          // Set a timeout for the operation\r\n          const startTimeout = setTimeout(() => {\r\n            reject(new Error(\"Start game timeout after 10 seconds\"));\r\n          }, 10000);\r\n\r\n          // Set up a one-time event listener for confirmation\r\n          this.gameSocket.once(\"gameStarted\", (data) => {\r\n            console.log(\"Received gameStarted event:\", data);\r\n            clearTimeout(startTimeout);\r\n            resolve(data);\r\n          });\r\n\r\n          // Also listen for errors\r\n          const errorHandler = (error) => {\r\n            console.error(\"Game error during start:\", error);\r\n            clearTimeout(startTimeout);\r\n            reject(error);\r\n          };\r\n\r\n          this.gameSocket.once(\"gameError\", errorHandler);\r\n\r\n          // Emit the start game event\r\n          this.gameSocket.emit(\"startGame\", {\r\n            gameId,\r\n            userId,\r\n          });\r\n\r\n          // Also emit a simple log message for debugging\r\n          this.gameSocket.emit(\"chatMessage\", {\r\n            gameId,\r\n            userId,\r\n            username: \"System\",\r\n            message: \"Starting game...\",\r\n          });\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error in startGame:\", error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Leave a game\r\n   * @param {string} gameId - Game ID\r\n   * @param {string} userId - User ID\r\n   */\r\n  leaveGame(gameId, userId) {\r\n    if (!gameId || !userId) {\r\n      console.warn(\"Cannot leave game - missing required parameters\");\r\n      return;\r\n    }\r\n\r\n    if (!this.gameSocket || !this.isConnected) {\r\n      console.warn(\"Cannot leave game - socket not connected\");\r\n      return;\r\n    }\r\n\r\n    console.log(`Leaving game ${gameId}`);\r\n\r\n    this.gameSocket.emit(\"leaveGame\", {\r\n      gameId,\r\n      userId,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Request game state update with improved error handling\r\n   * @param {string} gameId - Game ID\r\n   * @param {string} userId - User ID\r\n   * @returns {Promise} Promise that resolves when update is received\r\n   */\r\n  requestGameUpdate(gameId, userId) {\r\n    return new Promise((resolve) => {\r\n      if (!gameId) {\r\n        console.warn(\"Cannot request game update - gameId is required\");\r\n        resolve(false);\r\n        return;\r\n      }\r\n\r\n      if (!this.gameSocket || !this.isConnected) {\r\n        console.warn(\"Cannot request game update - socket not connected\");\r\n\r\n        // Try to reconnect\r\n        this.init()\r\n          .then(() => {\r\n            console.log(\"Reconnected, now requesting game update\");\r\n            this.requestGameUpdate(gameId, userId).then(resolve);\r\n          })\r\n          .catch((err) => {\r\n            console.error(\"Failed to reconnect:\", err);\r\n            resolve(false);\r\n          });\r\n\r\n        return;\r\n      }\r\n\r\n      // Throttle requests - don't send if recent request was made\r\n      const now = Date.now();\r\n      const lastUpdate = lastUpdateTime[gameId] || 0;\r\n\r\n      if (now - lastUpdate < 2000) {\r\n        console.log(\"Throttling game update request\");\r\n        resolve(false);\r\n        return;\r\n      }\r\n\r\n      console.log(`Requesting game update for ${gameId}`);\r\n      lastUpdateTime[gameId] = now;\r\n\r\n      // Set up a one-time listener for game update events\r\n      const onGameUpdate = () => {\r\n        // Removed unused 'data' parameter\r\n        console.log(\"Received game update after request\");\r\n        resolve(true);\r\n\r\n        // Remove the one-time listener\r\n        this.gameSocket.off(\"gameUpdate\", onGameUpdate);\r\n      };\r\n\r\n      // Add a timeout for the request\r\n      const timeoutId = setTimeout(() => {\r\n        // Renamed to timeoutId to make clear we're using it\r\n        console.log(\"Game update request timed out\");\r\n        this.gameSocket.off(\"gameUpdate\", onGameUpdate);\r\n        resolve(false);\r\n      }, 5000);\r\n\r\n      // Listen for the game update event\r\n      this.gameSocket.once(\"gameUpdate\", onGameUpdate);\r\n\r\n      // Send the request\r\n      this.gameSocket.emit(\"requestGameUpdate\", {\r\n        gameId,\r\n        userId,\r\n      });\r\n\r\n      // Return a cleanup function for clearing the timeout if needed\r\n      return () => {\r\n        clearTimeout(timeoutId);\r\n        this.gameSocket.off(\"gameUpdate\", onGameUpdate);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send a player action\r\n   * @param {string} gameId - Game ID\r\n   * @param {string} userId - User ID\r\n   * @param {string} action - Action type\r\n   * @param {number} amount - Bet amount\r\n   */\r\n  /**\r\n   * Send a player action - Enhanced with better error handling\r\n   * @param {string} gameId - Game ID\r\n   * @param {string} userId - User ID\r\n   * @param {string} action - Action type\r\n   * @param {number} amount - Bet amount\r\n   */\r\n  sendPlayerAction(gameId, userId, action, amount = 0) {\r\n    if (!gameId || !userId || !action) {\r\n      console.warn(\"Cannot send player action - missing required parameters\");\r\n      return;\r\n    }\r\n\r\n    if (!this.gameSocket || !this.isConnected) {\r\n      console.warn(\"Cannot send player action - socket not connected\");\r\n      return;\r\n    }\r\n\r\n    // Ensure amount is a valid number\r\n    if (action === \"bet\" || action === \"raise\" || action === \"call\") {\r\n      // Convert to number and handle NaN\r\n      amount = parseFloat(amount);\r\n      if (isNaN(amount)) {\r\n        console.error(`Invalid amount for ${action}: ${amount}`);\r\n        amount = 0; // Set a default to prevent NaN errors\r\n      }\r\n    }\r\n\r\n    console.log(`Sending player action: ${action} with amount: ${amount}`);\r\n\r\n    this.gameSocket.emit(\"playerAction\", {\r\n      gameId,\r\n      userId,\r\n      action,\r\n      amount,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send a chat message\r\n   * @param {string} gameId - Game ID\r\n   * @param {string} userId - User ID\r\n   * @param {string} username - Username\r\n   * @param {string} message - Chat message\r\n   */\r\n  sendChatMessage(gameId, userId, username, message) {\r\n    if (!gameId || !userId || !username || !message) {\r\n      console.warn(\"Cannot send chat message - missing required parameters\");\r\n      return;\r\n    }\r\n\r\n    if (!this.gameSocket || !this.isConnected) {\r\n      console.warn(\"Cannot send chat message - socket not connected\");\r\n      return;\r\n    }\r\n\r\n    this.gameSocket.emit(\"sendMessage\", {\r\n      gameId,\r\n      userId,\r\n      username,\r\n      message,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup game event listeners\r\n   */\r\n  setupGameListeners() {\r\n    if (!this.gameSocket) return;\r\n\r\n    // Define events to listen for\r\n    const events = [\r\n      \"gameUpdate\",\r\n      \"gameStarted\",\r\n      \"playerJoined\",\r\n      \"playerLeft\",\r\n      \"chatMessage\",\r\n      \"dealCards\",\r\n      \"yourTurn\",\r\n      \"turnChanged\",\r\n      \"actionTaken\",\r\n      \"dealFlop\",\r\n      \"dealTurn\",\r\n      \"dealRiver\",\r\n      \"handResult\",\r\n      \"newHand\",\r\n      \"gameEnded\",\r\n      \"gameError\",\r\n      \"playerConnectionChange\",\r\n      \"creatorChanged\",\r\n      \"becameCreator\",\r\n      \"playerRemoved\",\r\n    ];\r\n\r\n    // Register listeners for each event\r\n    events.forEach((event) => {\r\n      // Remove any existing listeners to prevent duplicates\r\n      this.gameSocket.off(event);\r\n\r\n      // Add new listener that will emit to our own events system\r\n      this.gameSocket.on(event, (data) => {\r\n        this.emit(event, data);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Disconnect from socket\r\n   */\r\n  disconnect() {\r\n    if (this.gameSocket) {\r\n      this.gameSocket.disconnect();\r\n      this.gameSocket = null;\r\n    }\r\n\r\n    this.isConnected = false;\r\n    this.connectionPromise = null;\r\n    this.connectionAttempts = 0;\r\n  }\r\n\r\n  /**\r\n   * Register an event listener\r\n   * @param {string} event - Event name\r\n   * @param {Function} callback - Event callback\r\n   */\r\n  on(event, callback) {\r\n    if (!this.events[event]) {\r\n      this.events[event] = [];\r\n    }\r\n    this.events[event].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener\r\n   * @param {string} event - Event name\r\n   * @param {Function} callback - Event callback to remove\r\n   */\r\n  off(event, callback) {\r\n    if (!this.events[event]) return;\r\n    this.events[event] = this.events[event].filter((cb) => cb !== callback);\r\n  }\r\n\r\n  /**\r\n   * Emit an event\r\n   * @param {string} event - Event name\r\n   * @param {any} data - Event data\r\n   */\r\n  emit(event, data) {\r\n    if (!this.events[event]) return;\r\n    this.events[event].forEach((callback) => callback(data));\r\n  }\r\n\r\n  /**\r\n   * Get connection status\r\n   * @returns {boolean} Connection status\r\n   */\r\n  isSocketConnected() {\r\n    return this.isConnected && this.gameSocket && this.gameSocket.connected;\r\n  }\r\n\r\n  /**\r\n   * Debug information about socket state\r\n   */\r\n  debug() {\r\n    console.group(\"Socket Debug Info\");\r\n    console.log(\"Is Connected:\", this.isConnected);\r\n    console.log(\"Socket ID:\", this.gameSocket?.id || \"none\");\r\n    console.log(\"Socket Connected:\", this.gameSocket?.connected || false);\r\n    console.log(\"Connection Attempts:\", this.connectionAttempts);\r\n\r\n    // List all event listeners\r\n    console.log(\"Registered Event Handlers:\");\r\n    const events = Object.keys(this.events);\r\n    events.forEach((event) => {\r\n      console.log(`- ${event}: ${this.events[event].length} handlers`);\r\n    });\r\n    console.groupEnd();\r\n\r\n    return {\r\n      connected: this.isConnected,\r\n      socketId: this.gameSocket?.id,\r\n      handlers: events.length,\r\n    };\r\n  }\r\n\r\n  async joinGameWithRetry(gameId, userId, username, maxRetries = 3) {\r\n    let retries = 0;\r\n\r\n    while (retries < maxRetries) {\r\n      try {\r\n        console.log(`Attempt ${retries + 1} to join game ${gameId}`);\r\n\r\n        // Make sure we're connected\r\n        if (!this.isConnected || !this.gameSocket) {\r\n          await this.init();\r\n        }\r\n\r\n        // Join the game room\r\n        await this.joinGame(gameId, userId, username);\r\n\r\n        console.log(\r\n          `Successfully joined game ${gameId} on attempt ${retries + 1}`\r\n        );\r\n\r\n        // Request immediate game update to ensure current state\r\n        this.requestGameUpdate(gameId, userId);\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error(`Join game attempt ${retries + 1} failed:`, error);\r\n        retries++;\r\n\r\n        if (retries >= maxRetries) {\r\n          console.error(`Failed to join game after ${maxRetries} attempts`);\r\n          throw error;\r\n        }\r\n\r\n        // Wait before retry\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add this method to ensure reliable game updates\r\n  ensureGameUpdate(gameId, userId, intervalMs = 5000, duration = 20000) {\r\n    console.log(`Setting up game update polling for game ${gameId}`);\r\n\r\n    // Request initial update if enough time has passed since last update\r\n    const now = Date.now();\r\n    const lastUpdate = lastUpdateTime[gameId] || 0;\r\n\r\n    if (now - lastUpdate > 2000) {\r\n      this.requestGameUpdate(gameId, userId);\r\n      lastUpdateTime[gameId] = now;\r\n    } else {\r\n      console.log(\"Skipping immediate update due to recent request\");\r\n    }\r\n\r\n    // Set up interval for periodic updates with throttling\r\n    const intervalId = setInterval(() => {\r\n      if (!this.isConnected) return;\r\n\r\n      const currentTime = Date.now();\r\n      const lastUpdate = lastUpdateTime[gameId] || 0;\r\n\r\n      // Only request update if enough time has passed\r\n      if (currentTime - lastUpdate > 2000) {\r\n        this.requestGameUpdate(gameId, userId);\r\n        lastUpdateTime[gameId] = currentTime;\r\n      }\r\n    }, intervalMs);\r\n\r\n    // Clear interval after duration\r\n    setTimeout(() => {\r\n      clearInterval(intervalId);\r\n      console.log(\"Stopped game update polling\");\r\n    }, duration);\r\n\r\n    return intervalId;\r\n  }\r\n  /**\r\n   * Set player ready status\r\n   * @param {string} gameId - Game ID\r\n   * @param {string} userId - User ID\r\n   * @param {boolean} isReady - Ready status\r\n   */\r\n  setPlayerReady(gameId, userId, isReady) {\r\n    if (!this.gameSocket || !this.isConnected) {\r\n      console.warn(\"Cannot set player status: socket not connected\");\r\n      return;\r\n    }\r\n\r\n    if (!gameId || !userId) {\r\n      console.warn(\"Cannot set player status: missing required parameters\");\r\n      return;\r\n    }\r\n\r\n    console.log(\r\n      `Setting player ${userId} ready status to ${isReady} for game ${gameId}`\r\n    );\r\n\r\n    this.gameSocket.emit(\"playerReady\", {\r\n      gameId,\r\n      userId,\r\n      isReady,\r\n    });\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport default new SocketService();\r\n","<!-- client/src/views/Lobby.vue -->\r\n<template>\r\n  <div class=\"container\">\r\n    <div class=\"lobby\">\r\n      <h2>Game Lobby</h2>\r\n\r\n      <div v-if=\"errorMessage\" class=\"error-message\">\r\n        {{ errorMessage }}\r\n        <button @click=\"clearErrorMessage\" class=\"close-error\">×</button>\r\n      </div>\r\n\r\n      <div v-if=\"statusMessage\" class=\"status-message\">\r\n        {{ statusMessage }}\r\n      </div>\r\n\r\n      <div class=\"user-info card\">\r\n        <h3>Welcome, {{ currentUser ? currentUser.username : 'Player' }}</h3>\r\n        <p>Balance: {{ currentUser ? currentUser.balance : 0 }} chips ({{ formatRupiah(currentUser ? currentUser.balance\r\n          * 500 : 0) }})</p>\r\n      </div>\r\n\r\n      <div class=\"lobby-actions\">\r\n        <div class=\"card\">\r\n          <h3>Create New Game</h3>\r\n          <p>Start a new poker table and invite other players</p>\r\n          <button @click=\"handleCreateGame\" class=\"btn\" :disabled=\"isCreating || isJoining\">\r\n            {{ isCreating ? 'Creating...' : 'Create Game' }}\r\n          </button>\r\n        </div>\r\n\r\n        <!-- <div class=\"card\">\r\n          <h3>Create New Game</h3>\r\n          <p>Start a new poker table and invite other players</p>\r\n          <button @click=\"handleCreateGame\" class=\"btn\" :disabled=\"isCreating || isJoining\">\r\n            {{ isCreating ? 'Creating...' : 'Create Game' }}\r\n          </button>\r\n\r\n          <button v-if=\"showFallbackOptions\" @click=\"createGameDirectly\" class=\"btn btn-secondary fallback-btn\">\r\n            Create Game (Fallback)\r\n          </button>\r\n        </div> -->\r\n\r\n        <!-- <div v-if=\"showFallbackOptions\" class=\"debug-section\">\r\n          <h4>Troubleshooting</h4>\r\n          <button @click=\"testApiConnection\" class=\"debug-btn\">\r\n            Test API Connection\r\n          </button>\r\n          <div v-if=\"apiTestResult\" class=\"api-test-result\">\r\n            <pre>{{ apiTestResult }}</pre>\r\n          </div>\r\n        </div> -->\r\n\r\n        <div class=\"card\">\r\n          <h3>Join Existing Game</h3>\r\n          <p>Enter a 6-character game ID to join</p>\r\n          <div class=\"form-group\">\r\n            <input type=\"text\" v-model=\"gameIdInput\" placeholder=\"Enter Game ID\" maxlength=\"6\" class=\"form-control\"\r\n              :disabled=\"isCreating || isJoining\" />\r\n          </div>\r\n          <button @click=\"handleJoinGame\" class=\"btn\"\r\n            :disabled=\"(gameIdInput ? gameIdInput.length !== 6 : true) || isCreating || isJoining\">\r\n            {{ isJoining ? 'Joining...' : 'Join Game' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"lobby-footer\">\r\n        <button @click=\"logout\" class=\"btn btn-secondary\" :disabled=\"isCreating || isJoining\">Logout</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\nimport SocketService from '../services/SocketService';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'Lobby',\r\n\r\n  data() {\r\n    return {\r\n      gameIdInput: '',\r\n      isCreating: false,\r\n      isJoining: false,\r\n      statusMessage: '',\r\n      connectionAttempts: 0,\r\n      maxConnectionAttempts: 2,\r\n      operationTimeout: null,\r\n      showFallbackOptions: process.env.NODE_ENV === 'development',\r\n      apiTestResult: null\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters(['currentUser', 'errorMessage']),\r\n\r\n    isValidGameId() {\r\n      return this.gameIdInput.length === 6 && /^[0-9a-f]{6}$/.test(this.gameIdInput);\r\n    }\r\n  },\r\n\r\n  created() {\r\n    // Clear any error messages\r\n    this.clearErrorMessage();\r\n  },\r\n\r\n  async mounted() {\r\n    // Check if we have a token but no user data\r\n    if (!this.currentUser && localStorage.getItem('token')) {\r\n      console.log('No user data in Lobby, attempting to fetch from server');\r\n      this.statusMessage = 'Loading user data...';\r\n\r\n      try {\r\n        // Dispatch the action to fetch user data\r\n        await this.$store.dispatch('fetchUserData');\r\n        console.log('User data loaded in Lobby:', this.currentUser);\r\n      } catch (error) {\r\n        console.error('Error fetching user data in Lobby:', error);\r\n        this.SET_ERROR_MESSAGE('Failed to load user data. Please log in again.');\r\n      } finally {\r\n        this.statusMessage = '';\r\n      }\r\n    } else {\r\n      console.log('Current user in Lobby:', this.currentUser);\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['createGame', 'joinGame', 'clearErrorMessage', 'logout']),\r\n    ...mapMutations(['SET_ERROR_MESSAGE']),\r\n\r\n    formatRupiah(amount) {\r\n      return new Intl.NumberFormat('id-ID', {\r\n        style: 'currency',\r\n        currency: 'IDR',\r\n        minimumFractionDigits: 0\r\n      }).format(amount);\r\n    },\r\n\r\n    async initSocketConnection() {\r\n      try {\r\n        await SocketService.init();\r\n        this.statusMessage = '';\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Socket initialization error:', error);\r\n        return false;\r\n      }\r\n    },\r\n\r\n    setOperationTimeout(operation, timeoutMs = 15000) {\r\n      // Clear any existing timeout\r\n      if (this.operationTimeout) {\r\n        clearTimeout(this.operationTimeout);\r\n      }\r\n\r\n      // Set new timeout\r\n      this.operationTimeout = setTimeout(() => {\r\n        this.isCreating = false;\r\n        this.isJoining = false;\r\n        this.SET_ERROR_MESSAGE(`${operation} operation timed out. Please try again.`);\r\n      }, timeoutMs);\r\n    },\r\n\r\n    clearOperationTimeout() {\r\n      if (this.operationTimeout) {\r\n        clearTimeout(this.operationTimeout);\r\n        this.operationTimeout = null;\r\n      }\r\n    },\r\n\r\n    async handleCreateGame() {\r\n      // Safety check - ensure we have user data\r\n      if (!this.currentUser) {\r\n        console.error('Cannot create game: No user data available');\r\n        this.SET_ERROR_MESSAGE('Your session appears to be invalid. Please log out and log in again.');\r\n        return;\r\n      }\r\n\r\n      this.isCreating = true;\r\n      this.statusMessage = 'Creating new game...';\r\n      this.clearErrorMessage();\r\n\r\n      try {\r\n        console.log('Creating game with user:', this.currentUser);\r\n\r\n        // Make a direct axios call instead of using the store action\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          throw new Error('No authentication token found');\r\n        }\r\n\r\n        const response = await axios.post('/api/games', {\r\n          creatorId: this.currentUser.id,\r\n          creatorName: this.currentUser.username\r\n        }, {\r\n          headers: {\r\n            'x-auth-token': token\r\n          },\r\n          timeout: 10000 // 10 second timeout\r\n        });\r\n\r\n        console.log('Game creation response:', response.data);\r\n\r\n        if (response.data && response.data.gameId) {\r\n          const gameId = response.data.gameId;\r\n          console.log('Game created successfully with ID:', gameId);\r\n\r\n          this.statusMessage = 'Game created! Redirecting...';\r\n\r\n          // Force update Vuex state\r\n          this.$store.commit('SET_CURRENT_GAME_ID', gameId);\r\n\r\n          // Add a small delay before navigation\r\n          setTimeout(() => {\r\n            // Use direct window.location for more reliable navigation\r\n            window.location.href = `/game/${gameId}`;\r\n          }, 500);\r\n        } else {\r\n          throw new Error('Invalid response from server (no game ID)');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error creating game:', error);\r\n\r\n        let errorMsg = 'Error creating game. Please try again.';\r\n\r\n        if (error.response) {\r\n          console.error('Server response:', error.response.data);\r\n          errorMsg = error.response.data.msg || `Server error: ${error.response.status}`;\r\n        } else if (error.request) {\r\n          errorMsg = 'No response from server. Check your network connection.';\r\n        } else {\r\n          errorMsg = error.message || errorMsg;\r\n        }\r\n\r\n        this.SET_ERROR_MESSAGE(errorMsg);\r\n        this.statusMessage = '';\r\n        this.isCreating = false;\r\n      }\r\n    },\r\n\r\n    async handleJoinGame() {\r\n      if (!this.isValidGameId) return;\r\n\r\n      // Safety check - ensure we have user data\r\n      if (!this.currentUser) {\r\n        console.error('Cannot join game: No user data available');\r\n        this.SET_ERROR_MESSAGE('Your session appears to be invalid. Please log out and log in again.');\r\n        return;\r\n      }\r\n\r\n      // Use the direct join function\r\n      await this.directJoinGame(this.gameIdInput);\r\n    },\r\n\r\n    async directJoinGame(gameId) {\r\n      if (!gameId) {\r\n        this.SET_ERROR_MESSAGE('Game ID is required');\r\n        return;\r\n      }\r\n\r\n      this.isJoining = true;\r\n      this.statusMessage = 'Joining game...';\r\n\r\n      try {\r\n        console.log(`Directly joining game ${gameId}`);\r\n\r\n        // Get auth token\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          throw new Error('No authentication token found');\r\n        }\r\n\r\n        // Join the game via API\r\n        const response = await axios.post(`/api/games/join/${gameId}`, {\r\n          playerId: this.currentUser.id,\r\n          playerName: this.currentUser.username\r\n        }, {\r\n          headers: {\r\n            'x-auth-token': token\r\n          },\r\n          timeout: 5000\r\n        });\r\n\r\n        console.log('Join game response:', response.data);\r\n\r\n        // Set game ID in store\r\n        this.$store.commit('SET_CURRENT_GAME_ID', gameId);\r\n\r\n        // Navigate to game page\r\n        this.statusMessage = 'Joined! Redirecting...';\r\n\r\n        // Use window.location for direct navigation\r\n        window.location.href = `/game/${gameId}`;\r\n      } catch (error) {\r\n        console.error('Error joining game:', error);\r\n\r\n        let errorMsg = 'Error joining game. Please try again.';\r\n\r\n        if (error.response) {\r\n          console.error('Server response:', error.response.data);\r\n          errorMsg = error.response.data.msg || `Server error: ${error.response.status}`;\r\n        } else if (error.request) {\r\n          errorMsg = 'No response from server. Check your network connection.';\r\n        } else {\r\n          errorMsg = error.message || errorMsg;\r\n        }\r\n\r\n        this.SET_ERROR_MESSAGE(errorMsg);\r\n      } finally {\r\n        this.statusMessage = '';\r\n        this.isJoining = false;\r\n      }\r\n    },\r\n\r\n    async createGameDirectly() {\r\n      // Safety check - ensure we have user data\r\n      if (!this.currentUser) {\r\n        console.error('Cannot create game directly: No user data available');\r\n        this.SET_ERROR_MESSAGE('Your session appears to be invalid. Please log out and log in again.');\r\n        return;\r\n      }\r\n\r\n      this.isCreating = true;\r\n      this.clearErrorMessage();\r\n\r\n      try {\r\n        // Make the API call with axios directly\r\n        const token = localStorage.getItem('token');\r\n\r\n        if (!token) {\r\n          throw new Error('No authentication token found');\r\n        }\r\n\r\n        const response = await axios.post('/api/games', {\r\n          creatorId: this.currentUser.id,\r\n          creatorName: this.currentUser.username\r\n        }, {\r\n          headers: {\r\n            'x-auth-token': token,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n\r\n        console.log('Direct API response:', response.data);\r\n\r\n        if (response.data && response.data.gameId) {\r\n          this.$router.push(`/game/${response.data.gameId}`);\r\n        } else {\r\n          throw new Error('Invalid server response');\r\n        }\r\n      } catch (error) {\r\n        console.error('Direct API call error:', error);\r\n\r\n        if (error.response) {\r\n          console.error('Response data:', error.response.data);\r\n          console.error('Status:', error.response.status);\r\n          this.SET_ERROR_MESSAGE(error.response.data.msg || `Error ${error.response.status}`);\r\n        } else if (error.request) {\r\n          this.SET_ERROR_MESSAGE('No response from server. Check your connection.');\r\n        } else {\r\n          this.SET_ERROR_MESSAGE(error.message || 'Error creating game');\r\n        }\r\n      } finally {\r\n        this.isCreating = false;\r\n      }\r\n    },\r\n\r\n    async testApiConnection() {\r\n      this.apiTestResult = 'Testing API connection...';\r\n\r\n      try {\r\n        // Test basic API connection\r\n        const baseResponse = await axios.get('/api', { timeout: 5000 });\r\n        this.apiTestResult = `API base endpoint: ${baseResponse.status} OK\\n`;\r\n\r\n        // Test authentication\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          this.apiTestResult += 'No auth token found!\\n';\r\n          return;\r\n        }\r\n\r\n        try {\r\n          const authResponse = await axios.get('/api/auth/user', {\r\n            headers: { 'x-auth-token': token },\r\n            timeout: 5000\r\n          });\r\n\r\n          this.apiTestResult += `Auth test: ${authResponse.status} OK\\n`;\r\n          this.apiTestResult += `User data: ${JSON.stringify(authResponse.data, null, 2)}\\n`;\r\n        } catch (authError) {\r\n          this.apiTestResult += `Auth test failed: ${authError.message}\\n`;\r\n          if (authError.response) {\r\n            this.apiTestResult += `Status: ${authError.response.status}\\n`;\r\n            this.apiTestResult += `Response: ${JSON.stringify(authError.response.data, null, 2)}\\n`;\r\n          }\r\n        }\r\n\r\n        // Test games endpoint\r\n        try {\r\n          const gamesResponse = await axios.get('/api/games', {\r\n            headers: { 'x-auth-token': token },\r\n            timeout: 5000\r\n          });\r\n\r\n          this.apiTestResult += `Games list test: ${gamesResponse.status} OK\\n`;\r\n          this.apiTestResult += `Games count: ${gamesResponse.data.length}\\n`;\r\n        } catch (gamesError) {\r\n          this.apiTestResult += `Games list test failed: ${gamesError.message}\\n`;\r\n          if (gamesError.response) {\r\n            this.apiTestResult += `Status: ${gamesError.response.status}\\n`;\r\n            this.apiTestResult += `Response: ${JSON.stringify(gamesError.response.data, null, 2)}\\n`;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        this.apiTestResult = `API test failed: ${error.message}`;\r\n        console.error('API test error:', error);\r\n      }\r\n    },\r\n\r\n    beforeDestroy() {\r\n      this.clearErrorMessage();\r\n      this.clearOperationTimeout();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.lobby {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  color: #3f8c6e;\r\n}\r\n\r\n.error-message {\r\n  background-color: #e74c3c;\r\n  color: white;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 15px;\r\n  position: relative;\r\n}\r\n\r\n.close-error {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n}\r\n\r\n.status-message {\r\n  background-color: #3498db;\r\n  color: white;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 15px;\r\n  text-align: center;\r\n}\r\n\r\n.user-info {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.user-info h3 {\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.lobby-actions {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .lobby-actions {\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\n.lobby-actions .card {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.lobby-actions h3 {\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n  color: #3f8c6e;\r\n}\r\n\r\n.lobby-actions p {\r\n  margin-bottom: 15px;\r\n  flex-grow: 1;\r\n}\r\n\r\n.lobby-actions button {\r\n  width: 100%;\r\n}\r\n\r\n.lobby-footer {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.fallback-btn {\r\n  margin-top: 10px;\r\n  background-color: #666;\r\n  font-size: 12px;\r\n}\r\n\r\n.debug-section {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #2a2a2a;\r\n  border-radius: 8px;\r\n  text-align: left;\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Lobby.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Lobby.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Lobby.vue?vue&type=template&id=5559e34d&scoped=true\"\nimport script from \"./Lobby.vue?vue&type=script&lang=js\"\nexport * from \"./Lobby.vue?vue&type=script&lang=js\"\nimport style0 from \"./Lobby.vue?vue&type=style&index=0&id=5559e34d&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5559e34d\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"game-container\"},[_c('GameHeader',{attrs:{\"gameId\":_vm.gameId,\"currentGame\":_vm.currentGame},on:{\"copyGameId\":_vm.copyGameId,\"leaveGame\":_vm.leaveGame}}),(_vm.errorMessage)?_c('div',{staticClass:\"error-message\"},[_vm._v(\" \"+_vm._s(_vm.errorMessage)+\" \")]):_vm._e(),(!_vm.currentGame)?_c('div',{staticClass:\"loading\"},[_vm._v(\" Loading game... \")]):_c('div',{staticClass:\"game-area\"},[_c('div',{staticClass:\"game-status-wrapper\"},[_c('GameStatus',{key:_vm.currentGame ? _vm.currentGame.status + '-' + _vm.gameInitialized : 'loading',attrs:{\"currentGame\":_vm.currentGame,\"currentUser\":_vm.currentUser,\"gameId\":_vm.gameId,\"isCreator\":_vm.isCreator,\"isStarting\":_vm.isStarting,\"gameInitialized\":_vm.gameInitialized},on:{\"startGame\":_vm.handleStartGame,\"getCurrentPlayerName\":_vm.getCurrentPlayerName,\"requestInitialization\":_vm.requestInitialization,\"requestStateUpdate\":_vm.requestStateUpdate,\"addToLog\":_vm.addToLog}})],1),_c('div',{staticClass:\"game-table\"},[_c('CommunityCards',{attrs:{\"communityCards\":_vm.currentGame.communityCards,\"formatCard\":_vm.formatCard}}),_c('PlayerList',{ref:\"playerList\",attrs:{\"players\":_vm.currentGame.players,\"currentUser\":_vm.currentUser,\"currentTurn\":_vm.currentGame.currentTurn,\"playerHand\":_vm.playerHand,\"formatCard\":_vm.formatCard}}),(_vm.isYourTurn || _vm.shouldShowActions())?_c('PlayerActions',{attrs:{\"availableActions\":_vm.availableActions,\"currentGame\":_vm.currentGame,\"betAmount\":_vm.betAmount,\"raiseAmount\":_vm.raiseAmount,\"isYourTurn\":_vm.isYourTurn},on:{\"updateBetAmount\":function($event){_vm.betAmount = $event},\"updateRaiseAmount\":function($event){_vm.raiseAmount = $event},\"handleAction\":_vm.handleAction,\"endTurn\":_vm.endTurn,\"getPlayerChipsInPot\":_vm.getPlayerChipsInPot,\"getCurrentPlayer\":_vm.getCurrentPlayer}}):_vm._e(),(_vm.isYourTurn)?_c('ActionTimer',{attrs:{\"initialTime\":_vm.actionTimeLimit,\"isActive\":_vm.isYourTurn,\"currentGame\":_vm.currentGame},on:{\"timerComplete\":_vm.handleTimerComplete}}):_vm._e(),_c('WinnerDisplay',{attrs:{\"winners\":_vm.handWinners,\"allPlayers\":_vm.allPlayersCards,\"communityCards\":_vm.communityCards,\"pot\":_vm.winningPot,\"visible\":_vm.showWinnerDisplay,\"formatCard\":_vm.formatCard,\"currentGame\":_vm.currentGame,\"currentUser\":_vm.currentUser,\"gameId\":_vm.gameId,\"isCreator\":_vm.isCreator,\"isFoldWin\":_vm.isFoldWin,\"previousPlayerHand\":_vm.previousPlayerHand},on:{\"close\":_vm.handleWinnerDisplayClose,\"addToLog\":_vm.addToLog,\"startNextHand\":_vm.startNextHand}})],1),_c('GameLog',{attrs:{\"gameLog\":_vm.gameLog}}),_c('GameChat',{attrs:{\"gameId\":_vm.gameId,\"currentUser\":_vm.currentUser}})],1),_c('button',{staticClass:\"debug-toggle\",on:{\"click\":function($event){_vm.showDebugPanel = !_vm.showDebugPanel}}},[_vm._v(\" \"+_vm._s(_vm.showDebugPanel ? 'Hide Debug' : 'Show Debug')+\" \")]),_c('GameDebugPanel',{attrs:{\"enabled\":_vm.showDebugPanel,\"gameId\":_vm.gameId,\"currentGame\":_vm.currentGame,\"currentUser\":_vm.currentUser,\"isCreator\":_vm.isCreator,\"isConnected\":_vm.isConnected},on:{\"close\":function($event){_vm.showDebugPanel = false},\"log\":_vm.addToLog,\"forceStart\":_vm.forceStartGame}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"game-header\"},[_c('h2',[_vm._v(\"Nyanguni Kancane - Game #\"+_vm._s(_vm.gameId))]),_c('div',{staticClass:\"game-info\"},[_c('span',[_vm._v(\"Pot: \"+_vm._s(_vm.currentGame ? _vm.currentGame.pot : 0)+\" chips\")]),_c('button',{staticClass:\"btn-secondary btn-sm\",on:{\"click\":function($event){return _vm.$emit('copyGameId')}}},[_vm._v(\" Share Game ID \")]),_c('button',{staticClass:\"btn-danger btn-sm\",on:{\"click\":function($event){return _vm.$emit('leaveGame')}}},[_vm._v(\" Leave Game \")])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/Game/GameHeader.vue -->\r\n<template>\r\n    <div class=\"game-header\">\r\n      <h2>Nyanguni Kancane - Game #{{ gameId }}</h2>\r\n      <div class=\"game-info\">\r\n        <span>Pot: {{ currentGame ? currentGame.pot : 0 }} chips</span>\r\n        <button @click=\"$emit('copyGameId')\" class=\"btn-secondary btn-sm\">\r\n          Share Game ID\r\n        </button>\r\n        <button @click=\"$emit('leaveGame')\" class=\"btn-danger btn-sm\">\r\n          Leave Game\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'GameHeader',\r\n    \r\n    props: {\r\n      gameId: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      currentGame: {\r\n        type: Object,\r\n        default: null\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .game-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .game-header h2 {\r\n    margin: 0;\r\n    color: #3f8c6e;\r\n  }\r\n  \r\n  .game-info {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .btn-sm {\r\n    padding: 5px 10px;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .btn-secondary {\r\n    background-color: #555;\r\n  }\r\n  \r\n  .btn-secondary:hover {\r\n    background-color: #444;\r\n  }\r\n  \r\n  .btn-danger {\r\n    background-color: #e74c3c;\r\n  }\r\n  \r\n  .btn-danger:hover {\r\n    background-color: #c0392b;\r\n  }\r\n  </style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameHeader.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameHeader.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./GameHeader.vue?vue&type=template&id=fa9af8ac&scoped=true\"\nimport script from \"./GameHeader.vue?vue&type=script&lang=js\"\nexport * from \"./GameHeader.vue?vue&type=script&lang=js\"\nimport style0 from \"./GameHeader.vue?vue&type=style&index=0&id=fa9af8ac&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"fa9af8ac\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"game-status\"},[(_vm.isObserver)?_c('div',{staticClass:\"observer-message\"},[_c('p',[_vm._v(_vm._s(_vm.observerMessage || 'You are currently observing this game.'))]),(_vm.currentGame && _vm.currentGame.status === 'waiting')?_c('button',{staticClass:\"join-btn\",on:{\"click\":_vm.joinGame}},[_vm._v(\" Join Game \")]):_vm._e()]):_vm._e(),(_vm.currentGame.status === 'waiting')?_c('div',{staticClass:\"waiting-status\"},[_c('p',[_vm._v(\"Waiting for players to join...\")]),_c('p',[_vm._v(\"Game ID: \"),_c('strong',[_vm._v(_vm._s(_vm.gameId))])]),_c('p',[_vm._v(\"Players: \"+_vm._s(_vm.currentGame.players.length)+\"/8\")]),_c('PlayerReadyComponent',{attrs:{\"currentGame\":_vm.currentGame,\"currentUser\":_vm.currentUser,\"gameId\":_vm.gameId,\"isCreator\":_vm.isCreator},on:{\"addToLog\":_vm.addToLog,\"playersReady\":_vm.onPlayersReady}}),(_vm.isCreator)?_c('div',{staticClass:\"creator-info\"},[_c('div',{staticClass:\"creator-badge\"},[_vm._v(\" You are the game creator \")]),_c('div',{staticClass:\"player-count-info\"},[(_vm.currentGame.players.length >= 2)?_c('p',{staticClass:\"ready-message\"},[(_vm.enoughPlayersReady)?_c('span',[_vm._v(\"✅ Enough players are ready to start the game!\")]):_c('span',[_vm._v(\"⏳ Waiting for players to mark themselves as ready...\")])]):_c('p',{staticClass:\"waiting-message\"},[_vm._v(\" ⏳ Waiting for more players to join (need at least 2) \")])]),(_vm.currentGame.players.length >= 2)?_c('div',{staticClass:\"start-game-container\"},[_c('button',{staticClass:\"start-btn\",attrs:{\"disabled\":_vm.isStarting || !_vm.enoughPlayersReady},on:{\"click\":_vm.startGame}},[_vm._v(\" \"+_vm._s(_vm.isStarting ? 'Starting...' : 'START GAME')+\" \")])]):_c('div',{staticClass:\"start-game-container\"},[_c('button',{staticClass:\"start-btn disabled\",attrs:{\"disabled\":\"\"}},[_vm._v(\" Need More Players \")])])]):_c('div',{staticClass:\"waiting-message\"},[_c('p',[_vm._v(\"Waiting for game creator to start the game...\")])])],1):(_vm.currentGame.status === 'active')?_c('div',{staticClass:\"active-status\"},[_c('p',[_vm._v(\"Game in progress\")]),_c('div',{staticClass:\"game-info\"},[_c('div',{staticClass:\"info-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Current turn:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.getCurrentPlayerName()))])]),_c('div',{staticClass:\"info-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Current bet:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.currentGame.currentBet)+\" chips\")])]),_c('div',{staticClass:\"info-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Betting round:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.formatBettingRound(_vm.currentGame.bettingRound)))])])]),(_vm.isCreator && !_vm.gameInitialized)?_c('div',{staticClass:\"initialization-message\"},[_c('p',[_vm._v(\"Game is active but not fully initialized.\")]),_c('button',{staticClass:\"initialize-btn\",on:{\"click\":_vm.requestInitialization}},[_vm._v(\" Initialize Game \")])]):_vm._e()]):(_vm.currentGame.status === 'completed')?_c('div',{staticClass:\"completed-status\"},[_c('p',[_vm._v(_vm._s(_vm.getCompletionMessage()))]),(_vm.hasZeroBalance())?_c('div',[_c('p',{staticClass:\"error-message\"},[_vm._v(\"You don't have enough chips to continue!\")]),_c('button',{staticClass:\"btn\",on:{\"click\":_vm.returnToLobby}},[_vm._v(\" Return to Lobby \")])]):(_vm.isObserver)?_c('div',[_c('p',[_vm._v(\"You can continue watching or return to the lobby.\")]),_c('button',{staticClass:\"btn\",on:{\"click\":_vm.returnToLobby}},[_vm._v(\" Return to Lobby \")])]):_c('div',[_c('p',[_vm._v(\"Waiting for the game to start again...\")]),_c('p',{staticClass:\"status-message\"},[_vm._v(\"Players without chips have been removed.\")]),_c('div',{staticClass:\"ready-status-container\"},[_c('button',{staticClass:\"ready-btn\",class:{ 'ready-confirm': _vm.isCurrentPlayerReady },on:{\"click\":_vm.toggleReady}},[_vm._v(\" \"+_vm._s(_vm.isCurrentPlayerReady ? 'I\\'m Ready ✓' : 'Mark as Ready')+\" \")])])])]):_c('div',{staticClass:\"completed-status\"},[_c('p',[_vm._v(\"Game completed\")]),_c('button',{staticClass:\"btn\",on:{\"click\":_vm.returnToLobby}},[_vm._v(\" Return to Lobby \")])]),(_vm.isDevelopment)?_c('div',{staticClass:\"debug-section\"},[_c('button',{staticClass:\"debug-toggle\",on:{\"click\":function($event){_vm.debugVisible = !_vm.debugVisible}}},[_vm._v(\" \"+_vm._s(_vm.debugVisible ? 'Hide Debug Info' : 'Show Debug Info')+\" \")]),(_vm.debugVisible)?_c('div',{staticClass:\"debug-details\"},[_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"debug-label\"},[_vm._v(\"Creator:\")]),_c('span',{staticClass:\"debug-value\"},[_vm._v(_vm._s(_vm.getCreatorUsername()))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"debug-label\"},[_vm._v(\"Is Creator:\")]),_c('span',{staticClass:\"debug-value\"},[_vm._v(_vm._s(_vm.isCreator))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"debug-label\"},[_vm._v(\"Players:\")]),_c('span',{staticClass:\"debug-value\"},[_vm._v(_vm._s(_vm.currentGame.players.length))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"debug-label\"},[_vm._v(\"Ready Players:\")]),_c('span',{staticClass:\"debug-value\"},[_vm._v(_vm._s(_vm.readyPlayersCount))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"debug-label\"},[_vm._v(\"Enough Ready:\")]),_c('span',{staticClass:\"debug-value\"},[_vm._v(_vm._s(_vm.enoughPlayersReady))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"debug-label\"},[_vm._v(\"Status:\")]),_c('span',{staticClass:\"debug-value\"},[_vm._v(_vm._s(_vm.currentGame.status))])]),_c('button',{staticClass:\"debug-btn\",on:{\"click\":_vm.forceStartGame}},[_vm._v(\"Force Start Game\")]),_c('button',{staticClass:\"debug-btn\",on:{\"click\":_vm.requestStateUpdate}},[_vm._v(\"Request Game Update\")]),_c('button',{staticClass:\"debug-btn\",on:{\"click\":_vm.checkReadyPlayers}},[_vm._v(\"Check Ready Players\")])]):_vm._e()]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"player-ready-section\"},[_c('div',{staticClass:\"ready-status-container\"},[_c('h3',[_vm._v(\"Player Readiness\")]),_c('div',{staticClass:\"ready-status-list\"},_vm._l((_vm.currentGame.players),function(player){return _c('div',{key:player.id,staticClass:\"player-ready-item\"},[_c('span',{staticClass:\"player-name\"},[_vm._v(_vm._s(player.username))]),_c('span',{staticClass:\"ready-indicator\",class:{ 'ready': player.isReady, 'not-ready': !player.isReady }},[_vm._v(\" \"+_vm._s(player.isReady ? 'Ready ✓' : 'Not Ready')+\" \")])])}),0),_c('div',{staticClass:\"ready-summary\"},[_c('p',[_vm._v(_vm._s(_vm.readySummary))])])]),(_vm.currentGame.status === 'waiting')?_c('div',{staticClass:\"current-player-controls\"},[_c('button',{staticClass:\"ready-btn\",class:{ 'ready-confirm': _vm.isCurrentPlayerReady },on:{\"click\":_vm.toggleReady}},[_vm._v(\" \"+_vm._s(_vm.isCurrentPlayerReady ? 'I\\'m Ready ✓' : 'Mark as Ready')+\" \")])]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/Game/PlayerReadyComponent.vue -->\r\n<template>\r\n  <div class=\"player-ready-section\">\r\n    <!-- Ready status indicators for all players -->\r\n    <div class=\"ready-status-container\">\r\n      <h3>Player Readiness</h3>\r\n      <div class=\"ready-status-list\">\r\n        <div v-for=\"player in currentGame.players\" :key=\"player.id\" class=\"player-ready-item\">\r\n          <span class=\"player-name\">{{ player.username }}</span>\r\n          <span class=\"ready-indicator\" :class=\"{ 'ready': player.isReady, 'not-ready': !player.isReady }\">\r\n            {{ player.isReady ? 'Ready ✓' : 'Not Ready' }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"ready-summary\">\r\n        <p>{{ readySummary }}</p>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Current player's ready button (only show if game hasn't started) -->\r\n    <div v-if=\"currentGame.status === 'waiting'\" class=\"current-player-controls\">\r\n      <button \r\n        @click=\"toggleReady\" \r\n        class=\"ready-btn\" \r\n        :class=\"{ 'ready-confirm': isCurrentPlayerReady }\"\r\n      >\r\n        {{ isCurrentPlayerReady ? 'I\\'m Ready ✓' : 'Mark as Ready' }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SocketService from '@/services/SocketService';\r\n\r\nexport default {\r\n  name: 'PlayerReadyComponent',\r\n  \r\n  props: {\r\n    currentGame: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    gameId: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    isCreator: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  \r\n  computed: {\r\n    /**\r\n     * Check if the current player is marked as ready\r\n     */\r\n    isCurrentPlayerReady() {\r\n      if (!this.currentUser || !this.currentGame || !this.currentGame.players) {\r\n        return false;\r\n      }\r\n      \r\n      const currentPlayer = this.currentGame.players.find(\r\n        p => p.id === this.currentUser.id\r\n      );\r\n      \r\n      return currentPlayer ? currentPlayer.isReady : false;\r\n    },\r\n    \r\n    /**\r\n     * Get a summary of player readiness\r\n     */\r\n    readySummary() {\r\n      if (!this.currentGame || !this.currentGame.players) {\r\n        return 'Waiting for players...';\r\n      }\r\n      \r\n      const readyCount = this.currentGame.players.filter(p => p.isReady).length;\r\n      const totalPlayers = this.currentGame.players.length;\r\n      \r\n      if (readyCount === 0) {\r\n        return 'No players are ready yet';\r\n      } else if (readyCount === totalPlayers && totalPlayers >= 2) {\r\n        return 'All players are ready!';\r\n      } else {\r\n        return `${readyCount} of ${totalPlayers} players ready`;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Check if enough players are ready to start the game\r\n     */\r\n    areEnoughPlayersReady() {\r\n      if (!this.currentGame || !this.currentGame.players) {\r\n        return false;\r\n      }\r\n      \r\n      const readyPlayers = this.currentGame.players.filter(p => p.isReady);\r\n      return readyPlayers.length >= 2;\r\n    }\r\n  },\r\n  \r\n  watch: {\r\n    // Watch for changes in the currentGame prop to update readiness status\r\n    currentGame: {\r\n      handler() {\r\n        this.checkReadyStatus();\r\n      },\r\n      deep: true\r\n    },\r\n    \r\n    // Specifically watch the computed property\r\n    areEnoughPlayersReady: {\r\n      handler(newValue) {\r\n        console.log(\"Enough players ready changed:\", newValue);\r\n        this.$emit('playersReady', newValue);\r\n      }\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    // Listen for player ready updates\r\n    SocketService.on('playerReadyUpdate', this.handlePlayerReadyUpdate);\r\n    \r\n    // Listen for all players ready event\r\n    SocketService.on('allPlayersReady', this.handleAllPlayersReady);\r\n    \r\n    // Do initial check on mount\r\n    this.$nextTick(() => {\r\n      this.checkReadyStatus();\r\n    });\r\n  },\r\n  \r\n  beforeDestroy() {\r\n    // Clean up event listeners\r\n    SocketService.off('playerReadyUpdate', this.handlePlayerReadyUpdate);\r\n    SocketService.off('allPlayersReady', this.handleAllPlayersReady);\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * Check the status of ready players and emit events\r\n     */\r\n    checkReadyStatus() {\r\n      const readyStatus = this.areEnoughPlayersReady;\r\n      console.log(\"Checking ready status:\", readyStatus);\r\n      this.$emit('playersReady', readyStatus);\r\n      \r\n      // If all players are ready and there are at least 2, handle that\r\n      if (this.currentGame && this.currentGame.players) {\r\n        const allReady = this.currentGame.players.length >= 2 && \r\n                       this.currentGame.players.every(p => p.isReady);\r\n        \r\n        if (allReady) {\r\n          this.handleAllPlayersReady({\r\n            readyCount: this.currentGame.players.length,\r\n            totalPlayers: this.currentGame.players.length\r\n          });\r\n        }\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Toggle current player's ready status\r\n     */\r\n    toggleReady() {\r\n      if (!this.currentUser || !this.gameId) {\r\n        console.error('Cannot toggle ready: missing user or game data');\r\n        return;\r\n      }\r\n      \r\n      // Safety check for socket connection\r\n      if (!SocketService.isSocketConnected()) {\r\n        console.warn('Socket not connected, trying to reconnect...');\r\n        SocketService.init().then(() => {\r\n          this.toggleReady(); // Try again after connecting\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Send ready status update via socket\r\n      SocketService.gameSocket?.emit('playerReady', {\r\n        gameId: this.gameId,\r\n        userId: this.currentUser.id,\r\n        isReady: !this.isCurrentPlayerReady\r\n      });\r\n      \r\n      // Add to log\r\n      this.$emit('addToLog', `You marked yourself as ${!this.isCurrentPlayerReady ? 'ready' : 'not ready'}`);\r\n    },\r\n    \r\n    /**\r\n     * Handle player ready updates from server\r\n     */\r\n    handlePlayerReadyUpdate(data) {\r\n      // Log the event if it's another player\r\n      if (data.userId !== this.currentUser?.id) {\r\n        this.$emit('addToLog', `${data.username} is ${data.isReady ? 'ready' : 'not ready'}`);\r\n      }\r\n      \r\n      // Check if this update affects our readiness status\r\n      this.$nextTick(() => {\r\n        this.checkReadyStatus();\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * Handle all players ready event from server\r\n     */\r\n    handleAllPlayersReady(data) {\r\n      console.log(\"All players ready event received:\", data);\r\n      \r\n      // If creator, enable start button\r\n      if (this.isCreator) {\r\n        this.$emit('playersReady', true);\r\n      }\r\n      \r\n      // Log the event\r\n      this.$emit('addToLog', 'All players are ready! Game can start.');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.player-ready-section {\r\n  background-color: #2a2a2a;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.ready-status-container h3 {\r\n  margin-top: 0;\r\n  margin-bottom: 15px;\r\n  color: #3f8c6e;\r\n}\r\n\r\n.ready-status-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.player-ready-item {\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  border-radius: 4px;\r\n  padding: 8px 12px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: calc(50% - 5px);\r\n}\r\n\r\n.ready-indicator {\r\n  font-weight: bold;\r\n}\r\n\r\n.ready-indicator.ready {\r\n  color: #4caf50;\r\n}\r\n\r\n.ready-indicator.not-ready {\r\n  color: #f44336;\r\n}\r\n\r\n.ready-summary {\r\n  font-weight: bold;\r\n  text-align: center;\r\n  margin: 15px 0;\r\n  font-size: 16px;\r\n}\r\n\r\n.current-player-controls {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 15px;\r\n}\r\n\r\n.ready-btn {\r\n  background-color: #555;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.ready-btn.ready-confirm {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.ready-btn:hover {\r\n  background-color: #666;\r\n}\r\n\r\n.ready-btn.ready-confirm:hover {\r\n  background-color: #3d8b40;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .player-ready-item {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerReadyComponent.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerReadyComponent.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./PlayerReadyComponent.vue?vue&type=template&id=40df27a2&scoped=true\"\nimport script from \"./PlayerReadyComponent.vue?vue&type=script&lang=js\"\nexport * from \"./PlayerReadyComponent.vue?vue&type=script&lang=js\"\nimport style0 from \"./PlayerReadyComponent.vue?vue&type=style&index=0&id=40df27a2&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"40df27a2\",\n  null\n  \n)\n\nexport default component.exports","<!-- client/src/components/Game/GameStatus.vue -->\r\n<template>\r\n  <div class=\"game-status\">\r\n    <div v-if=\"isObserver\" class=\"observer-message\">\r\n      <p>{{ observerMessage || 'You are currently observing this game.' }}</p>\r\n      <button v-if=\"currentGame && currentGame.status === 'waiting'\" @click=\"joinGame\" class=\"join-btn\">\r\n        Join Game\r\n      </button>\r\n    </div>\r\n    <div v-if=\"currentGame.status === 'waiting'\" class=\"waiting-status\">\r\n      <p>Waiting for players to join...</p>\r\n      <p>Game ID: <strong>{{ gameId }}</strong></p>\r\n      <p>Players: {{ currentGame.players.length }}/8</p>\r\n\r\n      <!-- Player ready component -->\r\n      <PlayerReadyComponent :currentGame=\"currentGame\" :currentUser=\"currentUser\" :gameId=\"gameId\"\r\n        :isCreator=\"isCreator\" @addToLog=\"addToLog\" @playersReady=\"onPlayersReady\" />\r\n\r\n      <!-- Prominent game creator section -->\r\n      <div class=\"creator-info\" v-if=\"isCreator\">\r\n        <div class=\"creator-badge\">\r\n          You are the game creator\r\n        </div>\r\n\r\n        <div class=\"player-count-info\">\r\n          <p v-if=\"currentGame.players.length >= 2\" class=\"ready-message\">\r\n            <span v-if=\"enoughPlayersReady\">✅ Enough players are ready to start the game!</span>\r\n            <span v-else>⏳ Waiting for players to mark themselves as ready...</span>\r\n          </p>\r\n          <p v-else class=\"waiting-message\">\r\n            ⏳ Waiting for more players to join (need at least 2)\r\n          </p>\r\n        </div>\r\n\r\n        <div v-if=\"currentGame.players.length >= 2\" class=\"start-game-container\">\r\n          <button @click=\"startGame\" class=\"start-btn\" :disabled=\"isStarting || !enoughPlayersReady\">\r\n            {{ isStarting ? 'Starting...' : 'START GAME' }}\r\n          </button>\r\n        </div>\r\n\r\n        <div v-else class=\"start-game-container\">\r\n          <button class=\"start-btn disabled\" disabled>\r\n            Need More Players\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Non-creator waiting message -->\r\n      <div v-else class=\"waiting-message\">\r\n        <p>Waiting for game creator to start the game...</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Rest of the component remains the same -->\r\n    <div v-else-if=\"currentGame.status === 'active'\" class=\"active-status\">\r\n      <!-- Active game content (unchanged) -->\r\n      <p>Game in progress</p>\r\n      <div class=\"game-info\">\r\n        <div class=\"info-item\">\r\n          <span class=\"label\">Current turn:</span>\r\n          <span class=\"value\">{{ getCurrentPlayerName() }}</span>\r\n        </div>\r\n        <div class=\"info-item\">\r\n          <span class=\"label\">Current bet:</span>\r\n          <span class=\"value\">{{ currentGame.currentBet }} chips</span>\r\n        </div>\r\n        <div class=\"info-item\">\r\n          <span class=\"label\">Betting round:</span>\r\n          <span class=\"value\">{{ formatBettingRound(currentGame.bettingRound) }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- If game is active but not initialized for this user -->\r\n      <div v-if=\"isCreator && !gameInitialized\" class=\"initialization-message\">\r\n        <p>Game is active but not fully initialized.</p>\r\n        <button @click=\"requestInitialization\" class=\"initialize-btn\">\r\n          Initialize Game\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"currentGame.status === 'completed'\" class=\"completed-status\">\r\n      <p>{{ getCompletionMessage() }}</p>\r\n\r\n      <!-- Only show \"Return to Lobby\" for players with zero balance -->\r\n      <div v-if=\"hasZeroBalance()\">\r\n        <p class=\"error-message\">You don't have enough chips to continue!</p>\r\n        <button @click=\"returnToLobby\" class=\"btn\">\r\n          Return to Lobby\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Show \"Continue watching\" option for observers -->\r\n      <div v-else-if=\"isObserver\">\r\n        <p>You can continue watching or return to the lobby.</p>\r\n        <button @click=\"returnToLobby\" class=\"btn\">\r\n          Return to Lobby\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Show waiting message for players who can still play -->\r\n      <div v-else>\r\n        <p>Waiting for the game to start again...</p>\r\n        <p class=\"status-message\">Players without chips have been removed.</p>\r\n\r\n        <!-- Ready button -->\r\n        <div class=\"ready-status-container\">\r\n          <button @click=\"toggleReady\" class=\"ready-btn\" :class=\"{ 'ready-confirm': isCurrentPlayerReady }\">\r\n            {{ isCurrentPlayerReady ? 'I\\'m Ready ✓' : 'Mark as Ready' }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else class=\"completed-status\">\r\n      <p>Game completed</p>\r\n      <button @click=\"returnToLobby\" class=\"btn\">\r\n        Return to Lobby\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Debug info always visible during development -->\r\n    <div class=\"debug-section\" v-if=\"isDevelopment\">\r\n      <button @click=\"debugVisible = !debugVisible\" class=\"debug-toggle\">\r\n        {{ debugVisible ? 'Hide Debug Info' : 'Show Debug Info' }}\r\n      </button>\r\n\r\n      <div v-if=\"debugVisible\" class=\"debug-details\">\r\n        <div class=\"debug-item\">\r\n          <span class=\"debug-label\">Creator:</span>\r\n          <span class=\"debug-value\">{{ getCreatorUsername() }}</span>\r\n        </div>\r\n        <div class=\"debug-item\">\r\n          <span class=\"debug-label\">Is Creator:</span>\r\n          <span class=\"debug-value\">{{ isCreator }}</span>\r\n        </div>\r\n        <div class=\"debug-item\">\r\n          <span class=\"debug-label\">Players:</span>\r\n          <span class=\"debug-value\">{{ currentGame.players.length }}</span>\r\n        </div>\r\n        <div class=\"debug-item\">\r\n          <span class=\"debug-label\">Ready Players:</span>\r\n          <span class=\"debug-value\">{{ readyPlayersCount }}</span>\r\n        </div>\r\n        <div class=\"debug-item\">\r\n          <span class=\"debug-label\">Enough Ready:</span>\r\n          <span class=\"debug-value\">{{ enoughPlayersReady }}</span>\r\n        </div>\r\n        <div class=\"debug-item\">\r\n          <span class=\"debug-label\">Status:</span>\r\n          <span class=\"debug-value\">{{ currentGame.status }}</span>\r\n        </div>\r\n        <button @click=\"forceStartGame\" class=\"debug-btn\">Force Start Game</button>\r\n        <button @click=\"requestStateUpdate\" class=\"debug-btn\">Request Game Update</button>\r\n        <button @click=\"checkReadyPlayers\" class=\"debug-btn\">Check Ready Players</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport PlayerReadyComponent from './PlayerReadyComponent.vue';\r\n\r\nexport default {\r\n  name: 'GameStatus',\r\n\r\n  components: {\r\n    PlayerReadyComponent\r\n  },\r\n\r\n  props: {\r\n    currentGame: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    currentUser: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    gameId: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    isCreator: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isStarting: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    gameInitialized: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      debugVisible: false,\r\n      isDevelopment: process.env.NODE_ENV !== 'production',\r\n      enoughPlayersReady: false\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    readyPlayersCount() {\r\n      if (!this.currentGame || !this.currentGame.players) return 0;\r\n      return this.currentGame.players.filter(p => p.isReady).length;\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    // This watcher ensures that enoughPlayersReady gets updated when the game state changes\r\n    currentGame: {\r\n      handler(newGame) {\r\n        this.checkReadyPlayers();\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    // Check ready players on component mount\r\n    this.checkReadyPlayers();\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * Get appropriate completion message based on game state\r\n     */\r\n    getCompletionMessage() {\r\n      // If message is about \"Chip e entek\", return that message\r\n      const endMessage = this.findCompletionMessage();\r\n      if (endMessage && endMessage.includes(\"Chip e entek\")) {\r\n        return \"Game ended: Chip e entek\";\r\n      }\r\n\r\n      // Default message\r\n      return \"Game completed\";\r\n    },\r\n\r\n    /**\r\n     * Find the completion message in action history if available\r\n     */\r\n    findCompletionMessage() {\r\n      if (!this.currentGame || !this.currentGame.actionHistory) {\r\n        return null;\r\n      }\r\n\r\n      // Look for the gameCompleted action in the history\r\n      const completionAction = this.currentGame.actionHistory\r\n        .filter(action => action.action === 'gameCompleted')\r\n        .pop();\r\n\r\n      return completionAction ? completionAction.message : null;\r\n    },\r\n\r\n    /**\r\n     * Check if current player has zero balance\r\n     */\r\n    hasZeroBalance() {\r\n      if (!this.currentUser || !this.currentGame || !this.currentGame.players) {\r\n        return false;\r\n      }\r\n\r\n      const currentPlayer = this.currentGame.players.find(\r\n        p => p.id === this.currentUser.id\r\n      );\r\n\r\n      return currentPlayer && (currentPlayer.totalChips <= 0);\r\n    },\r\n\r\n    /**\r\n     * Toggle player ready status\r\n     */\r\n    toggleReady() {\r\n      if (!this.currentUser || !this.gameId) {\r\n        console.error('Cannot toggle ready: missing user or game data');\r\n        return;\r\n      }\r\n\r\n      SocketService.setPlayerReady(\r\n        this.gameId,\r\n        this.currentUser.id,\r\n        !this.isCurrentPlayerReady\r\n      );\r\n\r\n      this.$emit('addToLog', `You marked yourself as ${!this.isCurrentPlayerReady ? 'ready' : 'not ready'}`);\r\n    },\r\n\r\n    getCurrentPlayerName() {\r\n      if (!this.currentGame || !this.currentGame.currentTurn) return 'N/A';\r\n\r\n      // Find player by ID, avoiding circular structure\r\n      const player = this.currentGame.players.find(\r\n        p => p.id === this.currentGame.currentTurn\r\n      );\r\n\r\n      return player ? player.username : 'Unknown';\r\n    },\r\n\r\n    getCreatorUsername() {\r\n      return this.currentGame.creator?.username || 'Unknown';\r\n    },\r\n\r\n    formatBettingRound(round) {\r\n      const formats = {\r\n        'preflop': 'Pre-Flop',\r\n        'flop': 'Flop',\r\n        'turn': 'Turn',\r\n        'river': 'River',\r\n        'showdown': 'Showdown'\r\n      };\r\n      return formats[round] || round;\r\n    },\r\n\r\n    startGame() {\r\n      console.log(\"Start game button clicked\");\r\n      if (!this.enoughPlayersReady) {\r\n        console.warn(\"Cannot start game - not enough players are ready\");\r\n        this.addToLog(\"Cannot start game - need at least 2 ready players\");\r\n        return;\r\n      }\r\n      this.$emit('startGame');\r\n    },\r\n\r\n    forceStartGame() {\r\n      console.log(\"Forcing game start from debug panel\");\r\n      this.$emit('startGame');\r\n    },\r\n\r\n    requestInitialization() {\r\n      this.$emit('requestInitialization');\r\n    },\r\n\r\n    requestStateUpdate() {\r\n      this.$emit('requestStateUpdate');\r\n    },\r\n\r\n    returnToLobby() {\r\n      this.$router.push('/lobby');\r\n    },\r\n\r\n    onPlayersReady(isReady) {\r\n      this.enoughPlayersReady = isReady;\r\n      console.log(\"Players ready status updated:\", isReady);\r\n    },\r\n\r\n    addToLog(message) {\r\n      this.$emit('addToLog', message);\r\n    },\r\n\r\n    checkReadyPlayers() {\r\n      if (!this.currentGame || !this.currentGame.players) {\r\n        this.enoughPlayersReady = false;\r\n        return;\r\n      }\r\n\r\n      const readyPlayers = this.currentGame.players.filter(p => p.isReady);\r\n      const enoughReady = readyPlayers.length >= 2;\r\n\r\n      console.log(`Ready players check: ${readyPlayers.length} ready, enough: ${enoughReady}`);\r\n\r\n      // Update the internal state\r\n      this.enoughPlayersReady = enoughReady;\r\n\r\n      // Also emit the event for parent components\r\n      this.$emit('playersReady', enoughReady);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game-status {\r\n  grid-area: status;\r\n  background-color: #2a2a2a;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n}\r\n\r\n.waiting-status,\r\n.active-status,\r\n.completed-status {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.game-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  background-color: #333;\r\n  border-radius: 6px;\r\n  padding: 12px;\r\n  margin: 10px auto;\r\n  max-width: 300px;\r\n}\r\n\r\n.info-item {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.label {\r\n  color: #999;\r\n  font-weight: bold;\r\n}\r\n\r\n.value {\r\n  color: #fff;\r\n}\r\n\r\n.creator-info {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: rgba(63, 140, 110, 0.15);\r\n  border-radius: 8px;\r\n  border: 2px dashed #3f8c6e;\r\n}\r\n\r\n.creator-badge {\r\n  background-color: #3f8c6e;\r\n  color: white;\r\n  padding: 6px 10px;\r\n  border-radius: 20px;\r\n  display: inline-block;\r\n  margin-bottom: 15px;\r\n  font-weight: bold;\r\n}\r\n\r\n.player-count-info {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.ready-message {\r\n  color: #4caf50;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n}\r\n\r\n.waiting-message {\r\n  margin-top: 20px;\r\n  font-style: italic;\r\n  color: #aaa;\r\n}\r\n\r\n.initialization-message {\r\n  margin-top: 20px;\r\n  padding: 10px;\r\n  background-color: #554400;\r\n  border-radius: 8px;\r\n  border: 1px solid #ffc107;\r\n}\r\n\r\n.start-game-container {\r\n  margin-top: 20px;\r\n}\r\n\r\n.start-btn,\r\n.initialize-btn {\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n.initialize-btn {\r\n  background-color: #ff9800;\r\n  animation: none;\r\n}\r\n\r\n.initialize-btn:hover {\r\n  background-color: #e68900;\r\n}\r\n\r\n.start-btn:hover {\r\n  background-color: #3d8b40;\r\n}\r\n\r\n.start-btn.disabled {\r\n  background-color: #555;\r\n  cursor: not-allowed;\r\n  animation: none;\r\n}\r\n\r\n.start-btn:disabled {\r\n  background-color: #555;\r\n  cursor: not-allowed;\r\n  animation: none;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    transform: scale(1);\r\n    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);\r\n  }\r\n\r\n  70% {\r\n    transform: scale(1.05);\r\n    box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);\r\n  }\r\n\r\n  100% {\r\n    transform: scale(1);\r\n    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);\r\n  }\r\n}\r\n\r\n.debug-section {\r\n  margin-top: 20px;\r\n  border-top: 1px dashed #555;\r\n  padding-top: 15px;\r\n  text-align: left;\r\n}\r\n\r\n.debug-toggle {\r\n  background-color: #333;\r\n  color: #aaa;\r\n  border: 1px solid #555;\r\n  border-radius: 4px;\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.debug-details {\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  background-color: #333;\r\n  border-radius: 4px;\r\n  font-family: monospace;\r\n  font-size: 12px;\r\n}\r\n\r\n.debug-item {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.debug-label {\r\n  display: inline-block;\r\n  width: 80px;\r\n  color: #aaa;\r\n}\r\n\r\n.debug-value {\r\n  color: #fff;\r\n  word-break: break-all;\r\n}\r\n\r\n.debug-btn {\r\n  background-color: #ff9800;\r\n  color: black;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 5px 10px;\r\n  margin-top: 10px;\r\n  margin-right: 5px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.debug-btn:hover {\r\n  background-color: #e68900;\r\n}\r\n\r\n.observer-message {\r\n  background-color: #ffcc00;\r\n  color: #333;\r\n  padding: 10px;\r\n  margin-bottom: 15px;\r\n  border-radius: 4px;\r\n  text-align: center;\r\n}\r\n\r\n.join-btn {\r\n  background-color: #3f8c6e;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 8px 15px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n.join-btn:hover {\r\n  background-color: #2c664e;\r\n}\r\n\r\n.error-message {\r\n  color: #e74c3c;\r\n  font-weight: bold;\r\n  margin: 10px 0;\r\n}\r\n\r\n.status-message {\r\n  color: #f39c12;\r\n  font-style: italic;\r\n  margin: 10px 0;\r\n}\r\n\r\n.ready-btn {\r\n  background-color: #555;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin-top: 15px;\r\n}\r\n\r\n.ready-btn.ready-confirm {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.ready-btn:hover {\r\n  background-color: #666;\r\n}\r\n\r\n.ready-btn.ready-confirm:hover {\r\n  background-color: #3d8b40;\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameStatus.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameStatus.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./GameStatus.vue?vue&type=template&id=a7794128&scoped=true\"\nimport script from \"./GameStatus.vue?vue&type=script&lang=js\"\nexport * from \"./GameStatus.vue?vue&type=script&lang=js\"\nimport style0 from \"./GameStatus.vue?vue&type=style&index=0&id=a7794128&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"a7794128\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"community-cards\"},[_c('h3',[_vm._v(\"Community Cards\")]),_c('div',{staticClass:\"cards-container\"},[_vm._l((_vm.communityCards),function(card,index){return _c('div',{key:index,staticClass:\"card-display\",attrs:{\"data-suit\":card.suit}},[_vm._v(\" \"+_vm._s(_vm.formatCard(card))+\" \")])}),_vm._l(((5 - _vm.communityCards.length)),function(i){return _c('div',{key:`empty-${i}`,staticClass:\"card-display empty\"},[_vm._v(\" ? \")])})],2)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/Game/CommunityCards.vue -->\r\n<template>\r\n  <div class=\"community-cards\">\r\n    <h3>Community Cards</h3>\r\n    <div class=\"cards-container\">\r\n      <div v-for=\"(card, index) in communityCards\" :key=\"index\" class=\"card-display\" :data-suit=\"card.suit\">\r\n        {{ formatCard(card) }}\r\n      </div>\r\n      <div v-for=\"i in (5 - communityCards.length)\" :key=\"`empty-${i}`\" class=\"card-display empty\">\r\n        ?\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'CommunityCards',\r\n\r\n  props: {\r\n    communityCards: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    formatCard: {\r\n      type: Function,\r\n      required: true\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.community-cards {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.community-cards h3 {\r\n  color: white;\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.cards-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10px;\r\n}\r\n\r\n.card-display {\r\n  width: 60px;\r\n  height: 85px;\r\n  background-color: white;\r\n  color: black;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n}\r\n\r\n.card-display.empty {\r\n  background-color: #333;\r\n  color: #555;\r\n}\r\n\r\n.card-display[data-suit=\"hearts\"],\r\n.card-display[data-suit=\"diamonds\"] {\r\n  color: red;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .card-display {\r\n    width: 40px;\r\n    height: 60px;\r\n    font-size: 16px;\r\n  }\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CommunityCards.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CommunityCards.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CommunityCards.vue?vue&type=template&id=3701dc0c&scoped=true\"\nimport script from \"./CommunityCards.vue?vue&type=script&lang=js\"\nexport * from \"./CommunityCards.vue?vue&type=script&lang=js\"\nimport style0 from \"./CommunityCards.vue?vue&type=style&index=0&id=3701dc0c&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3701dc0c\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"players-container\"},[(!_vm.players || _vm.players.length === 0)?_c('div',{staticClass:\"no-players\"},[_vm._v(\" No players have joined yet \")]):_vm._e(),_vm._l((_vm.players),function(player){return _c('div',{key:`player-${player.id}-${_vm.updateKey}`,staticClass:\"player-spot\",class:{\n    'current-player': _vm.currentUser && player.id === _vm.currentUser.id,\n    'active-turn': _vm.currentTurn && player.id === _vm.currentTurn,\n    'folded': player.hasFolded\n  }},[_c('div',{staticClass:\"player-info\"},[_c('div',{staticClass:\"player-name\"},[_vm._v(_vm._s(player.username || 'Unknown Player'))]),_c('div',{staticClass:\"player-chips\"},[_vm._v(\" Chips: \"+_vm._s(player.totalChips || 0)+\" \"),(player.chips > 0)?_c('span',[_vm._v(\"(\"+_vm._s(player.chips)+\" in pot)\")]):_vm._e()]),(player.hasFolded)?_c('div',{staticClass:\"player-status\"},[_vm._v(\"Folded\")]):(player.hasActed)?_c('div',{staticClass:\"player-status\"},[_vm._v(\"Acted\")]):_vm._e()]),(_vm.currentUser && player.id === _vm.currentUser.id)?_c('div',{staticClass:\"player-hand\"},_vm._l((_vm.displayPlayerHand),function(card,index){return _c('div',{key:`card-${index}-${card.rank}-${card.suit}`,staticClass:\"card-display player-card\",attrs:{\"data-suit\":card.suit}},[_vm._v(\" \"+_vm._s(_vm.formatCard(card))+\" \")])}),0):_c('div',{staticClass:\"player-hand\"},_vm._l(((player.hasCards ? 2 : 0)),function(i){return _c('div',{key:`back-${i}-${_vm.updateKey}`,staticClass:\"card-display card-back\"},[_vm._v(\" ●● \")])}),0)])})],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/Game/PlayerList.vue -->\r\n<template>\r\n  <div class=\"players-container\">\r\n    <!-- Show message when no players -->\r\n    <div v-if=\"!players || players.length === 0\" class=\"no-players\">\r\n      No players have joined yet\r\n    </div>\r\n\r\n    <div v-for=\"player in players\" :key=\"`player-${player.id}-${updateKey}`\" class=\"player-spot\" :class=\"{\r\n      'current-player': currentUser && player.id === currentUser.id,\r\n      'active-turn': currentTurn && player.id === currentTurn,\r\n      'folded': player.hasFolded\r\n    }\">\r\n      <div class=\"player-info\">\r\n        <div class=\"player-name\">{{ player.username || 'Unknown Player' }}</div>\r\n        <div class=\"player-chips\">\r\n          Chips: {{ player.totalChips || 0 }}\r\n          <span v-if=\"player.chips > 0\">({{ player.chips }} in pot)</span>\r\n        </div>\r\n        <div v-if=\"player.hasFolded\" class=\"player-status\">Folded</div>\r\n        <div v-else-if=\"player.hasActed\" class=\"player-status\">Acted</div>\r\n      </div>\r\n\r\n      <div v-if=\"currentUser && player.id === currentUser.id\" class=\"player-hand\">\r\n        <div v-for=\"(card, index) in displayPlayerHand\" :key=\"`card-${index}-${card.rank}-${card.suit}`\"\r\n          class=\"card-display player-card\" :data-suit=\"card.suit\">\r\n          {{ formatCard(card) }}\r\n        </div>\r\n      </div>\r\n      <div v-else class=\"player-hand\">\r\n        <div v-for=\"i in (player.hasCards ? 2 : 0)\" :key=\"`back-${i}-${updateKey}`\" class=\"card-display card-back\">\r\n          ●●\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'PlayerList',\r\n\r\n  props: {\r\n    players: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    currentUser: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    currentTurn: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    playerHand: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    formatCard: {\r\n      type: Function,\r\n      required: true\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      updateKey: 0, // Add an update key to force re-rendering\r\n      lastHandUpdate: Date.now(),\r\n      currentHandTimestamp: 0,\r\n      lastKnownHandState: [],\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    playerDebugInfo() {\r\n      if (!this.players) return 'No players';\r\n\r\n      // Log the first player for debugging\r\n      const firstPlayer = this.players[0];\r\n      return firstPlayer ? `First player: ${JSON.stringify(firstPlayer)}` : 'No first player';\r\n    },\r\n\r\n    // Add a computed property to handle player hand display\r\n    displayPlayerHand() {\r\n      // Make sure playerHand is an array\r\n      if (!this.playerHand || !Array.isArray(this.playerHand)) {\r\n        console.warn('Invalid playerHand in PlayerList component:', this.playerHand);\r\n        return [];\r\n      }\r\n\r\n      // Add reactivity by creating new card objects with keys that will\r\n      // trigger Vue's reactivity system\r\n      return this.playerHand.map(card => ({\r\n        ...card,\r\n        _key: `${card.rank}-${card.suit}-${this.lastHandUpdate}-${this.updateKey}`\r\n      }));\r\n    },\r\n    //A computed property to handle player hand display\r\n    displayPlayerHand() {\r\n      // Make sure playerHand is an array\r\n      if (!this.playerHand || !Array.isArray(this.playerHand)) {\r\n        console.warn('Invalid playerHand in PlayerList component:', this.playerHand);\r\n\r\n        // If we don't have a current hand but have a last known state and game is in waiting state,\r\n        // don't show any cards\r\n        if (this.getCurrentGameStatus() === 'waiting' && this.lastKnownHandState.length > 0) {\r\n          return [];\r\n        }\r\n\r\n        // Otherwise return empty array\r\n        return [];\r\n      }\r\n\r\n      // If we have a new hand, update our last known state\r\n      if (this.playerHand.length > 0) {\r\n        this.lastKnownHandState = [...this.playerHand];\r\n      }\r\n\r\n      // If the game is waiting and the playerHand is empty, return empty to hide cards\r\n      if (this.getCurrentGameStatus() === 'waiting' && this.playerHand.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // Add reactivity by creating new card objects with keys that will\r\n      // trigger Vue's reactivity system\r\n      return this.playerHand.map(card => ({\r\n        ...card,\r\n        _key: `${card.rank}-${card.suit}-${this.lastHandUpdate}-${this.updateKey}`\r\n      }));\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    // Watch playerHand for changes and force updates\r\n    playerHand: {\r\n      handler(newHand, oldHand) {\r\n        // Only force update if hand has changed meaningfully\r\n        if (newHand && newHand.length > 0) {\r\n          const newHandString = JSON.stringify(newHand);\r\n          const oldHandString = oldHand ? JSON.stringify(oldHand) : '';\r\n\r\n          if (newHandString !== oldHandString) {\r\n            console.log('PlayerList detected hand change:',\r\n              newHand.map(c => `${c.rank} of ${c.suit}`).join(', '));\r\n            this.updateKey++; // Increment to force re-render\r\n            this.lastHandUpdate = Date.now();\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    // Watch for changes in game status\r\n    '$parent.currentGame.status': {\r\n      handler(newStatus) {\r\n        console.log('Game status changed:', newStatus);\r\n        if (newStatus === 'waiting') {\r\n          // Delay slightly to ensure other components have finished processing\r\n          setTimeout(() => {\r\n            this.clearPlayerCards();\r\n          }, 100);\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    console.log('PlayerList mounted with players:', this.players);\r\n    console.log('CurrentUser in PlayerList:', this.currentUser);\r\n    console.log('Initial playerHand:', this.playerHand);\r\n\r\n    // Set up periodic checks for updates\r\n    this.updateInterval = setInterval(() => {\r\n      this.updateKey++; // Force re-render periodically\r\n    }, 5000);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.updateInterval) {\r\n      clearInterval(this.updateInterval);\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    // Get current game status safely\r\n    getCurrentGameStatus() {\r\n      const parent = this.$parent;\r\n      if (parent && parent.currentGame) {\r\n        return parent.currentGame.status;\r\n      }\r\n      return null;\r\n    },\r\n    // Add a method to force update\r\n    // Force update method enhanced\r\n    forceUpdate() {\r\n      this.updateKey++;\r\n      this.lastHandUpdate = Date.now();\r\n      console.log('PlayerList forced update');\r\n\r\n      // Check if we should clear cards based on game state\r\n      if (this.getCurrentGameStatus() === 'waiting') {\r\n        // Clear visual cards when in waiting state\r\n        console.log('Game in waiting state, clearing card display');\r\n      }\r\n    },\r\n    updateForNewHand(timestamp) {\r\n      if (!timestamp || timestamp <= this.currentHandTimestamp) {\r\n        return; // Ignore older updates\r\n      }\r\n\r\n      console.log('PlayerList updating for new hand with timestamp:', timestamp);\r\n      this.currentHandTimestamp = timestamp;\r\n      this.updateKey += 10; // Use a larger increment to distinguish from regular updates\r\n      this.lastHandUpdate = Date.now();\r\n\r\n      // Force component update\r\n      this.$forceUpdate();\r\n    },\r\n    clearPlayerCards() {\r\n      this.updateKey += 20; // Large increment to ensure update\r\n      this.lastHandUpdate = Date.now();\r\n      console.log('PlayerList cleared visual card display');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.players-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n}\r\n\r\n.no-players {\r\n  width: 100%;\r\n  text-align: center;\r\n  padding: 20px;\r\n  font-style: italic;\r\n  color: #999;\r\n}\r\n\r\n.player-spot {\r\n  width: 180px;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  border-radius: 8px;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  position: relative;\r\n}\r\n\r\n.player-spot.current-player {\r\n  background-color: rgba(63, 140, 110, 0.3);\r\n  box-shadow: 0 0 10px rgba(63, 140, 110, 0.5);\r\n}\r\n\r\n.player-spot.active-turn {\r\n  border: 2px solid #ffcc00;\r\n}\r\n\r\n.player-spot.folded {\r\n  opacity: 0.5;\r\n}\r\n\r\n.player-info {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.player-name {\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n}\r\n\r\n.player-chips {\r\n  font-size: 14px;\r\n  color: #ccc;\r\n}\r\n\r\n.player-status {\r\n  font-size: 12px;\r\n  color: #ff9999;\r\n  font-style: italic;\r\n}\r\n\r\n.player-hand {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 5px;\r\n}\r\n\r\n.player-card {\r\n  background: white;\r\n}\r\n\r\n.card-display {\r\n  width: 60px;\r\n  height: 85px;\r\n  background-color: white;\r\n  color: black;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n}\r\n\r\n.card-display.card-back {\r\n  background-color: #2a2a2a;\r\n  color: #3f8c6e;\r\n}\r\n\r\n.card-display[data-suit=\"hearts\"],\r\n.card-display[data-suit=\"diamonds\"] {\r\n  color: red;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .player-spot {\r\n    width: 140px;\r\n    margin: 5px;\r\n  }\r\n\r\n  .card-display {\r\n    width: 40px;\r\n    height: 60px;\r\n    font-size: 16px;\r\n  }\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerList.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerList.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./PlayerList.vue?vue&type=template&id=b054c84e&scoped=true\"\nimport script from \"./PlayerList.vue?vue&type=script&lang=js\"\nexport * from \"./PlayerList.vue?vue&type=script&lang=js\"\nimport style0 from \"./PlayerList.vue?vue&type=style&index=0&id=b054c84e&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"b054c84e\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"player-actions\"},[_c('h3',[_vm._v(\"Your Turn\")]),(_vm.isGameActive && _vm.isYourTurn)?_c('div',{staticClass:\"action-buttons\"},[(_vm.availableActions.includes('fold'))?_c('button',{staticClass:\"btn btn-danger\",on:{\"click\":function($event){return _vm.$emit('handleAction', 'fold')}}},[_vm._v(\" Fold \")]):_vm._e(),(_vm.availableActions.includes('check'))?_c('button',{staticClass:\"btn\",on:{\"click\":function($event){return _vm.$emit('handleAction', 'check')}}},[_vm._v(\" Check \")]):_vm._e(),(_vm.availableActions.includes('call'))?_c('button',{staticClass:\"btn\",on:{\"click\":function($event){_vm.$emit('handleAction', 'call', _vm.getCallAmount())}}},[_vm._v(\" Call \"+_vm._s(_vm.formattedCallAmount)+\" chips \")]):_vm._e(),(_vm.availableActions.includes('allIn'))?_c('button',{staticClass:\"btn btn-warning\",on:{\"click\":_vm.handleAllIn}},[_vm._v(\" All-In (\"+_vm._s(_vm.getMaxChips())+\" chips) \")]):_vm._e(),(_vm.availableActions.includes('bet') && !_vm.availableActions.includes('raise'))?_c('div',{staticClass:\"bet-action\"},[_c('div',{staticClass:\"bet-input-group\"},[_c('label',{attrs:{\"for\":\"betAmount\"}},[_vm._v(\"Bet Amount:\")]),_c('div',{staticClass:\"input-with-controls\"},[_c('button',{staticClass:\"amount-btn\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.decrementBet}},[_vm._v(\"-\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.internalBetAmount),expression:\"internalBetAmount\",modifiers:{\"number\":true}}],staticClass:\"amount-input\",attrs:{\"type\":\"number\",\"id\":\"betAmount\",\"min\":1,\"max\":_vm.getMaxBetAmount()},domProps:{\"value\":(_vm.internalBetAmount)},on:{\"change\":_vm.updateLocalBetAmount,\"blur\":[_vm.validateBetAmount,function($event){return _vm.$forceUpdate()}],\"input\":function($event){if($event.target.composing)return;_vm.internalBetAmount=_vm._n($event.target.value)}}}),_c('button',{staticClass:\"amount-btn\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.incrementBet}},[_vm._v(\"+\")])])]),_c('button',{staticClass:\"btn\",on:{\"click\":_vm.handleBet}},[_vm._v(\" Bet \"+_vm._s(_vm.internalBetAmount)+\" chips \")])]):_vm._e(),(_vm.availableActions.includes('raise'))?_c('div',{staticClass:\"bet-action\"},[_c('div',{staticClass:\"bet-input-group\"},[_c('label',{attrs:{\"for\":\"raiseAmount\"}},[_vm._v(\"Raise Amount:\")]),_c('div',{staticClass:\"input-with-controls\"},[_c('button',{staticClass:\"amount-btn\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.decrementRaise}},[_vm._v(\"-\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.internalRaiseAmount),expression:\"internalRaiseAmount\",modifiers:{\"number\":true}}],staticClass:\"amount-input\",attrs:{\"type\":\"number\",\"id\":\"raiseAmount\",\"min\":_vm.getMinRaiseAmount(),\"max\":_vm.getMaxRaiseAmount()},domProps:{\"value\":(_vm.internalRaiseAmount)},on:{\"change\":_vm.updateLocalRaiseAmount,\"blur\":[_vm.validateRaiseAmount,function($event){return _vm.$forceUpdate()}],\"input\":function($event){if($event.target.composing)return;_vm.internalRaiseAmount=_vm._n($event.target.value)}}}),_c('button',{staticClass:\"amount-btn\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.incrementRaise}},[_vm._v(\"+\")])])]),_c('button',{staticClass:\"btn\",on:{\"click\":_vm.handleRaise}},[_vm._v(\" Raise to \"+_vm._s(_vm.internalRaiseAmount)+\" chips \")])]):_vm._e()]):(!_vm.isGameActive)?_c('div',{staticClass:\"waiting-message\"},[_vm._v(\" Waiting for next hand to start... \")]):_c('div',{staticClass:\"waiting-message\"},[_vm._v(\" Waiting for your turn... \")])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// client/src/components/Game/PlayerActions.vue\r\n// Update the template part to improve the action button logic\r\n\r\n<template>\r\n  <div class=\"player-actions\">\r\n    <h3>Your Turn</h3>\r\n\r\n    <!-- Only show actions if game is active and it's the player's turn -->\r\n    <div v-if=\"isGameActive && isYourTurn\" class=\"action-buttons\">\r\n      <button v-if=\"availableActions.includes('fold')\" @click=\"$emit('handleAction', 'fold')\" class=\"btn btn-danger\">\r\n        Fold\r\n      </button>\r\n\r\n      <button v-if=\"availableActions.includes('check')\" @click=\"$emit('handleAction', 'check')\" class=\"btn\">\r\n        Check\r\n      </button>\r\n\r\n      <button v-if=\"availableActions.includes('call')\" @click=\"$emit('handleAction', 'call', getCallAmount())\"\r\n        class=\"btn\">\r\n        Call {{ formattedCallAmount }} chips\r\n      </button>\r\n\r\n      <!-- Add All-In button -->\r\n      <button v-if=\"availableActions.includes('allIn')\" @click=\"handleAllIn\" class=\"btn btn-warning\">\r\n        All-In ({{ getMaxChips() }} chips)\r\n      </button>\r\n\r\n      <div v-if=\"availableActions.includes('bet') && !availableActions.includes('raise')\" class=\"bet-action\">\r\n        <div class=\"bet-input-group\">\r\n          <label for=\"betAmount\">Bet Amount:</label>\r\n          <div class=\"input-with-controls\">\r\n            <button type=\"button\" @click=\"decrementBet\" class=\"amount-btn\">-</button>\r\n            <input type=\"number\" id=\"betAmount\" v-model.number=\"internalBetAmount\" @change=\"updateLocalBetAmount\"\r\n              @blur=\"validateBetAmount\" :min=\"1\" :max=\"getMaxBetAmount()\" class=\"amount-input\" />\r\n            <button type=\"button\" @click=\"incrementBet\" class=\"amount-btn\">+</button>\r\n          </div>\r\n        </div>\r\n        <button @click=\"handleBet\" class=\"btn\">\r\n          Bet {{ internalBetAmount }} chips\r\n        </button>\r\n      </div>\r\n\r\n      <div v-if=\"availableActions.includes('raise')\" class=\"bet-action\">\r\n        <div class=\"bet-input-group\">\r\n          <label for=\"raiseAmount\">Raise Amount:</label>\r\n          <div class=\"input-with-controls\">\r\n            <button type=\"button\" @click=\"decrementRaise\" class=\"amount-btn\">-</button>\r\n            <input type=\"number\" id=\"raiseAmount\" v-model.number=\"internalRaiseAmount\" @change=\"updateLocalRaiseAmount\"\r\n              @blur=\"validateRaiseAmount\" :min=\"getMinRaiseAmount()\" :max=\"getMaxRaiseAmount()\" class=\"amount-input\" />\r\n            <button type=\"button\" @click=\"incrementRaise\" class=\"amount-btn\">+</button>\r\n          </div>\r\n        </div>\r\n        <button @click=\"handleRaise\" class=\"btn\">\r\n          Raise to {{ internalRaiseAmount }} chips\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Message when it's not the player's turn or game is not active -->\r\n    <div v-else-if=\"!isGameActive\" class=\"waiting-message\">\r\n      Waiting for next hand to start...\r\n    </div>\r\n    <div v-else class=\"waiting-message\">\r\n      Waiting for your turn...\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'PlayerActions',\r\n\r\n  props: {\r\n    availableActions: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    currentGame: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    betAmount: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    raiseAmount: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    isYourTurn: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      internalBetAmount: 1,\r\n      internalRaiseAmount: 2\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    formattedCallAmount() {\r\n      const amount = this.getCallAmount();\r\n      return isNaN(amount) ? 0 : amount;\r\n    },\r\n\r\n    isGameActive() {\r\n      return this.currentGame && this.currentGame.status === 'active';\r\n    }\r\n  },\r\n\r\n  created() {\r\n    // Initialize internal values from props\r\n    this.internalBetAmount = this.betAmount || 1;\r\n    this.internalRaiseAmount = this.raiseAmount || this.getMinRaiseAmount();\r\n  },\r\n\r\n  methods: {\r\n    // Add new methods for All-In\r\n    getMaxChips() {\r\n      const player = this.getCurrentPlayer();\r\n      return player ? player.totalChips : 0;\r\n    },\r\n\r\n\r\n    handleAllIn() {\r\n      if (!this.isGameActive || !this.isYourTurn) return;\r\n\r\n      // Get the actual maximum chips the player has\r\n      const allInAmount = this.getMaxChips();\r\n      this.$emit('handleAction', 'allIn', allInAmount);\r\n    },\r\n    // Helpers\r\n    getCurrentPlayer() {\r\n      // This returns the player directly\r\n      const player = this.currentGame.players.find(\r\n        p => p.id === this.$store.getters.currentUser.id\r\n      );\r\n      return player;\r\n    },\r\n\r\n    getPlayerChipsInPot() {\r\n      const player = this.getCurrentPlayer();\r\n      return player ? (player.chips || 0) : 0;\r\n    },\r\n\r\n    getCallAmount() {\r\n      const currentBet = this.currentGame ? (this.currentGame.currentBet || 0) : 0;\r\n      const playerChips = this.getPlayerChipsInPot();\r\n      const callAmount = currentBet - playerChips;\r\n      return Math.max(0, callAmount);\r\n    },\r\n\r\n    getMaxBetAmount() {\r\n      const player = this.getCurrentPlayer();\r\n      return player ? (player.totalChips || 1) : 1;\r\n    },\r\n\r\n    getMinRaiseAmount() {\r\n      // Calculate minimum raise amount properly\r\n      const currentBet = this.currentGame ? (this.currentGame.currentBet || 0) : 0;\r\n\r\n      // Min raise is current bet doubled\r\n      return Math.max(currentBet * 2, 2);\r\n    },\r\n\r\n    getMaxRaiseAmount() {\r\n      const player = this.getCurrentPlayer();\r\n      if (!player) return 2;\r\n\r\n      const totalChips = player.totalChips || 0;\r\n      const chipsInPot = player.chips || 0;\r\n      return totalChips + chipsInPot;\r\n    },\r\n\r\n    // UI Events\r\n    handleBet() {\r\n      if (!this.isGameActive || !this.isYourTurn) return;\r\n\r\n      this.validateBetAmount();\r\n      this.$emit('handleAction', 'bet', this.internalBetAmount);\r\n    },\r\n\r\n    handleRaise() {\r\n      if (!this.isGameActive || !this.isYourTurn) return;\r\n\r\n      this.validateRaiseAmount();\r\n      this.$emit('handleAction', 'raise', this.internalRaiseAmount);\r\n    },\r\n\r\n    updateLocalBetAmount() {\r\n      this.validateBetAmount();\r\n      this.$emit('updateBetAmount', this.internalBetAmount);\r\n    },\r\n\r\n    updateLocalRaiseAmount() {\r\n      this.validateRaiseAmount();\r\n      this.$emit('updateRaiseAmount', this.internalRaiseAmount);\r\n    },\r\n\r\n    // Validation\r\n    validateBetAmount() {\r\n      let value = parseInt(this.internalBetAmount);\r\n\r\n      // Handle NaN and validation\r\n      if (isNaN(value) || value < 1) {\r\n        value = 1;\r\n      }\r\n\r\n      // Check max\r\n      const maxBet = this.getMaxBetAmount();\r\n      if (value > maxBet) {\r\n        value = maxBet;\r\n      }\r\n\r\n      // Update the model with valid value\r\n      this.internalBetAmount = value;\r\n    },\r\n\r\n    validateRaiseAmount() {\r\n      let value = parseInt(this.internalRaiseAmount);\r\n      const minRaise = this.getMinRaiseAmount();\r\n\r\n      // Handle NaN and validation\r\n      if (isNaN(value) || value < minRaise) {\r\n        value = minRaise;\r\n      }\r\n\r\n      // Check max\r\n      const maxRaise = this.getMaxRaiseAmount();\r\n      if (value > maxRaise) {\r\n        value = maxRaise;\r\n      }\r\n\r\n      // Update the model with valid value\r\n      this.internalRaiseAmount = value;\r\n    },\r\n\r\n    // Increment/Decrement\r\n    incrementBet() {\r\n      // Make sure we have a valid value first\r\n      this.validateBetAmount();\r\n      // Then increment\r\n      const newValue = Math.min(this.internalBetAmount + 1, this.getMaxBetAmount());\r\n      this.internalBetAmount = newValue;\r\n      this.updateLocalBetAmount();\r\n    },\r\n\r\n    decrementBet() {\r\n      // Make sure we have a valid value first\r\n      this.validateBetAmount();\r\n      // Then decrement\r\n      const newValue = Math.max(this.internalBetAmount - 1, 1);\r\n      this.internalBetAmount = newValue;\r\n      this.updateLocalBetAmount();\r\n    },\r\n\r\n    incrementRaise() {\r\n      // Make sure we have a valid value first\r\n      this.validateRaiseAmount();\r\n      // Then increment\r\n      const newValue = Math.min(this.internalRaiseAmount + 1, this.getMaxRaiseAmount());\r\n      this.internalRaiseAmount = newValue;\r\n      this.updateLocalRaiseAmount();\r\n    },\r\n\r\n    decrementRaise() {\r\n      // Make sure we have a valid value first\r\n      this.validateRaiseAmount();\r\n      // Then decrement\r\n      const newValue = Math.max(this.internalRaiseAmount - 1, this.getMinRaiseAmount());\r\n      this.internalRaiseAmount = newValue;\r\n      this.updateLocalRaiseAmount();\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    // Watch for external changes\r\n    betAmount: {\r\n      handler(newVal) {\r\n        if (newVal !== this.internalBetAmount) {\r\n          this.internalBetAmount = newVal;\r\n        }\r\n      },\r\n      immediate: true\r\n    },\r\n\r\n    raiseAmount: {\r\n      handler(newVal) {\r\n        if (newVal !== this.internalRaiseAmount) {\r\n          this.internalRaiseAmount = newVal;\r\n        }\r\n      },\r\n      immediate: true\r\n    },\r\n\r\n    // Watch for changes in game status\r\n    'currentGame.status': {\r\n      handler(newStatus) {\r\n        if (newStatus !== 'active' && this.isYourTurn) {\r\n          // If game status changes and it was player's turn, emit end turn\r\n          this.$emit('endTurn');\r\n        }\r\n      },\r\n      immediate: true\r\n    },\r\n\r\n    // Important: Watch minimum raise amount changes to update the field\r\n    'currentGame.currentBet': {\r\n      handler() {\r\n        // Update raise amount when current bet changes\r\n        if (this.availableActions.includes('raise')) {\r\n          const minRaise = this.getMinRaiseAmount();\r\n          if (this.internalRaiseAmount < minRaise) {\r\n            this.internalRaiseAmount = minRaise;\r\n            this.updateLocalRaiseAmount();\r\n          }\r\n        }\r\n      },\r\n      immediate: true\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.player-actions {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  margin-top: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.player-actions h3 {\r\n  color: white;\r\n  margin-top: 0;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.waiting-message {\r\n  color: #aaa;\r\n  font-style: italic;\r\n  padding: 15px;\r\n}\r\n\r\n.bet-action {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n  min-width: 200px;\r\n}\r\n\r\n.bet-input-group {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.bet-input-group label {\r\n  color: #ccc;\r\n  font-size: 14px;\r\n  text-align: left;\r\n}\r\n\r\n.input-with-controls {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n}\r\n\r\n.amount-input {\r\n  flex: 1;\r\n  background-color: #333;\r\n  color: white;\r\n  border: 1px solid #555;\r\n  border-radius: 0;\r\n  padding: 8px;\r\n  text-align: center;\r\n  -moz-appearance: textfield;\r\n  /* Remove arrows in Firefox */\r\n}\r\n\r\n/* Remove arrows in Chrome, Safari, Edge, Opera */\r\n.amount-input::-webkit-outer-spin-button,\r\n.amount-input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\n.amount-btn {\r\n  background-color: #555;\r\n  border: 1px solid #666;\r\n  color: white;\r\n  width: 30px;\r\n  height: 36px;\r\n  font-size: 18px;\r\n  line-height: 1;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.amount-btn:first-child {\r\n  border-radius: 4px 0 0 4px;\r\n}\r\n\r\n.amount-btn:last-child {\r\n  border-radius: 0 4px 4px 0;\r\n}\r\n\r\n.amount-btn:hover {\r\n  background-color: #666;\r\n}\r\n\r\n.btn {\r\n  display: inline-block;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: #3f8c6e;\r\n  color: white;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  min-width: 100px;\r\n}\r\n\r\n.btn:hover {\r\n  background-color: #2c664e;\r\n}\r\n\r\n.btn-danger {\r\n  background-color: #e74c3c;\r\n}\r\n\r\n.btn-danger:hover {\r\n  background-color: #c0392b;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .action-buttons {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n\r\n  .bet-action {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.btn-warning {\r\n  background-color: #f39c12;\r\n}\r\n\r\n.btn-warning:hover {\r\n  background-color: #e67e22;\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerActions.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerActions.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./PlayerActions.vue?vue&type=template&id=a2b198c8&scoped=true\"\nimport script from \"./PlayerActions.vue?vue&type=script&lang=js\"\nexport * from \"./PlayerActions.vue?vue&type=script&lang=js\"\nimport style0 from \"./PlayerActions.vue?vue&type=style&index=0&id=a2b198c8&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"a2b198c8\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"game-log\"},[_c('h3',[_vm._v(\"Game Log\")]),_c('div',{staticClass:\"log-entries\"},_vm._l((_vm.gameLog),function(entry,index){return _c('div',{key:index,staticClass:\"log-entry\"},[_vm._v(\" \"+_vm._s(entry)+\" \")])}),0)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/Game/GameLog.vue -->\r\n<template>\r\n    <div class=\"game-log\">\r\n      <h3>Game Log</h3>\r\n      <div class=\"log-entries\">\r\n        <div v-for=\"(entry, index) in gameLog\" :key=\"index\" class=\"log-entry\">\r\n          {{ entry }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'GameLog',\r\n    \r\n    props: {\r\n      gameLog: {\r\n        type: Array,\r\n        default: () => []\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .game-log {\r\n  max-height: 500px; /* Consistent height */\r\n  overflow-y: auto;\r\n  background-color: #2a2a2a;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n  \r\n  .game-log h3 {\r\n    margin-top: 0;\r\n    margin-bottom: 10px;\r\n    color: #3f8c6e;\r\n  }\r\n  \r\n  .log-entries {\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .log-entry {\r\n    padding: 5px 0;\r\n    border-bottom: 1px solid #444;\r\n    font-size: 14px;\r\n  }\r\n  </style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameLog.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameLog.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./GameLog.vue?vue&type=template&id=09e9840d&scoped=true\"\nimport script from \"./GameLog.vue?vue&type=script&lang=js\"\nexport * from \"./GameLog.vue?vue&type=script&lang=js\"\nimport style0 from \"./GameLog.vue?vue&type=style&index=0&id=09e9840d&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"09e9840d\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return (_vm.enabled)?_c('div',{staticClass:\"debug-panel\"},[_c('div',{staticClass:\"debug-header\"},[_c('h3',[_vm._v(\"Game Debug Panel\")]),_c('button',{staticClass:\"close-btn\",on:{\"click\":function($event){return _vm.$emit('close')}}},[_vm._v(\"×\")])]),_c('div',{staticClass:\"debug-content\"},[_c('div',{staticClass:\"debug-section\"},[_c('h4',[_vm._v(\"Game Info\")]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Game ID:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.gameId))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Status:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.currentGame ? _vm.currentGame.status : 'Unknown'))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Players:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.currentGame ? _vm.currentGame.players.length : 0))])])]),_c('div',{staticClass:\"debug-section\"},[_c('h4',[_vm._v(\"Current User\")]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"User ID:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.currentUser ? _vm.currentUser.id : 'Not logged in'))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Username:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.currentUser ? _vm.currentUser.username : 'Not logged in'))])]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Is Creator:\")]),_c('span',{staticClass:\"value\"},[_vm._v(_vm._s(_vm.isCreator ? 'Yes' : 'No'))])])]),_c('div',{staticClass:\"debug-section\"},[_c('h4',[_vm._v(\"Socket Status\")]),_c('div',{staticClass:\"debug-item\"},[_c('span',{staticClass:\"label\"},[_vm._v(\"Connected:\")]),_c('span',{staticClass:\"value\",class:{ 'status-good': _vm.isConnected, 'status-bad': !_vm.isConnected }},[_vm._v(\" \"+_vm._s(_vm.isConnected ? 'Yes' : 'No')+\" \")])])]),_c('div',{staticClass:\"debug-actions\"},[_c('button',{staticClass:\"debug-btn\",on:{\"click\":_vm.refreshGameState}},[_vm._v(\"Refresh Game State\")]),_c('button',{staticClass:\"debug-btn\",attrs:{\"disabled\":!_vm.isCreator},on:{\"click\":_vm.forceStartGame}},[_vm._v(\"Force Start Game\")]),_c('button',{staticClass:\"debug-btn\",on:{\"click\":_vm.reconnectSocket}},[_vm._v(\"Reconnect Socket\")])])])]):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/Game/GameDebugPanel.vue -->\r\n<template>\r\n    <div class=\"debug-panel\" v-if=\"enabled\">\r\n      <div class=\"debug-header\">\r\n        <h3>Game Debug Panel</h3>\r\n        <button @click=\"$emit('close')\" class=\"close-btn\">×</button>\r\n      </div>\r\n      \r\n      <div class=\"debug-content\">\r\n        <div class=\"debug-section\">\r\n          <h4>Game Info</h4>\r\n          <div class=\"debug-item\">\r\n            <span class=\"label\">Game ID:</span>\r\n            <span class=\"value\">{{ gameId }}</span>\r\n          </div>\r\n          <div class=\"debug-item\">\r\n            <span class=\"label\">Status:</span>\r\n            <span class=\"value\">{{ currentGame ? currentGame.status : 'Unknown' }}</span>\r\n          </div>\r\n          <div class=\"debug-item\">\r\n            <span class=\"label\">Players:</span>\r\n            <span class=\"value\">{{ currentGame ? currentGame.players.length : 0 }}</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"debug-section\">\r\n          <h4>Current User</h4>\r\n          <div class=\"debug-item\">\r\n            <span class=\"label\">User ID:</span>\r\n            <span class=\"value\">{{ currentUser ? currentUser.id : 'Not logged in' }}</span>\r\n          </div>\r\n          <div class=\"debug-item\">\r\n            <span class=\"label\">Username:</span>\r\n            <span class=\"value\">{{ currentUser ? currentUser.username : 'Not logged in' }}</span>\r\n          </div>\r\n          <div class=\"debug-item\">\r\n            <span class=\"label\">Is Creator:</span>\r\n            <span class=\"value\">{{ isCreator ? 'Yes' : 'No' }}</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"debug-section\">\r\n          <h4>Socket Status</h4>\r\n          <div class=\"debug-item\">\r\n            <span class=\"label\">Connected:</span>\r\n            <span class=\"value\" :class=\"{ 'status-good': isConnected, 'status-bad': !isConnected }\">\r\n              {{ isConnected ? 'Yes' : 'No' }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"debug-actions\">\r\n          <button @click=\"refreshGameState\" class=\"debug-btn\">Refresh Game State</button>\r\n          <button @click=\"forceStartGame\" class=\"debug-btn\" :disabled=\"!isCreator\">Force Start Game</button>\r\n          <button @click=\"reconnectSocket\" class=\"debug-btn\">Reconnect Socket</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import SocketService from '@/services/SocketService';\r\n  \r\n  export default {\r\n    name: 'GameDebugPanel',\r\n    \r\n    props: {\r\n      enabled: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      gameId: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      currentGame: {\r\n        type: Object,\r\n        default: null\r\n      },\r\n      currentUser: {\r\n        type: Object,\r\n        default: null\r\n      },\r\n      isCreator: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      isConnected: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    \r\n    methods: {\r\n      refreshGameState() {\r\n        if (this.gameId && this.currentUser) {\r\n          console.log('Debug: Requesting game state update');\r\n          SocketService.requestGameUpdate(this.gameId, this.currentUser.id);\r\n          this.$emit('log', 'Debug: Requested game state update');\r\n        }\r\n      },\r\n      \r\n      forceStartGame() {\r\n        if (!this.isCreator) {\r\n          console.log('Debug: Only creator can start game');\r\n          return;\r\n        }\r\n        \r\n        console.log('Debug: Forcing game start');\r\n        this.$emit('forceStart');\r\n      },\r\n      \r\n      reconnectSocket() {\r\n        console.log('Debug: Attempting to reconnect socket');\r\n        SocketService.disconnect();\r\n        \r\n        setTimeout(() => {\r\n          SocketService.init()\r\n            .then(() => {\r\n              if (this.currentUser && this.gameId) {\r\n                SocketService.joinGame(\r\n                  this.gameId,\r\n                  this.currentUser.id,\r\n                  this.currentUser.username\r\n                ).then(() => {\r\n                  this.$emit('log', 'Debug: Socket reconnected and rejoined game');\r\n                }).catch(err => {\r\n                  this.$emit('log', `Debug: Error rejoining game: ${err.message}`);\r\n                });\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.$emit('log', `Debug: Error reconnecting socket: ${err.message}`);\r\n            });\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .debug-panel {\r\n    position: fixed;\r\n    top: 10px;\r\n    right: 10px;\r\n    width: 300px;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n    border: 1px solid #555;\r\n    border-radius: 5px;\r\n    z-index: 1000;\r\n    color: #fff;\r\n    font-family: monospace;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .debug-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 5px 10px;\r\n    background-color: #333;\r\n    border-bottom: 1px solid #555;\r\n  }\r\n  \r\n  .debug-header h3 {\r\n    margin: 0;\r\n    font-size: 14px;\r\n    color: #ff9800;\r\n  }\r\n  \r\n  .close-btn {\r\n    background: none;\r\n    border: none;\r\n    color: #fff;\r\n    font-size: 18px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .debug-content {\r\n    padding: 10px;\r\n    max-height: 500px;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .debug-section {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .debug-section h4 {\r\n    margin: 0 0 5px 0;\r\n    color: #4caf50;\r\n    border-bottom: 1px solid #444;\r\n    padding-bottom: 3px;\r\n  }\r\n  \r\n  .debug-item {\r\n    margin-bottom: 3px;\r\n    display: flex;\r\n  }\r\n  \r\n  .label {\r\n    width: 100px;\r\n    color: #aaa;\r\n  }\r\n  \r\n  .value {\r\n    flex: 1;\r\n    word-break: break-all;\r\n  }\r\n  \r\n  .status-good {\r\n    color: #4caf50;\r\n  }\r\n  \r\n  .status-bad {\r\n    color: #f44336;\r\n  }\r\n  \r\n  .debug-actions {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .debug-btn {\r\n    background-color: #333;\r\n    border: 1px solid #555;\r\n    color: #fff;\r\n    padding: 5px 10px;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n    font-family: monospace;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .debug-btn:hover {\r\n    background-color: #444;\r\n  }\r\n  \r\n  .debug-btn:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n  </style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameDebugPanel.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameDebugPanel.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./GameDebugPanel.vue?vue&type=template&id=63a2e319&scoped=true\"\nimport script from \"./GameDebugPanel.vue?vue&type=script&lang=js\"\nexport * from \"./GameDebugPanel.vue?vue&type=script&lang=js\"\nimport style0 from \"./GameDebugPanel.vue?vue&type=style&index=0&id=63a2e319&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"63a2e319\",\n  null\n  \n)\n\nexport default component.exports","// client/src/utils/PokerHandEvaluator.js\r\n\r\n/**\r\n * Utility for evaluating poker hands\r\n */\r\n\r\n// Card ranks in ascending order of value\r\nconst RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\r\nconst SUITS = ['clubs', 'diamonds', 'hearts', 'spades'];\r\n\r\n// Map ranks to numeric values\r\nconst RANK_VALUES = {};\r\nRANKS.forEach((rank, index) => {\r\n  RANK_VALUES[rank] = index + 2;\r\n});\r\n\r\n/**\r\n * Evaluates a poker hand and returns the hand type and value\r\n * @param {Array} playerCards - Player's hole cards\r\n * @param {Array} communityCards - Community cards on the table\r\n * @returns {Object} The hand evaluation result\r\n */\r\nexport function evaluateHand(playerCards, communityCards) {\r\n  if (!playerCards || !Array.isArray(playerCards) || playerCards.length === 0) {\r\n    return { type: 'Unknown Hand', value: 0, description: 'Unknown Hand' };\r\n  }\r\n\r\n  // Combine player cards and community cards\r\n  const allCards = [...playerCards, ...(communityCards || [])];\r\n  \r\n  // Check if the player folded\r\n  if (playerCards.length === 0 || playerCards[0].rank === 'Folded') {\r\n    return { type: 'Folded', value: 0, description: 'Folded' };\r\n  }\r\n\r\n  // Get all possible 5-card combinations\r\n  const combinations = getCombinations(allCards, 5);\r\n  \r\n  // Evaluate each combination\r\n  const evaluations = combinations.map(combo => {\r\n    return analyzeHand(combo);\r\n  });\r\n  \r\n  // Sort evaluations by hand strength (highest first)\r\n  evaluations.sort((a, b) => b.value - a.value);\r\n  \r\n  // Return the best hand\r\n  return evaluations[0];\r\n}\r\n\r\n/**\r\n * Get all possible combinations of r elements from array\r\n * @param {Array} array - Source array\r\n * @param {Number} r - Size of each combination\r\n * @returns {Array} Array of combinations\r\n */\r\nfunction getCombinations(array, r) {\r\n  const result = [];\r\n  \r\n  // Return empty array for edge cases\r\n  if (r > array.length || r <= 0 || array.length === 0) {\r\n    return result;\r\n  }\r\n  \r\n  // For small arrays and r=5, we can just return all cards if there are exactly 5\r\n  if (array.length === 5 && r === 5) {\r\n    return [array];\r\n  }\r\n  \r\n  // Generate combinations using recursive helper\r\n  function generateCombinations(combination, index) {\r\n    if (combination.length === r) {\r\n      result.push([...combination]);\r\n      return;\r\n    }\r\n    \r\n    for (let i = index; i < array.length; i++) {\r\n      combination.push(array[i]);\r\n      generateCombinations(combination, i + 1);\r\n      combination.pop();\r\n    }\r\n  }\r\n  \r\n  generateCombinations([], 0);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Analyze a 5-card hand and determine its type and value\r\n * @param {Array} cards - Array of 5 card objects\r\n * @returns {Object} Hand evaluation result\r\n */\r\nfunction analyzeHand(cards) {\r\n  if (!cards || !Array.isArray(cards) || cards.length !== 5) {\r\n    return { type: 'Invalid Hand', value: 0, description: 'Invalid Hand' };\r\n  }\r\n  \r\n  // Get rank counts\r\n  const rankCounts = {};\r\n  cards.forEach(card => {\r\n    rankCounts[card.rank] = (rankCounts[card.rank] || 0) + 1;\r\n  });\r\n  \r\n  // Get suit counts\r\n  const suitCounts = {};\r\n  cards.forEach(card => {\r\n    suitCounts[card.suit] = (suitCounts[card.suit] || 0) + 1;\r\n  });\r\n  \r\n  // Check if it's a flush (all same suit)\r\n  const isFlush = Object.values(suitCounts).some(count => count === 5);\r\n  \r\n  // Check if it's a straight (5 consecutive ranks)\r\n  const sortedRanks = cards\r\n    .map(card => RANK_VALUES[card.rank])\r\n    .sort((a, b) => a - b);\r\n  \r\n  let isStraight = true;\r\n  for (let i = 1; i < sortedRanks.length; i++) {\r\n    if (sortedRanks[i] !== sortedRanks[i-1] + 1) {\r\n      isStraight = false;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  // Special case for A-5 straight\r\n  const isLowStraight = \r\n    sortedRanks[0] === 2 && \r\n    sortedRanks[1] === 3 && \r\n    sortedRanks[2] === 4 && \r\n    sortedRanks[3] === 5 && \r\n    sortedRanks[4] === 14; // Ace\r\n  \r\n  if (isLowStraight) {\r\n    isStraight = true;\r\n  }\r\n  \r\n  // Get rank distribution (for pairs, three of a kind, etc.)\r\n  const rankDistribution = Object.values(rankCounts).sort((a, b) => b - a);\r\n  \r\n  // Determine hand type\r\n  let handType = '';\r\n  let handValue = 0;\r\n  let handDescription = '';\r\n  \r\n  // Royal Flush\r\n  if (isFlush && isStraight && sortedRanks[4] === 14 && sortedRanks[0] === 10) {\r\n    handType = 'Royal Flush';\r\n    handValue = 9000;\r\n    handDescription = 'Royal Flush';\r\n  }\r\n  // Straight Flush\r\n  else if (isFlush && isStraight) {\r\n    handType = 'Straight Flush';\r\n    handValue = 8000 + sortedRanks[4];\r\n    handDescription = `Straight Flush, ${RANKS[sortedRanks[4]-2]} high`;\r\n  }\r\n  // Four of a Kind\r\n  else if (rankDistribution[0] === 4) {\r\n    const quadsRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 4);\r\n    handType = 'Four of a Kind';\r\n    handValue = 7000 + RANK_VALUES[quadsRank];\r\n    handDescription = `Four of a Kind, ${quadsRank}s`;\r\n  }\r\n  // Full House\r\n  else if (rankDistribution[0] === 3 && rankDistribution[1] === 2) {\r\n    const tripsRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 3);\r\n    handType = 'Full House';\r\n    handValue = 6000 + RANK_VALUES[tripsRank];\r\n    handDescription = `Full House, ${tripsRank}s full`;\r\n  }\r\n  // Flush\r\n  else if (isFlush) {\r\n    handType = 'Flush';\r\n    handValue = 5000 + sortedRanks[4];\r\n    handDescription = `Flush, ${RANKS[sortedRanks[4]-2]} high`;\r\n  }\r\n  // Straight\r\n  else if (isStraight) {\r\n    handType = 'Straight';\r\n    handValue = 4000 + (isLowStraight ? 5 : sortedRanks[4]);\r\n    handDescription = `Straight, ${isLowStraight ? '5' : RANKS[sortedRanks[4]-2]} high`;\r\n  }\r\n  // Three of a Kind\r\n  else if (rankDistribution[0] === 3) {\r\n    const tripsRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 3);\r\n    handType = 'Three of a Kind';\r\n    handValue = 3000 + RANK_VALUES[tripsRank];\r\n    handDescription = `Three of a Kind, ${tripsRank}s`;\r\n  }\r\n  // Two Pair\r\n  else if (rankDistribution[0] === 2 && rankDistribution[1] === 2) {\r\n    const pairRanks = Object.keys(rankCounts)\r\n      .filter(rank => rankCounts[rank] === 2)\r\n      .sort((a, b) => RANK_VALUES[b] - RANK_VALUES[a]);\r\n    \r\n    handType = 'Two Pair';\r\n    handValue = 2000 + RANK_VALUES[pairRanks[0]] * 10 + RANK_VALUES[pairRanks[1]];\r\n    handDescription = `Two Pair, ${pairRanks[0]}s and ${pairRanks[1]}s`;\r\n  }\r\n  // One Pair\r\n  else if (rankDistribution[0] === 2) {\r\n    const pairRank = Object.keys(rankCounts).find(rank => rankCounts[rank] === 2);\r\n    handType = 'One Pair';\r\n    handValue = 1000 + RANK_VALUES[pairRank];\r\n    handDescription = `One Pair, ${pairRank}s`;\r\n  }\r\n  // High Card\r\n  else {\r\n    handType = 'High Card';\r\n    handValue = sortedRanks[4];\r\n    handDescription = `High Card ${RANKS[sortedRanks[4]-2]}`;\r\n  }\r\n  \r\n  return {\r\n    type: handType,\r\n    value: handValue,\r\n    description: handDescription\r\n  };\r\n}\r\n\r\n/**\r\n * Create a readable description of a hand\r\n * @param {Array} hand - Player's hole cards\r\n * @param {Array} communityCards - Community cards\r\n * @returns {String} Human-readable description\r\n */\r\nexport function getHandDescription(playerCards, communityCards) {\r\n  const evaluation = evaluateHand(playerCards, communityCards);\r\n  return evaluation.description;\r\n}\r\n\r\nexport default {\r\n  evaluateHand,\r\n  getHandDescription\r\n};","// client/src/components/Game/GameHandlers.js\r\n/**\r\n * Socket event handlers for the Game component\r\n */\r\nimport PokerHandEvaluator from \"@/utils/PokerHandEvaluator\";\r\n\r\nexport default {\r\n  /**\r\n   * Create handler objects for socket events\r\n   * @param {Object} component - Vue component instance\r\n   * @returns {Object} Object with handler methods\r\n   */\r\n  createHandlers(component) {\r\n    return {\r\n      /**\r\n       * Handle game update event with real-time UI updates and winner detection\r\n       * @param {Object} gameState - New game state\r\n       */\r\n      handleGameUpdate(gameState) {\r\n        if (!gameState) return;\r\n\r\n        // Check for only one active player before updating state\r\n        const activePlayers = gameState.players\r\n          ? gameState.players.filter((p) => p.isActive && !p.hasFolded)\r\n          : [];\r\n\r\n        // Handle case where only one player is left active\r\n        if (\r\n          gameState.status === \"active\" &&\r\n          activePlayers.length === 1 &&\r\n          component.currentGame &&\r\n          component.currentGame.players &&\r\n          component.currentGame.players.length > 1\r\n        ) {\r\n          const winner = activePlayers[0];\r\n          component.addToLog(\r\n            `${winner.username} wins by default - last player remaining!`\r\n          );\r\n\r\n          // Only show winner display if it's not already showing\r\n          if (!component.showWinnerDisplay) {\r\n            // Create winner data\r\n            component.handWinners = [\r\n              {\r\n                playerId: winner.id,\r\n                username: winner.username,\r\n                handName: \"Last Player Standing\",\r\n                hand:\r\n                  component.currentUser &&\r\n                  winner.id === component.currentUser.id\r\n                    ? component.playerHand\r\n                    : [],\r\n              },\r\n            ];\r\n\r\n            // Set pot amount\r\n            component.winningPot = gameState.pot || 1;\r\n\r\n            // Set fold win flag\r\n            component.isFoldWin = true;\r\n\r\n            // Show winner display\r\n            component.showWinnerDisplay = true;\r\n          }\r\n\r\n          // Now continue with normal update\r\n        }\r\n\r\n        // [Rest of the existing handleGameUpdate function...]\r\n        console.log(\"Updating game state with data:\", {\r\n          id: gameState.id,\r\n          status: gameState.status,\r\n          currentTurn: gameState.currentTurn,\r\n          playerCount: gameState.players?.length || 0,\r\n          bettingRound: gameState.bettingRound,\r\n        });\r\n\r\n        // Make sure important fields are present\r\n        const enhancedGameState = { ...gameState };\r\n\r\n        // Force status to 'active' if players have cards but status doesn't reflect it\r\n        if (\r\n          gameState.players &&\r\n          gameState.players.some((p) => p.hasCards) &&\r\n          gameState.status !== \"active\"\r\n        ) {\r\n          console.log(\r\n            \"Players have cards but game status is not active; forcing to active\"\r\n          );\r\n          enhancedGameState.status = \"active\";\r\n        }\r\n\r\n        // Add creator info if it's missing but we previously had it\r\n        if (\r\n          !gameState.creator &&\r\n          component.currentGame &&\r\n          component.currentGame.creator\r\n        ) {\r\n          console.log(\"Preserving creator info that was missing in update\");\r\n          enhancedGameState.creator = component.currentGame.creator;\r\n        }\r\n\r\n        // IMPORTANT: Check if it's no longer the current user's turn - if so, clear turn state\r\n        if (\r\n          component.isYourTurn &&\r\n          component.currentUser &&\r\n          gameState.currentTurn &&\r\n          gameState.currentTurn !== component.currentUser.id\r\n        ) {\r\n          console.log(\r\n            \"Game state indicates it is no longer your turn, updating UI\"\r\n          );\r\n          component.endTurn();\r\n        }\r\n\r\n        // Update the game state in store\r\n        component.updateGameState(enhancedGameState);\r\n\r\n        // If this update includes turn info and it's the current user's turn,\r\n        // make sure the isYourTurn flag is set\r\n        if (\r\n          component.currentUser &&\r\n          gameState.currentTurn &&\r\n          gameState.currentTurn === component.currentUser.id &&\r\n          !component.isYourTurn\r\n        ) {\r\n          console.log(\r\n            \"Game state shows it is your turn, updating isYourTurn flag\"\r\n          );\r\n          component.yourTurn({\r\n            options: component.getDefaultOptions\r\n              ? component.getDefaultOptions()\r\n              : [\"fold\", \"check\", \"call\", \"bet\", \"raise\"],\r\n          });\r\n        }\r\n\r\n        // Clear any error message once we successfully receive game state\r\n        component.SET_ERROR_MESSAGE(\"\");\r\n\r\n        // Log connection status\r\n        if (!component.isConnected) {\r\n          component.isConnected = true;\r\n          component.addToLog(\"Connected to game server\");\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle game started event\r\n       * @param {Object} gameState - Game state after starting\r\n       */\r\n      handleGameStarted(gameState) {\r\n        console.log(\"Game started event received:\", gameState);\r\n\r\n        // Make sure the game state has a status of 'active'\r\n        if (gameState && gameState.status !== \"active\") {\r\n          gameState.status = \"active\";\r\n        }\r\n\r\n        component.updateGameState(gameState);\r\n        component.addToLog(\"Game has started!\");\r\n\r\n        // Mark game as in progress\r\n        component.gameInProgress = true;\r\n\r\n        // Request another update to ensure all clients are in sync\r\n        setTimeout(() => {\r\n          component.requestStateUpdate();\r\n        }, 800);\r\n\r\n        // Clear any error messages\r\n        component.clearErrorMessage();\r\n      },\r\n\r\n      /**\r\n       * Handle player joined event\r\n       * @param {Object} data - Player data\r\n       */\r\n      handlePlayerJoined(data) {\r\n        if (!data || !data.username) {\r\n          console.warn(\"Received playerJoined event with invalid data:\", data);\r\n          return;\r\n        }\r\n\r\n        console.log(\"Player joined event received:\", data);\r\n        component.addToLog(`${data.username} joined the game`);\r\n\r\n        // Update player list with automatic refresh\r\n        setTimeout(() => {\r\n          component.requestStateUpdate();\r\n        }, 300);\r\n      },\r\n\r\n      /**\r\n       * Handle player left event with fold/winner detection\r\n       * @param {Object} data - Player data\r\n       */\r\n      handlePlayerLeft(data) {\r\n        component.addToLog(`${data.username} left the game`);\r\n\r\n        // Check if there's only one player left and game is active\r\n        if (\r\n          component.currentGame &&\r\n          component.currentGame.status === \"active\"\r\n        ) {\r\n          const activePlayers = component.currentGame.players.filter(\r\n            (p) => p.isActive && !p.hasFolded\r\n          );\r\n\r\n          // If only one active player remains, they win by default\r\n          if (activePlayers.length === 1) {\r\n            const winner = activePlayers[0];\r\n            component.addToLog(\r\n              `${winner.username} wins by default - last player remaining!`\r\n            );\r\n\r\n            // Only show winner display if it's not already showing\r\n            if (!component.showWinnerDisplay) {\r\n              // Prepare winner data\r\n              component.handWinners = [\r\n                {\r\n                  playerId: winner.id,\r\n                  username: winner.username,\r\n                  handName: \"Last Player Standing\",\r\n                  hand:\r\n                    component.currentUser &&\r\n                    winner.id === component.currentUser.id\r\n                      ? component.playerHand\r\n                      : [],\r\n                },\r\n              ];\r\n\r\n              // Prepare pot amount - use current game pot or a minimum value\r\n              component.winningPot = component.currentGame.pot || 1;\r\n\r\n              // Set flag for fold win\r\n              component.isFoldWin = true;\r\n\r\n              // Show the winner display\r\n              component.showWinnerDisplay = true;\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle chat message event\r\n       * @param {Object} message - Chat message data\r\n       */\r\n      handleChatMessage(message) {\r\n        // If it's a system message, add to game log\r\n        if (message.type === \"system\") {\r\n          component.addToLog(message.message);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle cards being dealt with improved update\r\n       * @param {Object} data - Card data\r\n       */\r\n      /**\r\n       * Handle cards being dealt with improved update and error handling\r\n       * @param {Object} data - Card data\r\n       */\r\n      handleDealCards(data) {\r\n        console.log(\"Received cards:\", data);\r\n\r\n        // Make sure the hand property exists and is an array\r\n        if (!data || !data.hand || !Array.isArray(data.hand)) {\r\n          console.warn(\"Received invalid card data:\", data);\r\n          data = { hand: [] };\r\n        }\r\n\r\n        // Force clear any existing cards first to ensure update\r\n        component.playerHand = [];\r\n\r\n        // Small delay to ensure state reset before setting new cards\r\n        setTimeout(() => {\r\n          // Apply the new cards\r\n          component.playerHand = data.hand;\r\n          component.addToLog(\"You have been dealt new cards\");\r\n\r\n          // Force UI update\r\n          component.$forceUpdate();\r\n\r\n          // Mark game as initialized when we get cards\r\n          component.gameInitialized = true;\r\n          component.gameInProgress = true;\r\n\r\n          // Force the currentGame status to be 'active' if it's not already\r\n          if (\r\n            component.currentGame &&\r\n            component.currentGame.status !== \"active\"\r\n          ) {\r\n            component.$set(component.currentGame, \"status\", \"active\");\r\n            component.addToLog(\"Game status updated to active\");\r\n          }\r\n\r\n          // Clear any lingering error messages\r\n          component.clearErrorMessage();\r\n\r\n          // Request a full game state update to ensure UI is in sync\r\n          setTimeout(() => {\r\n            component.requestStateUpdate();\r\n          }, 500);\r\n        }, 100);\r\n      },\r\n\r\n      /**\r\n       * Handle your turn event with better lifecycle and validation\r\n       * @param {Object} data - Turn data with available options\r\n       */\r\n      handleYourTurn(data) {\r\n        if (\r\n          component.currentGame &&\r\n          component.currentGame.status === \"waiting\"\r\n        ) {\r\n          console.log(\r\n            \"Received yourTurn event but game is in waiting status - ignoring\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        // Check if we're already processing a turn or the state doesn't match\r\n        if (component.currentGame && component.currentUser) {\r\n          const currentTurnId = component.currentGame.currentTurn;\r\n          const userId = component.currentUser.id;\r\n\r\n          // Validate that this turn matches the game state\r\n          if (currentTurnId && userId && currentTurnId !== userId) {\r\n            console.warn(\r\n              \"Received yourTurn event but game state says it's not our turn!\",\r\n              {\r\n                userTurn: userId,\r\n                gameTurn: currentTurnId,\r\n              }\r\n            );\r\n\r\n            // Request fresh state to ensure synchronization\r\n            setTimeout(() => {\r\n              component.requestStateUpdate();\r\n            }, 300);\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Prevent duplicate processing in quick succession\r\n        if (component.isYourTurnProcessed) {\r\n          console.log(\"Already processed yourTurn, ignoring duplicate\");\r\n          return;\r\n        }\r\n\r\n        console.log(\"Your turn event received:\", data);\r\n\r\n        // Update the UI state before adding to log to ensure fast UI response\r\n        component.yourTurn(data);\r\n\r\n        // Need to set component local state directly too for immediate UI update\r\n        component.isYourTurn = true;\r\n\r\n        component.addToLog(\"It is your turn\");\r\n\r\n        // Make sure UI shows game is active\r\n        if (\r\n          component.currentGame &&\r\n          component.currentGame.status !== \"active\"\r\n        ) {\r\n          component.$set(component.currentGame, \"status\", \"active\");\r\n        }\r\n\r\n        // Mark game as initialized\r\n        component.gameInitialized = true;\r\n        component.gameInProgress = true;\r\n\r\n        // Start action timer with the timeLimit from data or default to 60 seconds\r\n        component.startActionTimer(data.timeLimit || 60);\r\n\r\n        // Set flag to avoid duplicate processing\r\n        component.isYourTurnProcessed = true;\r\n\r\n        // Reset the flag after a delay\r\n        setTimeout(() => {\r\n          component.isYourTurnProcessed = false;\r\n        }, 3000);\r\n      },\r\n\r\n      /**\r\n       * Handle turn changed event\r\n       * @param {Object} data - Turn data\r\n       */\r\n      handleTurnChanged(data) {\r\n        // Add to log when someone else's turn starts\r\n        if (\r\n          !component.currentUser ||\r\n          data.playerId !== component.currentUser.id\r\n        ) {\r\n          component.addToLog(`It is ${data.username}'s turn`);\r\n        } else {\r\n          // It's our turn!\r\n          component.addToLog(`It is your turn`);\r\n\r\n          // Ensure the isYourTurn flag is set\r\n          if (!component.isYourTurn) {\r\n            component.yourTurn({\r\n              options: component.getDefaultOptions\r\n                ? component.getDefaultOptions()\r\n                : [\"fold\", \"check\", \"call\", \"bet\", \"raise\"],\r\n            });\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle action taken event with better feedback\r\n       * @param {Object} data - Action data\r\n       */\r\n      handleActionTaken(data) {\r\n        // Immediately check if it was the current user's action\r\n        const isCurrentUser =\r\n          component.currentUser && data.playerId === component.currentUser.id;\r\n\r\n        // If it was current user's action, make sure UI is updated\r\n        if (isCurrentUser) {\r\n          // Force end turn for responsive UI\r\n          component.endTurn();\r\n        }\r\n\r\n        // Log actions from other players\r\n        if (!isCurrentUser) {\r\n          const player = component.currentGame?.players?.find(\r\n            (p) => p.id === data.playerId\r\n          );\r\n          const playerName = player ? player.username : \"Unknown\";\r\n\r\n          let actionText = `${playerName} ${data.action}s`;\r\n          if (\r\n            data.action === \"bet\" ||\r\n            data.action === \"raise\" ||\r\n            data.action === \"allIn\"\r\n          ) {\r\n            actionText += ` ${data.amount} chips`;\r\n          }\r\n\r\n          component.addToLog(actionText);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle flop dealt event\r\n       */\r\n      handleDealFlop() {\r\n        component.addToLog(\"Flop is dealt\");\r\n      },\r\n\r\n      /**\r\n       * Handle turn card dealt event\r\n       */\r\n      handleDealTurn() {\r\n        component.addToLog(\"Turn is dealt\");\r\n      },\r\n\r\n      /**\r\n       * Handle river card dealt event\r\n       */\r\n      handleDealRiver() {\r\n        component.addToLog(\"River is dealt\");\r\n      },\r\n\r\n      /**\r\n       * Handle hand result event with enhanced hand evaluation\r\n       * @param {Object} result - Hand result data\r\n       */\r\n      handleHandResult(result) {\r\n        console.log(\"Received hand result:\", result);\r\n\r\n        // Add safety checks and debug info for hand result processing\r\n        if (!result) {\r\n          console.error(\"Hand result is empty or invalid\");\r\n          return;\r\n        }\r\n\r\n        // Deep inspect the result to see what we're receiving\r\n        console.log(\"Winners array:\", JSON.stringify(result.winners));\r\n        console.log(\r\n          \"All players cards:\",\r\n          JSON.stringify(result.allPlayersCards)\r\n        );\r\n        console.log(\"Community cards:\", JSON.stringify(result.communityCards));\r\n        console.log(\"Pot amount:\", result.pot);\r\n        console.log(\"Is fold win:\", result.isFoldWin);\r\n\r\n        // Make sure winners array exists and is properly formatted\r\n        if (\r\n          !result.winners ||\r\n          !Array.isArray(result.winners) ||\r\n          result.winners.length === 0\r\n        ) {\r\n          console.error(\"No valid winners in result data\");\r\n          return;\r\n        }\r\n\r\n        // Create a safe copy of the winners with default values for missing properties\r\n        const safeWinners = result.winners.map((winner) => ({\r\n          playerId: winner.playerId || \"unknown\",\r\n          username: winner.username || \"Unknown Player\",\r\n          handName: winner.handName || \"Unknown Hand\",\r\n          hand: Array.isArray(winner.hand) ? winner.hand : [],\r\n        }));\r\n\r\n        // Process all players' cards and properly evaluate their hands\r\n        const allPlayersCards = Array.isArray(result.allPlayersCards)\r\n          ? result.allPlayersCards.map((player) => {\r\n              // Process player hand and evaluate it properly\r\n              const playerHand = Array.isArray(player.hand) ? player.hand : [];\r\n              const commCards = Array.isArray(result.communityCards)\r\n                ? result.communityCards\r\n                : [];\r\n\r\n              // Only evaluate if we have valid cards\r\n              let handType = \"Unknown\";\r\n              let handDescription = \"Unknown Hand\";\r\n\r\n              if (playerHand.length > 0) {\r\n                const evaluation = component.evaluateHand\r\n                  ? component.evaluateHand(playerHand, commCards)\r\n                  : { type: \"Unknown\", description: \"Unknown Hand\" };\r\n                handType = evaluation.type;\r\n                handDescription = evaluation.description;\r\n              } else if (player.handName === \"Folded\") {\r\n                handType = \"Folded\";\r\n                handDescription = \"Folded\";\r\n              }\r\n\r\n              return {\r\n                playerId: player.playerId || \"unknown\",\r\n                username: player.username || \"Unknown Player\",\r\n                handName: handDescription, // Use the evaluated hand name\r\n                handType: handType,\r\n                hand: playerHand,\r\n                isWinner:\r\n                  player.isWinner ||\r\n                  safeWinners.some((w) => w.playerId === player.playerId),\r\n              };\r\n            })\r\n          : [];\r\n\r\n        // Store community cards if provided\r\n        const communityCards = Array.isArray(result.communityCards)\r\n          ? result.communityCards\r\n          : [];\r\n\r\n        // Safely set the data on the component\r\n        component.handWinners = safeWinners;\r\n        component.allPlayersCards = allPlayersCards;\r\n        component.communityCards = communityCards;\r\n        component.winningPot = result?.pot || 0;\r\n        component.isFoldWin = result?.isFoldWin || false;\r\n        component.showWinnerDisplay = true;\r\n\r\n        // Format winner names for log\r\n        const winnerNames = safeWinners\r\n          .map((winner) => winner.username)\r\n          .join(\", \");\r\n\r\n        // Create appropriate log message\r\n        let logMessage = `Hand complete. Winner(s): ${winnerNames}`;\r\n        if (result.isFoldWin) {\r\n          logMessage = `${winnerNames} wins by fold`;\r\n        }\r\n\r\n        component.addToLog(logMessage);\r\n\r\n        // IMPORTANT: Clear player hand to prevent it from showing during the waiting state\r\n        // Keep a reference for the winner display but clear it for the next hand\r\n        component.previousPlayerHand = [...component.playerHand];\r\n        component.playerHand = [];\r\n\r\n        // Force UI update\r\n        component.forceCardUpdate();\r\n\r\n        // IMPORTANT FIX: If this is a fold win or last player standing, make sure to end any active turns\r\n        if (result.isFoldWin || result.winners.length === 1) {\r\n          component.endTurn();\r\n\r\n          // Ensure isYourTurn flag is reset and action timer is cleared\r\n          component.isYourTurn = false;\r\n          component.clearActionTimer();\r\n\r\n          // If the current game state isn't already waiting, update it locally to avoid turn confusion\r\n          if (\r\n            component.currentGame &&\r\n            component.currentGame.status !== \"waiting\"\r\n          ) {\r\n            component.$set(component.currentGame, \"status\", \"waiting\");\r\n          }\r\n\r\n          // This helps prevent the \"your turn\" message after a fold win\r\n          component.isYourTurnProcessed = false;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle new hand event\r\n       * @param {Object} gameState - New game state\r\n       */\r\n      handleNewHand(gameState) {\r\n        component.addToLog(\"Starting a new hand\");\r\n        component.updateGameState(gameState);\r\n      },\r\n\r\n      /**\r\n       * Handle game ended event\r\n       * @param {Object} data - Game end data\r\n       */\r\n      handleGameEnded(data) {\r\n        console.log(`Game ended: ${data.message}`);\r\n\r\n        // If this is a \"Chip e entek\" message, handle differently\r\n        if (data.message && data.message.includes(\"Chip e entek\")) {\r\n          // This is a case where some players might still be able to play\r\n          // Check if the current user has chips\r\n          const currentPlayer = this.getCurrentPlayer();\r\n\r\n          if (currentPlayer && currentPlayer.totalChips <= 0) {\r\n            // This player has no chips, they need to go back to lobby\r\n            this.addToLog(\r\n              `Game ended: ${data.message} - You have no chips left!`\r\n            );\r\n          } else {\r\n            // This player still has chips, they can continue\r\n            this.addToLog(\r\n              `Game paused: Some players have no chips left. Ready up to continue playing.`\r\n            );\r\n          }\r\n        } else {\r\n          // Normal game ended message\r\n          this.addToLog(`Game ended: ${data.message}`);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle game error event\r\n       * @param {Object} data - Error data\r\n       */\r\n      handleGameError(data) {\r\n        // Don't set error if game is already in progress - might be recoverable\r\n        if (\r\n          component.gameInProgress &&\r\n          component.playerHand &&\r\n          component.playerHand.length > 0\r\n        ) {\r\n          component.addToLog(`Warning: ${data.message} (game continuing)`);\r\n        } else {\r\n          component.SET_ERROR_MESSAGE(data.message);\r\n          component.addToLog(`Error: ${data.message}`);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle creator info event\r\n       * @param {Object} data - Creator info data\r\n       */\r\n      handleCreatorInfo(data) {\r\n        console.log(\"Received creator info:\", data);\r\n\r\n        // If creator info isn't in the game data, add it\r\n        if (\r\n          component.currentGame &&\r\n          !component.currentGame.creator &&\r\n          data.creator\r\n        ) {\r\n          component.$set(component.currentGame, \"creator\", data.creator);\r\n          component.addToLog(\"Creator info received and updated\");\r\n        }\r\n\r\n        // Store explicit creator status in case computed property fails\r\n        component.explicitIsCreator = data.isCreator;\r\n      },\r\n      /**\r\n       * Handle clear player hands event\r\n       * @param {Object} data - Event data with timestamp\r\n       */\r\n      handleClearPlayerHands(data) {\r\n        console.log(\"Received clearPlayerHands event:\", data);\r\n\r\n        // Store the previous hand for reference in winner display\r\n        component.previousPlayerHand = [...component.playerHand];\r\n\r\n        // Clear the current hand\r\n        component.playerHand = [];\r\n\r\n        // Add to log if needed\r\n        if (data && data.message) {\r\n          component.addToLog(data.message);\r\n        }\r\n\r\n        // Force UI update\r\n        component.$forceUpdate();\r\n\r\n        // Update the player list component if it exists\r\n        if (\r\n          component.$refs.playerList &&\r\n          typeof component.$refs.playerList.forceUpdate === \"function\"\r\n        ) {\r\n          component.$refs.playerList.forceUpdate();\r\n        }\r\n      },\r\n      /**\r\n       * Handle creator change event\r\n       * @param {Object} data - Creator change data\r\n       */\r\n      handleCreatorChanged(data) {\r\n        console.log(\"Creator changed:\", data);\r\n\r\n        // Update the creator information in the current game\r\n        if (component.currentGame) {\r\n          // Check if we have a creator property\r\n          if (!component.currentGame.creator) {\r\n            component.currentGame.creator = {};\r\n          }\r\n\r\n          // Update creator info with the new creator\r\n          component.currentGame.creator = {\r\n            user: data.newCreator.userId,\r\n            username: data.newCreator.username,\r\n          };\r\n\r\n          // Force reactivity\r\n          component.$forceUpdate();\r\n\r\n          // Check if the current user is the new creator\r\n          const isNewCreator =\r\n            component.currentUser &&\r\n            component.currentUser.id === data.newCreator.userId;\r\n\r\n          if (isNewCreator) {\r\n            component.explicitIsCreator = true;\r\n          }\r\n\r\n          // Add to game log\r\n          component.addToLog(\r\n            `${data.previousCreator.username} is no longer the creator. ${data.newCreator.username} is now the creator. Reason: ${data.reason}`\r\n          );\r\n\r\n          // Request a game state update to ensure UI is up to date\r\n          component.requestStateUpdate();\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Handle becoming the creator\r\n       * @param {Object} data - Notification data\r\n       */\r\n      handleBecameCreator(data) {\r\n        console.log(\"Became creator:\", data);\r\n\r\n        // Update the component state\r\n        component.explicitIsCreator = true;\r\n\r\n        // Show notification to user\r\n        component.addToLog(`You are now the game creator! ${data.message}`);\r\n\r\n        // Show a more prominent alert\r\n        alert(`You are now the game creator! ${data.message}`);\r\n\r\n        // Request a game state update\r\n        component.requestStateUpdate();\r\n      },\r\n\r\n      /**\r\n       * Handle player removed event\r\n       * @param {Object} data - Player removal data\r\n       */\r\n      handlePlayerRemoved(data) {\r\n        console.log(\"Player removed:\", data);\r\n\r\n        // Add to game log\r\n        component.addToLog(\r\n          `${data.username} has been removed from the game. Reason: ${data.reason}`\r\n        );\r\n\r\n        // If it's the current user\r\n        if (component.currentUser && data.userId === component.currentUser.id) {\r\n          // Show a notification\r\n          alert(`You've been removed from the game: ${data.reason}`);\r\n\r\n          // If the reason includes \"insufficient chips\", update UI\r\n          if (data.reason.includes(\"insufficient chips\")) {\r\n            component.SET_ERROR_MESSAGE(\r\n              \"You've been removed from the game due to insufficient chips\"\r\n            );\r\n\r\n            // Set observer mode\r\n            component.isObserver = true;\r\n            component.observerMessage =\r\n              \"You don't have enough chips to continue playing. You are now in observer mode.\";\r\n\r\n            // If it was the user's turn, end it\r\n            if (component.isYourTurn) {\r\n              component.endTurn();\r\n            }\r\n          }\r\n        }\r\n\r\n        // Request updated game state\r\n        component.requestStateUpdate();\r\n      },\r\n    };\r\n  },\r\n};\r\n","// client/src/utils/gameUtils.js\r\n/**\r\n * Utility functions for the game functionality\r\n */\r\n\r\n/**\r\n * Format a card for display\r\n * @param {Object} card - Card object with suit and rank\r\n * @returns {String} Formatted card representation\r\n */\r\nexport const formatCard = (card) => {\r\n    if (!card) return '?';\r\n  \r\n    const suitSymbols = {\r\n      hearts: '♥',\r\n      diamonds: '♦',\r\n      clubs: '♣',\r\n      spades: '♠'\r\n    };\r\n  \r\n    return `${card.rank}${suitSymbols[card.suit]}`;\r\n  };\r\n  \r\n  /**\r\n   * Generate default player options\r\n   * @returns {Array} Default player action options\r\n   */\r\n  export const getDefaultOptions = () => {\r\n    // Return the basic actions a player might have\r\n    return ['fold', 'check', 'call', 'bet', 'raise'];\r\n  };\r\n  \r\n  /**\r\n   * De-duplicate log messages within a timeframe\r\n   * @param {Array} lastLogMessages - Array of recent messages\r\n   * @param {String} message - New message to check\r\n   * @param {Number} dedupeTime - Time window for deduplication in ms\r\n   * @returns {Boolean} True if message is a duplicate\r\n   */\r\n  export const isDuplicateLogMessage = (lastLogMessages, message, dedupeTime) => {\r\n    const now = Date.now();\r\n    return lastLogMessages.some(item =>\r\n      item.message === message && (now - item.time < dedupeTime)\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Add a message to the game log with timestamp and deduplication\r\n   * @param {Array} gameLog - Game log array\r\n   * @param {Array} lastLogMessages - Array for tracking recent messages\r\n   * @param {String} message - Message to add to log\r\n   * @param {Number} messageDedupeTime - Time window for deduplication\r\n   * @returns {Object} Updated log data\r\n   */\r\n  export const addToGameLog = (gameLog, lastLogMessages, message, messageDedupeTime) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    const now = Date.now();\r\n  \r\n    // Initialize tracking array if needed\r\n    const logTracking = lastLogMessages || [];\r\n  \r\n    // Don't add the exact same message within the deduplication window\r\n    const isDuplicate = isDuplicateLogMessage(logTracking, message, messageDedupeTime);\r\n  \r\n    if (isDuplicate) {\r\n      console.log(`Suppressed duplicate log message: ${message}`);\r\n      return { gameLog, lastLogMessages: logTracking };\r\n    }\r\n  \r\n    // Add to tracking list for deduplication\r\n    logTracking.push({\r\n      message,\r\n      time: now\r\n    });\r\n  \r\n    // Maintain the tracking list size\r\n    if (logTracking.length > 10) {\r\n      logTracking.shift();\r\n    }\r\n  \r\n    // Add the message to the actual log\r\n    const updatedLog = [`[${timestamp}] ${message}`, ...gameLog];\r\n  \r\n    // Keep log at reasonable size\r\n    if (updatedLog.length > 50) {\r\n      updatedLog.pop();\r\n    }\r\n  \r\n    return {\r\n      gameLog: updatedLog,\r\n      lastLogMessages: logTracking\r\n    };\r\n  };","var render = function render(){var _vm=this,_c=_vm._self._c;return (_vm.isGameActive && _vm.timeRemaining > 0)?_c('div',{staticClass:\"action-timer\"},[_c('div',{staticClass:\"timer-bar\"},[_c('div',{staticClass:\"timer-progress\",style:({ width: _vm.progressPercentage + '%', backgroundColor: _vm.timerColor })})]),_c('div',{staticClass:\"timer-text\"},[_vm._v(\" \"+_vm._s(_vm.timeRemaining)+\" seconds to act \")])]):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/Game/ActionTimer.vue -->\r\n<template>\r\n  <div class=\"action-timer\" v-if=\"isGameActive && timeRemaining > 0\">\r\n    <div class=\"timer-bar\">\r\n      <div \r\n        class=\"timer-progress\" \r\n        :style=\"{ width: progressPercentage + '%', backgroundColor: timerColor }\"\r\n      ></div>\r\n    </div>\r\n    <div class=\"timer-text\">\r\n      {{ timeRemaining }} seconds to act\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ActionTimer',\r\n  \r\n  props: {\r\n    initialTime: {\r\n      type: Number,\r\n      default: 60\r\n    },\r\n    isActive: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    currentGame: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      timeRemaining: 0,\r\n      timerInterval: null\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    progressPercentage() {\r\n      return (this.timeRemaining / this.initialTime) * 100;\r\n    },\r\n    \r\n    timerColor() {\r\n      if (this.timeRemaining <= 10) {\r\n        return '#e74c3c'; // Red for last 10 seconds\r\n      } else if (this.timeRemaining <= 20) {\r\n        return '#f39c12'; // Orange for 11-20 seconds\r\n      } else {\r\n        return '#2ecc71'; // Green for remaining time\r\n      }\r\n    },\r\n    \r\n    isGameActive() {\r\n      return this.currentGame && this.currentGame.status === 'active';\r\n    }\r\n  },\r\n  \r\n  watch: {\r\n    isActive(newValue) {\r\n      if (newValue && this.isGameActive) {\r\n        this.startTimer();\r\n      } else {\r\n        this.stopTimer();\r\n      }\r\n    },\r\n    \r\n    initialTime(newValue) {\r\n      if (this.isActive && this.isGameActive) {\r\n        this.timeRemaining = newValue;\r\n        this.restartTimer();\r\n      }\r\n    },\r\n    \r\n    'currentGame.status'(newStatus) {\r\n      if (newStatus !== 'active') {\r\n        this.stopTimer();\r\n      } else if (this.isActive) {\r\n        this.startTimer();\r\n      }\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    if (this.isActive && this.isGameActive) {\r\n      this.startTimer();\r\n    }\r\n  },\r\n  \r\n  beforeDestroy() {\r\n    this.stopTimer();\r\n  },\r\n  \r\n  methods: {\r\n    startTimer() {\r\n      this.stopTimer(); // Clear any existing timer\r\n      \r\n      if (!this.isGameActive) {\r\n        console.log('Cannot start timer - game is not active');\r\n        return;\r\n      }\r\n      \r\n      this.timeRemaining = this.initialTime;\r\n      \r\n      this.timerInterval = setInterval(() => {\r\n        if (this.timeRemaining > 0) {\r\n          this.timeRemaining--;\r\n        } else {\r\n          this.stopTimer();\r\n          this.$emit('timerComplete');\r\n        }\r\n      }, 1000);\r\n    },\r\n    \r\n    stopTimer() {\r\n      if (this.timerInterval) {\r\n        clearInterval(this.timerInterval);\r\n        this.timerInterval = null;\r\n      }\r\n    },\r\n    \r\n    restartTimer() {\r\n      this.stopTimer();\r\n      if (this.isGameActive) {\r\n        this.startTimer();\r\n      }\r\n    },\r\n    \r\n    resetTimer() {\r\n      this.timeRemaining = this.initialTime;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.action-timer {\r\n  width: 100%;\r\n  max-width: 300px;\r\n  margin: 0 auto 10px;\r\n}\r\n\r\n.timer-bar {\r\n  height: 8px;\r\n  background-color: #333;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.timer-progress {\r\n  height: 100%;\r\n  transition: width 1s linear, background-color 1s;\r\n}\r\n\r\n.timer-text {\r\n  font-size: 14px;\r\n  color: white;\r\n  text-align: center;\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ActionTimer.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ActionTimer.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ActionTimer.vue?vue&type=template&id=204ef513&scoped=true\"\nimport script from \"./ActionTimer.vue?vue&type=script&lang=js\"\nexport * from \"./ActionTimer.vue?vue&type=script&lang=js\"\nimport style0 from \"./ActionTimer.vue?vue&type=style&index=0&id=204ef513&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"204ef513\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return (_vm.visible)?_c('div',{staticClass:\"winner-display\"},[_c('div',{staticClass:\"winner-overlay\"}),_c('div',{staticClass:\"winner-content\"},[_c('h2',{staticClass:\"winner-title\"},[(_vm.winners && _vm.winners.length === 1)?_c('span',[_vm._v(\"Winner!\")]):(_vm.winners && _vm.winners.length > 1)?_c('span',[_vm._v(\"Split Pot!\")]):_c('span',[_vm._v(\"Game Result\")])]),_c('div',{staticClass:\"community-cards-section\"},[_c('h3',[_vm._v(\"Community Cards\")]),(_vm.isFoldWin && !_vm.displayCommunityCards.length)?_c('div',{staticClass:\"fold-win-message\"},[_vm._v(\" Hand ended early - other player(s) folded or left \")]):(!_vm.displayCommunityCards.length)?_c('div',{staticClass:\"fold-win-message\"},[_vm._v(\" No community cards \")]):_c('div',{staticClass:\"community-cards\"},_vm._l((_vm.displayCommunityCards),function(card,index){return _c('div',{key:'community-' + index,staticClass:\"card-display community-card\",attrs:{\"data-suit\":card.suit}},[_vm._v(\" \"+_vm._s(_vm.formatCard(card))+\" \")])}),0)]),_c('div',{staticClass:\"all-players-section\"},[_c('h3',[_vm._v(\"Players' Hands\")]),_c('div',{staticClass:\"players-grid\"},_vm._l((_vm.processedPlayers),function(player){return _c('div',{key:player.playerId,staticClass:\"player-result\",class:{ 'winner-result': player.isWinner, 'folded-player': player.handType === 'Folded' }},[_c('div',{staticClass:\"player-name-heading\"},[_vm._v(\" \"+_vm._s(player.username)+\" \"),(player.isWinner)?_c('span',{staticClass:\"winner-badge\"},[_vm._v(\"Winner\")]):_vm._e(),(player.handType === 'Folded')?_c('span',{staticClass:\"folded-badge\"},[_vm._v(\"Folded\")]):_vm._e()]),_c('div',{staticClass:\"player-hand-name\"},[_vm._v(_vm._s(player.handDescription))]),(player.handType === 'Folded')?_c('div',{staticClass:\"folded-message\"},[_vm._v(\" Player folded their hand \")]):_c('div',{staticClass:\"player-cards\"},[_vm._l((player.hand),function(card,cardIndex){return _c('div',{key:'player-' + player.playerId + '-card-' + cardIndex,staticClass:\"card-display\",class:{ 'winning-card': player.isWinner },attrs:{\"data-suit\":card.suit}},[_vm._v(\" \"+_vm._s(_vm.formatCard(card))+\" \")])}),(player.hand.length === 0)?_c('div',{staticClass:\"no-cards\"},[_vm._v(\" Cards not shown \")]):_vm._e()],2)])}),0)]),(_vm.winners && _vm.winners.length > 0)?_c('div',{staticClass:\"winner-info\"},[_c('div',{staticClass:\"winner-pot\"},[(_vm.winners.length === 1 && _vm.isFoldWin && _vm.pot > 0)?_c('span',[_vm._v(\" \"+_vm._s(_vm.winners[0].username)+\" wins \"+_vm._s(_vm.pot)+\" chips (last player standing) \")]):(_vm.winners.length === 1 && _vm.pot > 0)?_c('span',[_vm._v(\" \"+_vm._s(_vm.winners[0].username)+\" won \"+_vm._s(_vm.pot)+\" chips \")]):(_vm.winners.length > 1 && _vm.pot > 0)?_c('span',[_vm._v(\" Split pot: \"+_vm._s(_vm.winners.map(w => w.username).join(', '))+\" each won \"+_vm._s(_vm.splitPotAmount(_vm.winners[0]))+\" chips \")]):(!_vm.pot || _vm.pot <= 0)?_c('span',{staticClass:\"error-message\"},[_vm._v(\" Error: No pot amount available. Please refresh the game page. \")]):_vm._e()])]):_vm._e(),_c('div',{staticClass:\"ready-up-section\"},[_c('p',{staticClass:\"ready-message\"},[_vm._v(\"Please ready up for the next hand\")]),_c('button',{staticClass:\"ready-btn\",class:{ 'ready-confirm': _vm.isCurrentPlayerReady },on:{\"click\":_vm.toggleReady}},[_vm._v(\" \"+_vm._s(_vm.isCurrentPlayerReady ? 'I\\'m Ready ✓' : 'Mark as Ready')+\" \")]),(_vm.readySummary)?_c('p',{staticClass:\"ready-info\"},[_vm._v(_vm._s(_vm.readySummary))]):_vm._e(),(_vm.isCreator && _vm.areEnoughPlayersReady)?_c('div',{staticClass:\"start-next-hand\"},[_c('button',{staticClass:\"start-next-hand-btn\",on:{\"click\":_vm.emitStartNextHand}},[_vm._v(\" Start Next Hand \")])]):_vm._e(),(_vm.currentGame && _vm.currentGame.status === 'active')?_c('p',{staticClass:\"warning-message\"},[_vm._v(\" Warning: Game state is inconsistent. Please refresh the page if issues persist. \")]):_vm._e()]),_c('button',{staticClass:\"close-display-btn\",on:{\"click\":_vm.closeWinnerDisplay}},[_vm._v(\"Close\")])])]):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- client/src/components/Game/WinnerDisplay.vue -->\r\n<template>\r\n  <div class=\"winner-display\" v-if=\"visible\">\r\n    <div class=\"winner-overlay\"></div>\r\n    <div class=\"winner-content\">\r\n      <h2 class=\"winner-title\">\r\n        <span v-if=\"winners && winners.length === 1\">Winner!</span>\r\n        <span v-else-if=\"winners && winners.length > 1\">Split Pot!</span>\r\n        <span v-else>Game Result</span>\r\n      </h2>\r\n\r\n      <!-- Community Cards Section -->\r\n      <div class=\"community-cards-section\">\r\n        <h3>Community Cards</h3>\r\n        <div v-if=\"isFoldWin && !displayCommunityCards.length\" class=\"fold-win-message\">\r\n          Hand ended early - other player(s) folded or left\r\n        </div>\r\n        <div v-else-if=\"!displayCommunityCards.length\" class=\"fold-win-message\">\r\n          No community cards\r\n        </div>\r\n        <div class=\"community-cards\" v-else>\r\n          <div v-for=\"(card, index) in displayCommunityCards\" :key=\"'community-' + index\"\r\n            class=\"card-display community-card\" :data-suit=\"card.suit\">\r\n            {{ formatCard(card) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- All Players Cards Section -->\r\n      <div class=\"all-players-section\">\r\n        <h3>Players' Hands</h3>\r\n        <div class=\"players-grid\">\r\n          <div v-for=\"player in processedPlayers\" :key=\"player.playerId\" class=\"player-result\"\r\n            :class=\"{ 'winner-result': player.isWinner, 'folded-player': player.handType === 'Folded' }\">\r\n            <div class=\"player-name-heading\">\r\n              {{ player.username }}\r\n              <span v-if=\"player.isWinner\" class=\"winner-badge\">Winner</span>\r\n              <span v-if=\"player.handType === 'Folded'\" class=\"folded-badge\">Folded</span>\r\n            </div>\r\n            <div class=\"player-hand-name\">{{ player.handDescription }}</div>\r\n            <div v-if=\"player.handType === 'Folded'\" class=\"folded-message\">\r\n              Player folded their hand\r\n            </div>\r\n            <div v-else class=\"player-cards\">\r\n              <div v-for=\"(card, cardIndex) in player.hand\" :key=\"'player-' + player.playerId + '-card-' + cardIndex\"\r\n                class=\"card-display\" :class=\"{ 'winning-card': player.isWinner }\" :data-suit=\"card.suit\">\r\n                {{ formatCard(card) }}\r\n              </div>\r\n              <div v-if=\"player.hand.length === 0\" class=\"no-cards\">\r\n                Cards not shown\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Winners Section -->\r\n      <div class=\"winner-info\" v-if=\"winners && winners.length > 0\">\r\n        <div class=\"winner-pot\">\r\n          <span v-if=\"winners.length === 1 && isFoldWin && pot > 0\">\r\n            {{ winners[0].username }} wins {{ pot }} chips (last player standing)\r\n          </span>\r\n          <span v-else-if=\"winners.length === 1 && pot > 0\">\r\n            {{ winners[0].username }} won {{ pot }} chips\r\n          </span>\r\n          <span v-else-if=\"winners.length > 1 && pot > 0\">\r\n            Split pot: {{winners.map(w => w.username).join(', ')}} each won {{ splitPotAmount(winners[0]) }} chips\r\n          </span>\r\n          <span v-else-if=\"!pot || pot <= 0\" class=\"error-message\">\r\n            Error: No pot amount available.\r\n            Please refresh the game page.\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Ready Up Section -->\r\n      <div class=\"ready-up-section\">\r\n        <p class=\"ready-message\">Please ready up for the next hand</p>\r\n        <button @click=\"toggleReady\" class=\"ready-btn\" :class=\"{ 'ready-confirm': isCurrentPlayerReady }\">\r\n          {{ isCurrentPlayerReady ? 'I\\'m Ready ✓' : 'Mark as Ready' }}\r\n        </button>\r\n        <p v-if=\"readySummary\" class=\"ready-info\">{{ readySummary }}</p>\r\n\r\n        <!-- Start Next Hand button for creator -->\r\n        <div v-if=\"isCreator && areEnoughPlayersReady\" class=\"start-next-hand\">\r\n          <button @click=\"emitStartNextHand\" class=\"start-next-hand-btn\">\r\n            Start Next Hand\r\n          </button>\r\n        </div>\r\n\r\n        <p v-if=\"currentGame && currentGame.status === 'active'\" class=\"warning-message\">\r\n          Warning: Game state is inconsistent. Please refresh the page if issues persist.\r\n        </p>\r\n      </div>\r\n\r\n      <!-- Close Button -->\r\n      <button @click=\"closeWinnerDisplay\" class=\"close-display-btn\">Close</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SocketService from '@/services/SocketService';\r\nimport PokerHandEvaluator from '@/utils/PokerHandEvaluator';\r\n\r\nexport default {\r\n  name: 'WinnerDisplay',\r\n\r\n  props: {\r\n    winners: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    allPlayers: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    communityCards: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    pot: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    visible: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    formatCard: {\r\n      type: Function,\r\n      required: true\r\n    },\r\n    currentGame: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    currentUser: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    gameId: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    isCreator: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isFoldWin: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    previousPlayerHand: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    /**\r\n     * Check if the current player is marked as ready\r\n     */\r\n    isCurrentPlayerReady() {\r\n      if (!this.currentUser || !this.currentGame || !this.currentGame.players) {\r\n        return false;\r\n      }\r\n\r\n      const currentPlayer = this.currentGame.players.find(\r\n        p => p.id === this.currentUser.id\r\n      );\r\n\r\n      return currentPlayer ? currentPlayer.isReady : false;\r\n    },\r\n\r\n    /**\r\n     * Get a summary of player readiness\r\n     */\r\n    readySummary() {\r\n      if (!this.currentGame || !this.currentGame.players) {\r\n        return 'Waiting for players...';\r\n      }\r\n\r\n      const readyCount = this.currentGame.players.filter(p => p.isReady).length;\r\n      const totalPlayers = this.currentGame.players.length;\r\n\r\n      if (readyCount === 0) {\r\n        return 'No players are ready yet';\r\n      } else if (readyCount === totalPlayers && totalPlayers >= 2) {\r\n        return 'All players are ready!';\r\n      } else {\r\n        return `${readyCount} of ${totalPlayers} players ready`;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Check if enough players are ready to start next hand\r\n     */\r\n    areEnoughPlayersReady() {\r\n      if (!this.currentGame || !this.currentGame.players) {\r\n        return false;\r\n      }\r\n\r\n      const readyPlayers = this.currentGame.players.filter(p => p.isReady);\r\n      return readyPlayers.length >= 2;\r\n    },\r\n\r\n    /**\r\n     * Safe access to community cards with validation\r\n     */\r\n    displayCommunityCards() {\r\n      return Array.isArray(this.communityCards) ? this.communityCards : [];\r\n    },\r\n\r\n    formattedPlayerResults() {\r\n      return this.allPlayers.map(player => {\r\n        // Create a proper copy to avoid mutating props\r\n        const formattedPlayer = { ...player };\r\n\r\n        // Determine actual hand type by analyzing the cards\r\n        formattedPlayer.handName = this.determineHandType(player.hand, this.communityCards);\r\n\r\n        return formattedPlayer;\r\n      });\r\n    },\r\n    processedPlayers() {\r\n      return (this.allPlayers || []).map(player => {\r\n        // Create a new object to avoid mutating props\r\n        const processedPlayer = { ...player };\r\n\r\n        // For the current user, use the previousPlayerHand if it's available and the player hand is empty\r\n        if (this.currentUser && player.playerId === this.currentUser.id &&\r\n          (!player.hand || player.hand.length === 0) &&\r\n          this.previousPlayerHand && this.previousPlayerHand.length > 0) {\r\n          processedPlayer.hand = this.previousPlayerHand;\r\n        }\r\n\r\n        // Evaluate the player's hand using our evaluator\r\n        const handEvaluation = PokerHandEvaluator.evaluateHand(\r\n          processedPlayer.hand || [],\r\n          this.communityCards || []\r\n        );\r\n\r\n        // Add correct hand type and description\r\n        processedPlayer.handType = handEvaluation.type;\r\n        processedPlayer.handDescription = handEvaluation.description;\r\n\r\n        return processedPlayer;\r\n      });\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    // Watch for changes in the current game to update readiness status\r\n    currentGame: {\r\n      handler() {\r\n        // When game updates, check if we should enable start next hand button\r\n        if (this.isCreator && this.areEnoughPlayersReady) {\r\n          console.log('Enough players are ready for next hand');\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    // Calculate split pot amount for multiple winners\r\n    splitPotAmount(winner) {\r\n      if (!this.pot || this.pot <= 0) {\r\n        console.error('Invalid pot amount:', this.pot);\r\n        return 0; // Return 0 to prevent NaN\r\n      }\r\n\r\n      if (!this.winners || this.winners.length <= 0) {\r\n        console.error('No winners provided for pot calculation');\r\n        return 0;\r\n      }\r\n\r\n      if (this.winners.length <= 1) return this.pot;\r\n      return Math.floor(this.pot / this.winners.length);\r\n    },\r\n\r\n    // Close the winner display\r\n    closeWinnerDisplay() {\r\n      this.$emit('close');\r\n    },\r\n\r\n    /**\r\n     * Toggle current player's ready status\r\n     */\r\n    toggleReady() {\r\n      if (!this.currentUser || !this.gameId) {\r\n        console.error('Cannot toggle ready: missing user or game data');\r\n        return;\r\n      }\r\n\r\n      // Safety check for socket connection\r\n      if (!SocketService.isSocketConnected()) {\r\n        console.warn('Socket not connected, trying to reconnect...');\r\n        SocketService.init().then(() => {\r\n          this.toggleReady(); // Try again after connecting\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Send ready status update via socket\r\n      SocketService.gameSocket?.emit('playerReady', {\r\n        gameId: this.gameId,\r\n        userId: this.currentUser.id,\r\n        isReady: !this.isCurrentPlayerReady\r\n      });\r\n\r\n      // Add to log\r\n      this.$emit('addToLog', `You marked yourself as ${!this.isCurrentPlayerReady ? 'ready' : 'not ready'}`);\r\n    },\r\n\r\n    /**\r\n     * Emit event to start the next hand (for creator only)\r\n     */\r\n    emitStartNextHand() {\r\n      if (!this.isCreator) {\r\n        console.warn('Only the creator can start the next hand');\r\n        return;\r\n      }\r\n\r\n      if (!this.areEnoughPlayersReady) {\r\n        this.$emit('addToLog', 'Not enough players are ready yet');\r\n        return;\r\n      }\r\n\r\n      console.log('Emitting startNextHand event');\r\n      this.$emit('startNextHand');\r\n      this.$emit('addToLog', 'Starting next hand...');\r\n\r\n      // Close the winner display after starting next hand\r\n      this.closeWinnerDisplay();\r\n    },\r\n\r\n    /**\r\n     * Determine actual hand type by analyzing the player's hand combined with community cards\r\n     * @param {Array} playerHand - The player's hole cards\r\n     * @param {Array} communityCards - The community cards\r\n     * @returns {String} The hand type name\r\n     */\r\n    determineHandType(playerHand, communityCards) {\r\n      if (!playerHand || !Array.isArray(playerHand) || playerHand.length === 0) {\r\n        return 'Unknown Hand';\r\n      }\r\n\r\n      if (playerHand.length === 0) {\r\n        return 'Folded';\r\n      }\r\n\r\n      // Simple hand detector for the most common hand types\r\n      // In a real implementation, this should be replaced with a proper poker hand evaluator\r\n\r\n      // Get all ranks from combined cards (player hand + community cards)\r\n      const allCards = [...playerHand, ...communityCards];\r\n      const ranks = allCards.map(card => card.rank);\r\n\r\n      // Count occurrences of each rank\r\n      const rankCounts = {};\r\n      ranks.forEach(rank => {\r\n        rankCounts[rank] = (rankCounts[rank] || 0) + 1;\r\n      });\r\n\r\n      // Check for pairs, three of a kind, etc.\r\n      const pairCount = Object.values(rankCounts).filter(count => count === 2).length;\r\n      const hasThreeOfKind = Object.values(rankCounts).some(count => count === 3);\r\n      const hasFourOfKind = Object.values(rankCounts).some(count => count === 4);\r\n\r\n      // Determine hand type based on counts\r\n      if (hasFourOfKind) return 'Four of a Kind';\r\n      if (hasThreeOfKind && pairCount > 0) return 'Full House';\r\n      if (hasThreeOfKind) return 'Three of a Kind';\r\n      if (pairCount >= 2) return 'Two Pair';\r\n      if (pairCount === 1) return 'One Pair';\r\n\r\n      // Determine highest card\r\n      const rankValues = {\r\n        '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,\r\n        'J': 11, 'Q': 12, 'K': 13, 'A': 14\r\n      };\r\n\r\n      const highestRank = ranks.reduce((highest, rank) => {\r\n        return rankValues[rank] > rankValues[highest] ? rank : highest;\r\n      }, ranks[0]);\r\n\r\n      return `High Card ${highestRank}`;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.winner-display {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.winner-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.winner-content {\r\n  position: relative;\r\n  background-color: #1c4e38;\r\n  border: 2px solid #3f8c6e;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  min-width: 320px;\r\n  max-width: 90%;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n  text-align: center;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n  animation: scale-in 0.3s ease-out;\r\n}\r\n\r\n.winner-title {\r\n  color: #f1c40f;\r\n  font-size: 32px;\r\n  margin-top: 0;\r\n  margin-bottom: 20px;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n/* Community Cards Section */\r\n.community-cards-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.community-cards-section h3 {\r\n  color: #3f8c6e;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.community-cards {\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n/* All Players Section */\r\n.all-players-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.all-players-section h3 {\r\n  color: #3f8c6e;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.players-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.player-result {\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  border-radius: 8px;\r\n  padding: 12px;\r\n  text-align: center;\r\n}\r\n\r\n.player-result.winner-result {\r\n  background-color: rgba(241, 196, 15, 0.2);\r\n  border: 1px solid #f1c40f;\r\n}\r\n\r\n.player-name-heading {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  color: white;\r\n  margin-bottom: 5px;\r\n  position: relative;\r\n}\r\n\r\n.winner-badge {\r\n  font-size: 12px;\r\n  background-color: #f1c40f;\r\n  color: #000;\r\n  padding: 2px 6px;\r\n  border-radius: 10px;\r\n  margin-left: 8px;\r\n  display: inline-block;\r\n}\r\n\r\n.player-hand-name {\r\n  font-size: 16px;\r\n  color: #3f8c6e;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.player-cards {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.card-display {\r\n  width: 60px;\r\n  height: 85px;\r\n  background-color: white;\r\n  color: black;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.card-display.winning-card {\r\n  box-shadow: 0 0 10px 2px #f1c40f;\r\n}\r\n\r\n.card-display.community-card {\r\n  background-color: #e8f4f0;\r\n}\r\n\r\n.winner-pot {\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  color: #f1c40f;\r\n  font-weight: bold;\r\n}\r\n\r\n.ready-up-section {\r\n  margin-top: 30px;\r\n  padding: 15px;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  border-radius: 8px;\r\n}\r\n\r\n.ready-message {\r\n  font-size: 18px;\r\n  color: white;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.ready-btn {\r\n  background-color: #555;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.ready-btn.ready-confirm {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.ready-btn:hover {\r\n  background-color: #666;\r\n}\r\n\r\n.ready-btn.ready-confirm:hover {\r\n  background-color: #3d8b40;\r\n}\r\n\r\n.ready-info {\r\n  margin-top: 15px;\r\n  font-size: 16px;\r\n  color: #ccc;\r\n}\r\n\r\n.start-next-hand {\r\n  margin-top: 20px;\r\n}\r\n\r\n.start-next-hand-btn {\r\n  background-color: #f39c12;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 12px 24px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.start-next-hand-btn:hover {\r\n  background-color: #e67e22;\r\n}\r\n\r\n.close-display-btn {\r\n  margin-top: 20px;\r\n  background-color: #333;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 8px 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.close-display-btn:hover {\r\n  background-color: #444;\r\n}\r\n\r\n.fold-win-message {\r\n  color: #aaa;\r\n  font-style: italic;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  border-radius: 5px;\r\n}\r\n\r\n.folded-player {\r\n  opacity: 0.7;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.folded-badge {\r\n  font-size: 12px;\r\n  background-color: #999;\r\n  color: #000;\r\n  padding: 2px 6px;\r\n  border-radius: 10px;\r\n  margin-left: 8px;\r\n  display: inline-block;\r\n}\r\n\r\n.folded-message {\r\n  color: #999;\r\n  font-style: italic;\r\n  margin: 10px 0;\r\n  font-size: 14px;\r\n}\r\n\r\n.no-cards {\r\n  color: #999;\r\n  font-style: italic;\r\n  height: 85px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  border-radius: 5px;\r\n  padding: 0 15px;\r\n}\r\n\r\n.card-display[data-suit=\"hearts\"],\r\n.card-display[data-suit=\"diamonds\"],\r\n.community-card[data-suit=\"hearts\"],\r\n.community-card[data-suit=\"diamonds\"] {\r\n  color: red;\r\n}\r\n\r\n.error-message {\r\n  color: #ff6b6b;\r\n  font-weight: bold;\r\n  background-color: rgba(255, 0, 0, 0.1);\r\n  padding: 5px 10px;\r\n  border-radius: 4px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.fold-win-message {\r\n  color: #aaa;\r\n  font-style: italic;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  border-radius: 5px;\r\n}\r\n\r\n.warning-message {\r\n  color: #ff6b6b;\r\n  font-weight: bold;\r\n  background-color: rgba(255, 0, 0, 0.1);\r\n  padding: 5px 10px;\r\n  border-radius: 4px;\r\n  margin-top: 10px;\r\n}\r\n\r\n@keyframes scale-in {\r\n  0% {\r\n    transform: scale(0.8);\r\n    opacity: 0;\r\n  }\r\n\r\n  100% {\r\n    transform: scale(1);\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .winner-content {\r\n    width: 95%;\r\n    padding: 15px;\r\n  }\r\n\r\n  .winner-title {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .players-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .card-display {\r\n    width: 45px;\r\n    height: 65px;\r\n    font-size: 18px;\r\n  }\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WinnerDisplay.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./WinnerDisplay.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./WinnerDisplay.vue?vue&type=template&id=e566e614&scoped=true\"\nimport script from \"./WinnerDisplay.vue?vue&type=script&lang=js\"\nexport * from \"./WinnerDisplay.vue?vue&type=script&lang=js\"\nimport style0 from \"./WinnerDisplay.vue?vue&type=style&index=0&id=e566e614&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e566e614\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"game-chat\"},[_c('div',{staticClass:\"chat-header\"},[_c('h3',[_vm._v(\"Game Chat\")]),_c('div',{staticClass:\"chat-controls\"},[_c('button',{staticClass:\"toggle-btn\",on:{\"click\":_vm.toggleChat}},[_vm._v(\" \"+_vm._s(_vm.chatMinimized ? 'Show Chat' : 'Hide Chat')+\" \")])])]),(!_vm.chatMinimized)?_c('div',{staticClass:\"chat-content\"},[_c('div',{ref:\"messagesContainer\",staticClass:\"messages-container\"},_vm._l((_vm.chatMessages),function(message,index){return _c('div',{key:index,staticClass:\"message\",class:{\n             'system-message': message.type === 'system',\n             'own-message': message.userId === _vm.currentUser.id,\n             'player-message': message.type !== 'system'\n           }},[_c('div',{staticClass:\"message-header\"},[_c('span',{staticClass:\"username\"},[_vm._v(_vm._s(message.username))]),_c('span',{staticClass:\"timestamp\"},[_vm._v(_vm._s(_vm.formatTime(message.timestamp)))])]),_c('div',{staticClass:\"message-content\"},[_vm._v(_vm._s(message.message))])])}),0),_c('div',{staticClass:\"message-input\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.newMessage),expression:\"newMessage\"}],attrs:{\"type\":\"text\",\"placeholder\":\"Type a message...\",\"disabled\":_vm.inputDisabled},domProps:{\"value\":(_vm.newMessage)},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return _vm.sendMessage.apply(null, arguments)},\"input\":function($event){if($event.target.composing)return;_vm.newMessage=$event.target.value}}}),_c('button',{staticClass:\"send-btn\",attrs:{\"disabled\":_vm.inputDisabled},on:{\"click\":_vm.sendMessage}},[_vm._v(\" Send \")])])]):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// client/src/components/Game/GameChat.vue\r\n<template>\r\n  <div class=\"game-chat\">\r\n    <div class=\"chat-header\">\r\n      <h3>Game Chat</h3>\r\n      <div class=\"chat-controls\">\r\n        <button @click=\"toggleChat\" class=\"toggle-btn\">\r\n          {{ chatMinimized ? 'Show Chat' : 'Hide Chat' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div v-if=\"!chatMinimized\" class=\"chat-content\">\r\n      <div class=\"messages-container\" ref=\"messagesContainer\">\r\n        <div v-for=\"(message, index) in chatMessages\" :key=\"index\" \r\n             class=\"message\" :class=\"{\r\n               'system-message': message.type === 'system',\r\n               'own-message': message.userId === currentUser.id,\r\n               'player-message': message.type !== 'system'\r\n             }\">\r\n          <div class=\"message-header\">\r\n            <span class=\"username\">{{ message.username }}</span>\r\n            <span class=\"timestamp\">{{ formatTime(message.timestamp) }}</span>\r\n          </div>\r\n          <div class=\"message-content\">{{ message.message }}</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"message-input\">\r\n        <input \r\n          type=\"text\" \r\n          v-model=\"newMessage\" \r\n          @keyup.enter=\"sendMessage\"\r\n          placeholder=\"Type a message...\"\r\n          :disabled=\"inputDisabled\"\r\n        />\r\n        <button \r\n          @click=\"sendMessage\" \r\n          class=\"send-btn\"\r\n          :disabled=\"inputDisabled\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SocketService from '@/services/SocketService';\r\n\r\nexport default {\r\n  name: 'GameChat',\r\n  \r\n  props: {\r\n    gameId: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    currentUser: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      chatMessages: [],\r\n      newMessage: '',\r\n      chatMinimized: false,\r\n      inputDisabled: false,\r\n      // For duplicate prevention\r\n      recentMessages: new Map(), // userId -> {message, timestamp}\r\n      messageDedupeTime: 3000, // 3 seconds threshold\r\n      rateLimit: {\r\n        messageCount: 0,\r\n        lastResetTime: Date.now(),\r\n        timeout: null,\r\n        waiting: false\r\n      },\r\n      messageRateLimit: 3, // Max 3 messages per 5 seconds\r\n      rateLimitResetTime: 5000 // 5 seconds\r\n    };\r\n  },\r\n  \r\n  mounted() {\r\n    this.setupChatListeners();\r\n    this.scrollToBottom();\r\n  },\r\n  \r\n  methods: {\r\n    setupChatListeners() {\r\n      // Listen for chat messages\r\n      SocketService.on('chatMessage', this.handleChatMessage);\r\n      \r\n      // Listen for game updates that might be relevant (like player join/leave)\r\n      SocketService.on('playerJoined', this.handlePlayerJoined);\r\n      SocketService.on('playerLeft', this.handlePlayerLeft);\r\n      \r\n      // Listen for game state changes\r\n      SocketService.on('gameStarted', this.handleGameStarted);\r\n      SocketService.on('gameEnded', this.handleGameEnded);\r\n      SocketService.on('handResult', this.handleHandResult);\r\n    },\r\n    \r\n    // Socket event handlers\r\n    handleChatMessage(data) {\r\n      // Only add message if it's not a duplicate\r\n      if (!this.isDuplicateMessage(data)) {\r\n        this.chatMessages.push(data);\r\n        this.scrollToBottom();\r\n        \r\n        // For system message type, we don't need to track for deduplication\r\n        if (data.type !== 'system') {\r\n          // Add to recent messages map for deduplication checks\r\n          this.recentMessages.set(data.userId, {\r\n            message: data.message,\r\n            timestamp: Date.now()\r\n          });\r\n        }\r\n      }\r\n    },\r\n    \r\n    handlePlayerJoined(data) {\r\n      // Add a system message\r\n      this.chatMessages.push({\r\n        type: 'system',\r\n        username: 'System',\r\n        message: `${data.username} has joined the game`,\r\n        timestamp: Date.now()\r\n      });\r\n      this.scrollToBottom();\r\n    },\r\n    \r\n    handlePlayerLeft(data) {\r\n      // Add a system message\r\n      this.chatMessages.push({\r\n        type: 'system',\r\n        username: 'System',\r\n        message: `${data.username} has left the game`,\r\n        timestamp: Date.now()\r\n      });\r\n      this.scrollToBottom();\r\n    },\r\n    \r\n    handleGameStarted() {\r\n      this.chatMessages.push({\r\n        type: 'system',\r\n        username: 'System',\r\n        message: 'The game has started!',\r\n        timestamp: Date.now()\r\n      });\r\n      this.scrollToBottom();\r\n    },\r\n    \r\n    handleGameEnded(data) {\r\n      this.chatMessages.push({\r\n        type: 'system',\r\n        username: 'System',\r\n        message: `Game ended: ${data.message || 'Game completed'}`,\r\n        timestamp: Date.now()\r\n      });\r\n      this.scrollToBottom();\r\n    },\r\n    \r\n    handleHandResult(data) {\r\n      // Format winners for chat message\r\n      let winnerNames = 'Unknown';\r\n      \r\n      if (data.winners && data.winners.length) {\r\n        winnerNames = data.winners.map(w => w.username).join(', ');\r\n      }\r\n      \r\n      const message = data.isFoldWin \r\n        ? `${winnerNames} won by fold` \r\n        : `Hand complete. Winner(s): ${winnerNames}`;\r\n        \r\n      this.chatMessages.push({\r\n        type: 'system',\r\n        username: 'System',\r\n        message: message,\r\n        timestamp: Date.now()\r\n      });\r\n      this.scrollToBottom();\r\n    },\r\n    \r\n    // Check if a message is a duplicate\r\n    isDuplicateMessage(message) {\r\n      // System messages are always shown\r\n      if (message.type === 'system') {\r\n        return false;\r\n      }\r\n      \r\n      // Check if this user has sent a recent message\r\n      if (this.recentMessages.has(message.userId)) {\r\n        const recentMsg = this.recentMessages.get(message.userId);\r\n        const timeDiff = Date.now() - recentMsg.timestamp;\r\n        \r\n        // If it's the same message content within the dedupe time window\r\n        if (\r\n          recentMsg.message === message.message && \r\n          timeDiff < this.messageDedupeTime\r\n        ) {\r\n          console.log(`Duplicate message suppressed: ${message.message}`);\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    },\r\n    \r\n    // Send a message\r\n    sendMessage() {\r\n      // Don't send empty messages\r\n      if (!this.newMessage.trim()) {\r\n        return;\r\n      }\r\n      \r\n      // Check for rate limiting\r\n      if (this.isRateLimited()) {\r\n        // Show a warning in the chat\r\n        this.chatMessages.push({\r\n          type: 'system',\r\n          username: 'System',\r\n          message: 'Please wait a moment before sending more messages',\r\n          timestamp: Date.now()\r\n        });\r\n        this.scrollToBottom();\r\n        return;\r\n      }\r\n      \r\n      // Check for duplicate message from self\r\n      const myRecentMessage = this.recentMessages.get(this.currentUser.id);\r\n      if (myRecentMessage && \r\n          myRecentMessage.message === this.newMessage && \r\n          Date.now() - myRecentMessage.timestamp < this.messageDedupeTime) {\r\n        // Show a warning in the chat\r\n        this.chatMessages.push({\r\n          type: 'system',\r\n          username: 'System',\r\n          message: 'Duplicate message not sent',\r\n          timestamp: Date.now()\r\n        });\r\n        this.scrollToBottom();\r\n        return;\r\n      }\r\n      \r\n      // Increment rate limit counter\r\n      this.incrementRateLimit();\r\n      \r\n      // Store this message for deduplication\r\n      this.recentMessages.set(this.currentUser.id, {\r\n        message: this.newMessage,\r\n        timestamp: Date.now()\r\n      });\r\n      \r\n      // Send message to server\r\n      SocketService.sendChatMessage(\r\n        this.gameId,\r\n        this.currentUser.id,\r\n        this.currentUser.username,\r\n        this.newMessage\r\n      );\r\n      \r\n      // Add to local messages immediately for responsive UI\r\n      this.chatMessages.push({\r\n        type: 'user',\r\n        userId: this.currentUser.id,\r\n        username: this.currentUser.username,\r\n        message: this.newMessage,\r\n        timestamp: Date.now()\r\n      });\r\n      \r\n      // Clear input and scroll to bottom\r\n      this.newMessage = '';\r\n      this.scrollToBottom();\r\n    },\r\n    \r\n    // Rate limiting logic\r\n    isRateLimited() {\r\n      const now = Date.now();\r\n      \r\n      // Reset counter if enough time has passed\r\n      if (now - this.rateLimit.lastResetTime > this.rateLimitResetTime) {\r\n        this.rateLimit.messageCount = 0;\r\n        this.rateLimit.lastResetTime = now;\r\n        this.rateLimit.waiting = false;\r\n      }\r\n      \r\n      return this.rateLimit.waiting || this.rateLimit.messageCount >= this.messageRateLimit;\r\n    },\r\n    \r\n    incrementRateLimit() {\r\n      this.rateLimit.messageCount++;\r\n      \r\n      // If we've hit the limit, disable input for the reset time\r\n      if (this.rateLimit.messageCount >= this.messageRateLimit) {\r\n        this.rateLimit.waiting = true;\r\n        this.inputDisabled = true;\r\n        \r\n        // Clear any existing timeout\r\n        if (this.rateLimit.timeout) {\r\n          clearTimeout(this.rateLimit.timeout);\r\n        }\r\n        \r\n        // Set timeout to re-enable input\r\n        this.rateLimit.timeout = setTimeout(() => {\r\n          this.rateLimit.messageCount = 0;\r\n          this.rateLimit.lastResetTime = Date.now();\r\n          this.rateLimit.waiting = false;\r\n          this.inputDisabled = false;\r\n        }, this.rateLimitResetTime);\r\n      }\r\n    },\r\n    \r\n    // UI helpers\r\n    toggleChat() {\r\n      this.chatMinimized = !this.chatMinimized;\r\n      if (!this.chatMinimized) {\r\n        // When showing chat, scroll to bottom\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom();\r\n        });\r\n      }\r\n    },\r\n    \r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        if (this.$refs.messagesContainer) {\r\n          this.$refs.messagesContainer.scrollTop = this.$refs.messagesContainer.scrollHeight;\r\n        }\r\n      });\r\n    },\r\n    \r\n    formatTime(timestamp) {\r\n      const date = new Date(timestamp);\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    }\r\n  },\r\n  \r\n  beforeDestroy() {\r\n    // Clean up event listeners\r\n    SocketService.off('chatMessage', this.handleChatMessage);\r\n    SocketService.off('playerJoined', this.handlePlayerJoined);\r\n    SocketService.off('playerLeft', this.handlePlayerLeft);\r\n    SocketService.off('gameStarted', this.handleGameStarted);\r\n    SocketService.off('gameEnded', this.handleGameEnded);\r\n    SocketService.off('handResult', this.handleHandResult);\r\n    \r\n    // Clear any timeouts\r\n    if (this.rateLimit.timeout) {\r\n      clearTimeout(this.rateLimit.timeout);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game-chat {\r\n  max-height: 500px; /* Keep consistent height */\r\n  overflow-y: auto;\r\n  background-color: #2a2a2a;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chat-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 15px;\r\n  background-color: rgba(63, 140, 110, 0.2);\r\n  border-bottom: 1px solid rgba(63, 140, 110, 0.3);\r\n}\r\n\r\n.chat-header h3 {\r\n  margin: 0;\r\n  color: #3f8c6e;\r\n  font-size: 16px;\r\n}\r\n\r\n.toggle-btn {\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  color: #ccc;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.toggle-btn:hover {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.chat-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 300px;\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 8px;\r\n  padding: 8px 10px;\r\n  border-radius: 8px;\r\n  max-width: 80%;\r\n  word-break: break-word;\r\n}\r\n\r\n.system-message {\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  color: #aaa;\r\n  font-style: italic;\r\n  align-self: center;\r\n  text-align: center;\r\n  max-width: 90%;\r\n}\r\n\r\n.player-message {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  align-self: flex-start;\r\n}\r\n\r\n.own-message {\r\n  background-color: rgba(63, 140, 110, 0.3);\r\n  align-self: flex-end;\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n  font-size: 12px;\r\n}\r\n\r\n.username {\r\n  font-weight: bold;\r\n  color: #3f8c6e;\r\n}\r\n\r\n.timestamp {\r\n  color: #777;\r\n}\r\n\r\n.message-content {\r\n  font-size: 14px;\r\n}\r\n\r\n.message-input {\r\n  display: flex;\r\n  padding: 10px;\r\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.message-input input {\r\n  flex: 1;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-radius: 4px;\r\n  color: white;\r\n  padding: 8px 10px;\r\n  margin-right: 8px;\r\n}\r\n\r\n.message-input input:focus {\r\n  outline: none;\r\n  border-color: rgba(63, 140, 110, 0.5);\r\n}\r\n\r\n.send-btn {\r\n  background-color: #3f8c6e;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 8px 15px;\r\n  cursor: pointer;\r\n}\r\n\r\n.send-btn:hover {\r\n  background-color: #2c664e;\r\n}\r\n\r\n.send-btn:disabled,\r\n.message-input input:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chat-content {\r\n    height: 250px;\r\n  }\r\n  \r\n  .message {\r\n    max-width: 90%;\r\n  }\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameChat.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameChat.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./GameChat.vue?vue&type=template&id=ac0316a6&scoped=true\"\nimport script from \"./GameChat.vue?vue&type=script&lang=js\"\nexport * from \"./GameChat.vue?vue&type=script&lang=js\"\nimport style0 from \"./GameChat.vue?vue&type=style&index=0&id=ac0316a6&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ac0316a6\",\n  null\n  \n)\n\nexport default component.exports","<!-- client/src/views/Game.vue -->\r\n<template>\r\n  <div class=\"game-container\">\r\n    <GameHeader :gameId=\"gameId\" :currentGame=\"currentGame\" @copyGameId=\"copyGameId\" @leaveGame=\"leaveGame\" />\r\n\r\n    <div v-if=\"errorMessage\" class=\"error-message\">\r\n      {{ errorMessage }}\r\n    </div>\r\n\r\n    <div v-if=\"!currentGame\" class=\"loading\">\r\n      Loading game...\r\n    </div>\r\n\r\n    <div v-else class=\"game-area\">\r\n      <div class=\"game-status-wrapper\">\r\n        <GameStatus :currentGame=\"currentGame\" :currentUser=\"currentUser\" :gameId=\"gameId\" :isCreator=\"isCreator\"\r\n          :isStarting=\"isStarting\" :gameInitialized=\"gameInitialized\"\r\n          :key=\"currentGame ? currentGame.status + '-' + gameInitialized : 'loading'\" @startGame=\"handleStartGame\"\r\n          @getCurrentPlayerName=\"getCurrentPlayerName\" @requestInitialization=\"requestInitialization\"\r\n          @requestStateUpdate=\"requestStateUpdate\" @addToLog=\"addToLog\" />\r\n      </div>\r\n\r\n      <!-- Game table -->\r\n      <div class=\"game-table\">\r\n        <!-- Community cards -->\r\n        <CommunityCards :communityCards=\"currentGame.communityCards\" :formatCard=\"formatCard\" />\r\n\r\n        <!-- Players -->\r\n        <PlayerList ref=\"playerList\" :players=\"currentGame.players\" :currentUser=\"currentUser\"\r\n          :currentTurn=\"currentGame.currentTurn\" :playerHand=\"playerHand\" :formatCard=\"formatCard\" />\r\n\r\n        <!-- Player actions -->\r\n        <PlayerActions v-if=\"isYourTurn || shouldShowActions()\" :availableActions=\"availableActions\"\r\n          :currentGame=\"currentGame\" :betAmount=\"betAmount\" :raiseAmount=\"raiseAmount\" :isYourTurn=\"isYourTurn\"\r\n          @updateBetAmount=\"betAmount = $event\" @updateRaiseAmount=\"raiseAmount = $event\" @handleAction=\"handleAction\"\r\n          @endTurn=\"endTurn\" @getPlayerChipsInPot=\"getPlayerChipsInPot\" @getCurrentPlayer=\"getCurrentPlayer\" />\r\n\r\n        <ActionTimer :initialTime=\"actionTimeLimit\" :isActive=\"isYourTurn\" :currentGame=\"currentGame\"\r\n          @timerComplete=\"handleTimerComplete\" v-if=\"isYourTurn\" />\r\n\r\n        <WinnerDisplay :winners=\"handWinners\" :allPlayers=\"allPlayersCards\" :communityCards=\"communityCards\"\r\n          :pot=\"winningPot\" :visible=\"showWinnerDisplay\" :formatCard=\"formatCard\" :currentGame=\"currentGame\"\r\n          :currentUser=\"currentUser\" :gameId=\"gameId\" :isCreator=\"isCreator\" :isFoldWin=\"isFoldWin\"\r\n          :previousPlayerHand=\"previousPlayerHand\" @close=\"handleWinnerDisplayClose\" @addToLog=\"addToLog\"\r\n          @startNextHand=\"startNextHand\" />\r\n      </div>\r\n\r\n      <!-- Game chat/log -->\r\n      <GameLog :gameLog=\"gameLog\" />\r\n      <GameChat :gameId=\"gameId\" :currentUser=\"currentUser\" />\r\n    </div>\r\n\r\n    <!-- Debug toggle button -->\r\n    <button @click=\"showDebugPanel = !showDebugPanel\" class=\"debug-toggle\">\r\n      {{ showDebugPanel ? 'Hide Debug' : 'Show Debug' }}\r\n    </button>\r\n\r\n    <!-- Debug panel -->\r\n    <GameDebugPanel :enabled=\"showDebugPanel\" :gameId=\"gameId\" :currentGame=\"currentGame\" :currentUser=\"currentUser\"\r\n      :isCreator=\"isCreator\" :isConnected=\"isConnected\" @close=\"showDebugPanel = false\" @log=\"addToLog\"\r\n      @forceStart=\"forceStartGame\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SocketService from '@/services/SocketService';\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\nimport GameHeader from '@/components/Game/GameHeader.vue';\r\nimport GameStatus from '@/components/Game/GameStatus.vue';\r\nimport CommunityCards from '@/components/Game/CommunityCards.vue';\r\nimport PlayerList from '@/components/Game/PlayerList.vue';\r\nimport PlayerActions from '@/components/Game/PlayerActions.vue';\r\nimport GameLog from '@/components/Game/GameLog.vue';\r\nimport GameDebugPanel from '@/components/Game/GameDebugPanel.vue';\r\nimport GameHandlers from '@/components/Game/GameHandlers';\r\nimport { formatCard, getDefaultOptions, addToGameLog } from '@/utils/gameUtils';\r\nimport ActionTimer from '@/components/Game/ActionTimer.vue';\r\nimport WinnerDisplay from '@/components/Game/WinnerDisplay.vue';\r\nimport PlayerReadyComponent from '@/components/Game/PlayerReadyComponent.vue';\r\nimport PokerHandEvaluator from '@/utils/PokerHandEvaluator';\r\nimport GameChat from '@/components/Game/GameChat.vue';\r\n\r\nexport default {\r\n  name: 'Game',\r\n\r\n  components: {\r\n    GameHeader,\r\n    GameStatus,\r\n    CommunityCards,\r\n    PlayerList,\r\n    PlayerActions,\r\n    GameLog,\r\n    GameDebugPanel,\r\n    ActionTimer,\r\n    WinnerDisplay,\r\n    PlayerReadyComponent,\r\n    GameChat,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      gameId: '',\r\n      socket: null,\r\n      isConnected: false,\r\n      isStarting: false,\r\n      gameLog: [],\r\n      lastLogMessages: [],\r\n      betAmount: 1,\r\n      raiseAmount: 0,\r\n      showResult: false,\r\n      handResult: null,\r\n      actionTimer: null,\r\n      actionTimeLimit: 60,\r\n      actionTimeRemaining: 60,\r\n      showDebugPanel: false,\r\n      explicitIsCreator: false,\r\n      gameInProgress: false,\r\n      gameInitialized: false,\r\n      messageDedupeTime: 1000,\r\n      isYourTurnProcessed: false,\r\n      setupComplete: false,\r\n      handlers: null, // Will store event handlers\r\n      eventHandlers: [], // Track registered handlers for cleanup\r\n      isYourTurn: false,\r\n      showWinnerDisplay: false,\r\n      handWinners: [],\r\n      winningPot: 0,\r\n      previousPlayerHand: [],\r\n      playerHand: [],\r\n      availableActions: [],\r\n      allPlayersCards: [],\r\n      communityCards: [],\r\n      isFoldWin: false,\r\n      currentHandTimestamp: 0,\r\n      cardRefreshCounter: 0,\r\n      isObserver: false,\r\n      observerMessage: '',\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\r\n      'currentUser',\r\n      'currentGame',\r\n      'errorMessage',\r\n    ]),\r\n    isAuthenticated() {\r\n      return !!this.$store.getters.token || !!localStorage.getItem('token');\r\n    },\r\n\r\n    isCreator() {\r\n      if (!this.currentGame || !this.currentUser) {\r\n        console.log('isCreator check failed: missing required data');\r\n        return false;\r\n      }\r\n\r\n      // PRIMARY METHOD: Use creator field if available\r\n      if (this.currentGame.creator && this.currentGame.creator.user) {\r\n        // Extract creator ID - handle different formats\r\n        let creatorId = '';\r\n        if (typeof this.currentGame.creator.user === 'object' && this.currentGame.creator.user.$oid) {\r\n          creatorId = this.currentGame.creator.user.$oid;\r\n        } else if (typeof this.currentGame.creator.user === 'string') {\r\n          creatorId = this.currentGame.creator.user;\r\n        } else if (typeof this.currentGame.creator.user.toString === 'function') {\r\n          creatorId = this.currentGame.creator.user.toString();\r\n        } else {\r\n          creatorId = String(this.currentGame.creator.user);\r\n        }\r\n\r\n        // Extract user ID\r\n        const userId = String(this.currentUser.id || this.currentUser._id);\r\n\r\n        console.log('Creator ID for comparison:', creatorId);\r\n        console.log('User ID for comparison:', userId);\r\n\r\n        return creatorId === userId;\r\n      }\r\n\r\n      // FALLBACK METHOD: If creator field is missing, assume the first player is the creator\r\n      console.log('No creator field found - using fallback method');\r\n\r\n      // Check if the current user is the first player\r\n      if (this.currentGame.players && this.currentGame.players.length > 0) {\r\n        const firstPlayer = this.currentGame.players[0];\r\n        const firstPlayerId = String(firstPlayer.id || firstPlayer.user || '');\r\n        const currentUserId = String(this.currentUser.id || this.currentUser._id || '');\r\n\r\n        console.log('First player ID:', firstPlayerId);\r\n        console.log('Current user ID:', currentUserId);\r\n        console.log('Is first player? (fallback):', firstPlayerId === currentUserId);\r\n\r\n        return firstPlayerId === currentUserId;\r\n      }\r\n\r\n      if (this.explicitIsCreator) {\r\n        console.log('Using explicit creator status: true');\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n    canJoinGame() {\r\n      return this.isObserver && this.currentGame && this.currentGame.status === 'waiting';\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions([\r\n      'fetchGame',\r\n      'startGame',\r\n      'clearErrorMessage',\r\n      'updateGameState',\r\n      'receiveCards',\r\n      'yourTurn',\r\n      'endTurn',\r\n      'performAction'\r\n    ]),\r\n\r\n    ...mapMutations([\r\n      'SET_CURRENT_GAME_ID',\r\n      'SET_ERROR_MESSAGE'\r\n    ]),\r\n\r\n    // Common methods from gameUtils.js\r\n    /**\r\n * Format a card for display\r\n * @param {Object} card - Card object with suit and rank\r\n * @returns {String} Formatted card representation\r\n */\r\n    formatCard(card) {\r\n      // Safety check for null or invalid cards\r\n      if (!card || !card.suit || !card.rank) {\r\n        console.warn('Invalid card data received:', card);\r\n        return '?';\r\n      }\r\n\r\n      const suitSymbols = {\r\n        hearts: '♥',\r\n        diamonds: '♦',\r\n        clubs: '♣',\r\n        spades: '♠'\r\n      };\r\n\r\n      // Make sure the suit is valid\r\n      const suitSymbol = suitSymbols[card.suit.toLowerCase()] || '?';\r\n\r\n      return `${card.rank}${suitSymbol}`;\r\n    },\r\n    getDefaultOptions,\r\n\r\n    yourTurn(data) {\r\n      // Update local state\r\n      this.isYourTurn = true;\r\n      this.availableActions = data.options || [];\r\n\r\n      // Update store state as well (if needed)\r\n      this.$store.commit('SET_YOUR_TURN', true);\r\n      this.$store.commit('SET_AVAILABLE_ACTIONS', data.options || []);\r\n    },\r\n\r\n    getCurrentPlayerName() {\r\n      if (!this.currentGame || !this.currentGame.currentTurn) return 'N/A';\r\n\r\n      const player = this.currentGame.players.find(\r\n        p => p.id === this.currentGame.currentTurn\r\n      );\r\n\r\n      return player ? player.username : 'Unknown';\r\n    },\r\n\r\n    endTurn() {\r\n      // Update local state\r\n      this.isYourTurn = false;\r\n      this.availableActions = [];\r\n\r\n      // Make sure action timer is cleared\r\n      this.clearActionTimer();\r\n\r\n      // Update store state\r\n      this.$store.commit('SET_YOUR_TURN', false);\r\n      this.$store.commit('SET_AVAILABLE_ACTIONS', []);\r\n\r\n      this.isYourTurnProcessed = false;\r\n\r\n      // Force component update\r\n      this.$forceUpdate();\r\n\r\n      console.log('Turn ended successfully');\r\n    },\r\n\r\n    /**\r\n * Get the current player object for the current user\r\n * @returns {Object|null} Player object or null if not found\r\n */\r\n    getCurrentPlayer() {\r\n      if (!this.currentGame || !this.currentUser) return null;\r\n\r\n      // Find the player with the current user's ID\r\n      const player = this.currentGame.players.find(\r\n        p => p.id === this.currentUser.id ||\r\n          (p.user && p.user.toString() === this.currentUser.id.toString())\r\n      );\r\n\r\n      return player || null;\r\n    },\r\n\r\n    /**\r\n * Get the amount of chips the current player has committed to the pot\r\n * @returns {Number} Number of chips in pot\r\n */\r\n    getPlayerChipsInPot() {\r\n      const player = this.getCurrentPlayer();\r\n      return player ? (player.chips || 0) : 0;\r\n    },\r\n\r\n    copyGameId() {\r\n      navigator.clipboard.writeText(this.gameId)\r\n        .then(() => {\r\n          alert('Game ID copied to clipboard');\r\n        })\r\n        .catch(err => {\r\n          console.error('Could not copy text: ', err);\r\n\r\n          // Fallback method\r\n          const el = document.createElement('textarea');\r\n          el.value = this.gameId;\r\n          document.body.appendChild(el);\r\n          el.select();\r\n          document.execCommand('copy');\r\n          document.body.removeChild(el);\r\n          alert('Game ID copied to clipboard');\r\n        });\r\n    },\r\n\r\n    leaveGame() {\r\n      if (confirm('Are you sure you want to leave the game?')) {\r\n        SocketService.leaveGame(this.gameId, this.currentUser.id);\r\n        this.$router.push('/lobby');\r\n      }\r\n    },\r\n\r\n    async handleStartGame() {\r\n      this.isStarting = true;\r\n      this.addToLog('Attempting to start the game...');\r\n      this.clearErrorMessage();\r\n\r\n      try {\r\n        console.log('Starting game:', this.gameId);\r\n        console.log('Current user:', this.currentUser);\r\n        console.log('Is creator:', this.isCreator);\r\n        console.log('Players in game:', this.currentGame.players.length);\r\n\r\n        // Step 1: First check if game is already active\r\n        if (this.currentGame.status === 'active') {\r\n          this.addToLog('Game is already active, refreshing state...');\r\n\r\n          // Request updated game state\r\n          this.requestStateUpdate();\r\n\r\n          // Consider game started\r\n          this.gameInProgress = true;\r\n          return;\r\n        }\r\n\r\n        // Step 2: Call API to update game status\r\n        const apiResult = await this.startGame(this.gameId);\r\n\r\n        if (apiResult.success) {\r\n          this.addToLog('Game started on server, initializing...');\r\n\r\n          // Immediately set gameInProgress to prevent duplicate starts\r\n          this.gameInProgress = true;\r\n\r\n          // Request a game state update instead of sending socket event\r\n          setTimeout(() => {\r\n            this.requestStateUpdate();\r\n\r\n            // If we don't get cards within 2 seconds, try direct socket method\r\n            setTimeout(() => {\r\n              if (this.playerHand.length === 0) {\r\n                console.log('No cards received yet, trying direct socket method');\r\n                this.triggerGameInitialize();\r\n              }\r\n            }, 2000);\r\n          }, 500);\r\n        } else {\r\n          // Handle API error\r\n          console.error('Start game API returned error:', apiResult.error);\r\n          throw new Error(apiResult.error || 'Failed to start game on the server');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error starting game:', error);\r\n\r\n        // Special handling for \"already started\" error - treat as success\r\n        if (error.message && error.message.includes('already been started')) {\r\n          this.addToLog('Game is already in progress, refreshing state...');\r\n          this.gameInProgress = true;\r\n\r\n          // Request updated game state\r\n          this.requestStateUpdate();\r\n        } else {\r\n          this.SET_ERROR_MESSAGE(error.message || 'Error starting game. Please try again.');\r\n          this.addToLog(`Failed to start game: ${error.message}`);\r\n        }\r\n      } finally {\r\n        this.isStarting = false;\r\n      }\r\n    },\r\n\r\n    triggerGameInitialize() {\r\n      // This is a fallback method to initialize the game if the gameUpdate doesn't work\r\n      SocketService.gameSocket?.emit('initializeGame', {\r\n        gameId: this.gameId,\r\n        userId: this.currentUser.id\r\n      });\r\n\r\n      this.addToLog('Sent initialize game request');\r\n    },\r\n\r\n    /**\r\n * Handle an action from the current player\r\n * @param {String} action - Action type (fold, check, call, bet, raise, allIn)\r\n * @param {Number} amount - Bet amount (for bet, raise, call actions)\r\n */\r\n    handleAction(action, amount = 0) {\r\n      if (!this.isYourTurn) {\r\n        console.warn('Not your turn - ignoring action');\r\n        return;\r\n      }\r\n\r\n      // Clear any existing timer\r\n      this.clearActionTimer();\r\n\r\n      // Immediately end the turn in UI to prevent double actions\r\n      this.endTurn();\r\n\r\n      // Validate and sanitize amount for relevant actions\r\n      if (action === 'bet' || action === 'raise' || action === 'call' || action === 'allIn') {\r\n        // Ensure amount is a valid number\r\n        amount = parseFloat(amount);\r\n        if (isNaN(amount)) {\r\n          console.error(`Invalid amount for ${action}: ${amount}`);\r\n          // Set sensible defaults for different actions\r\n          if (action === 'call') {\r\n            const currentBet = this.currentGame.currentBet || 0;\r\n            const playerChips = this.getPlayerChipsInPot();\r\n            amount = Math.max(0, currentBet - playerChips);\r\n          } else if (action === 'allIn') {\r\n            // For all-in, use all player's remaining chips\r\n            const player = this.getCurrentPlayer();\r\n            amount = player ? player.totalChips : 0;\r\n          } else {\r\n            amount = 1; // Default minimum bet/raise\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log(`Sending player action: ${action} with amount: ${amount}`);\r\n\r\n      // Send action to server via socket\r\n      SocketService.sendPlayerAction(\r\n        this.gameId,\r\n        this.currentUser.id,\r\n        action,\r\n        amount\r\n      );\r\n\r\n      // Update local state\r\n      this.$store.dispatch('performAction', { action, amount });\r\n\r\n      // Create log message\r\n      let logMessage = `You ${action}`;\r\n      if (action === 'bet' || action === 'raise') {\r\n        logMessage += ` ${amount} chips`;\r\n      } else if (action === 'call' && amount > 0) {\r\n        logMessage += ` ${amount} chips`;\r\n      } else if (action === 'allIn') {\r\n        logMessage += ` with ${amount} chips`;\r\n      }\r\n\r\n      this.addToLog(logMessage);\r\n    },\r\n\r\n    addToLog(message) {\r\n      const result = addToGameLog(this.gameLog, this.lastLogMessages, message, this.messageDedupeTime);\r\n      this.gameLog = result.gameLog;\r\n      this.lastLogMessages = result.lastLogMessages;\r\n    },\r\n\r\n    async setupSocketConnection() {\r\n      try {\r\n        // Initialize the socket service and connect to the game\r\n        await SocketService.init();\r\n\r\n        // Join the game room\r\n        await SocketService.joinGame(\r\n          this.gameId,\r\n          this.currentUser.id,\r\n          this.currentUser.username\r\n        );\r\n\r\n        // IMPORTANT: Update the isConnected flag based on the SocketService status\r\n        this.isConnected = SocketService.isSocketConnected();\r\n\r\n        this.addToLog('Connected to game server');\r\n\r\n        // Create socket event handlers\r\n        this.handlers = GameHandlers.createHandlers(this);\r\n\r\n        // Register event handlers\r\n        const events = [\r\n          'gameUpdate', 'gameStarted', 'playerJoined', 'playerLeft',\r\n          'chatMessage', 'dealCards', 'yourTurn', 'turnChanged',\r\n          'actionTaken', 'dealFlop', 'dealTurn', 'dealRiver',\r\n          'handResult', 'newHand', 'gameEnded', 'gameError', 'creatorInfo', 'forceCardUpdate', 'clearPlayerHands',\r\n          'creatorChanged', 'becameCreator', 'playerRemoved'\r\n        ];\r\n\r\n        events.forEach(event => {\r\n          const handlerName = `handle${event.charAt(0).toUpperCase() + event.slice(1)}`;\r\n          if (this.handlers[handlerName]) {\r\n            const handler = this.handlers[handlerName];\r\n            SocketService.on(event, handler);\r\n\r\n            // Track for cleanup\r\n            this.eventHandlers.push({ event, handler });\r\n          }\r\n        });\r\n\r\n        // Register handler for player ready updates\r\n        const playerReadyUpdateHandler = (data) => {\r\n          console.log('Player ready update received:', data);\r\n          // Game state will be updated through gameUpdate event\r\n          // Just log the event\r\n          const message = `${data.username} is ${data.isReady ? 'ready' : 'not ready'}`;\r\n          this.addToLog(message);\r\n        };\r\n\r\n        // Add handler to track list\r\n        SocketService.on('playerReadyUpdate', playerReadyUpdateHandler);\r\n        this.eventHandlers.push({ event: 'playerReadyUpdate', handler: playerReadyUpdateHandler });\r\n\r\n        // Handle all players ready event\r\n        const allPlayersReadyHandler = (data) => {\r\n          console.log('All players ready:', data);\r\n          this.addToLog(`All players are ready (${data.readyCount}/${data.totalPlayers})!`);\r\n        };\r\n\r\n        // Add handler to track list\r\n        SocketService.on('allPlayersReady', allPlayersReadyHandler);\r\n        this.eventHandlers.push({ event: 'allPlayersReady', handler: allPlayersReadyHandler });\r\n\r\n        // Add a connect listener to update isConnected when the socket connects\r\n        SocketService.gameSocket.on('connect', () => {\r\n          console.log('Socket connected event received');\r\n          this.isConnected = true;\r\n        });\r\n\r\n        // Add a disconnect listener to update isConnected when the socket disconnects\r\n        SocketService.gameSocket.on('disconnect', () => {\r\n          console.log('Socket disconnected event received');\r\n          this.isConnected = false;\r\n        });\r\n\r\n        // Request an initial game state update with retry logic\r\n        this.requestGameState();\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error setting up socket connection:', error);\r\n        this.addToLog('Failed to connect to game server');\r\n        this.isConnected = false;\r\n\r\n        // Set up auto-reconnect\r\n        setTimeout(() => {\r\n          if (!this.isConnected) {\r\n            console.log('Attempting to reconnect...');\r\n            this.setupSocketConnection();\r\n          }\r\n        }, 3000);\r\n        return false;\r\n      }\r\n    },\r\n\r\n    requestGameState(retries = 3) {\r\n      SocketService.requestGameUpdate(this.gameId, this.currentUser.id);\r\n\r\n      // Set up a timeout to check if we got a game state update\r\n      if (retries > 0) {\r\n        setTimeout(() => {\r\n          if (!this.currentGame) {\r\n            console.log(`Game state not received, retrying... (${retries} attempts left)`);\r\n            this.requestGameState(retries - 1);\r\n          }\r\n        }, 1000);\r\n      }\r\n    },\r\n\r\n    startActionTimer(timeLimit = 60) {\r\n      this.actionTimeLimit = timeLimit;\r\n\r\n      // Clear any existing timer\r\n      this.clearActionTimer();\r\n\r\n      // Set a new timer\r\n      this.actionTimer = setInterval(() => {\r\n        this.actionTimeLimit--;\r\n\r\n        if (this.actionTimeLimit <= 0) {\r\n          this.clearActionTimer();\r\n          this.handleTimerComplete();\r\n        }\r\n      }, 1000);\r\n    },\r\n\r\n    clearActionTimer() {\r\n      if (this.actionTimer) {\r\n        clearInterval(this.actionTimer);\r\n        this.actionTimer = null;\r\n        console.log('Action timer cleared');\r\n      }\r\n    },\r\n\r\n    requestInitialization() {\r\n      this.addToLog('Requesting game initialization...');\r\n      this.triggerGameInitialize();\r\n    },\r\n\r\n    requestStateUpdate() {\r\n      this.addToLog('Requesting game state update...');\r\n      SocketService.requestGameUpdate(this.gameId, this.currentUser.id);\r\n    },\r\n\r\n    shouldShowActions() {\r\n      // Don't show actions if game isn't active\r\n      if (!this.currentGame || this.currentGame.status !== 'active') {\r\n        return false;\r\n      }\r\n\r\n      // Only show actions if it's explicitly the player's turn\r\n      return this.isYourTurn;\r\n    },\r\n\r\n    forceStartGame() {\r\n      console.log('Force starting game through debug panel');\r\n      this.handleStartGame();\r\n    },\r\n\r\n    async fetchGameWithRetry(gameId, maxRetries = 3) {\r\n      let retries = 0;\r\n\r\n      while (retries < maxRetries) {\r\n        try {\r\n          console.log(`Attempt ${retries + 1} to fetch game data`);\r\n          const result = await this.fetchGame(gameId);\r\n\r\n          if (result.success) {\r\n            console.log('Successfully fetched game data');\r\n            return result;\r\n          }\r\n\r\n          throw new Error(result.error || 'Failed to fetch game');\r\n        } catch (error) {\r\n          console.error(`Fetch attempt ${retries + 1} failed:`, error);\r\n          retries++;\r\n\r\n          if (retries >= maxRetries) {\r\n            console.error(`Failed to fetch game after ${maxRetries} attempts`);\r\n            throw error;\r\n          }\r\n\r\n          // Wait before retry\r\n          await new Promise(resolve => setTimeout(resolve, 1000));\r\n        }\r\n      }\r\n    },\r\n    forceCardUpdate() {\r\n      // This method manually forces all components to update\r\n      this.$forceUpdate();\r\n\r\n      // Also force child components to update\r\n      this.$children.forEach(child => {\r\n        if (typeof child.$forceUpdate === 'function') {\r\n          child.$forceUpdate();\r\n        }\r\n      });\r\n\r\n      // Log for debugging\r\n      console.log(\"Forced game component update\");\r\n    },\r\n    handleTimerComplete() {\r\n      console.log('Timer complete - auto folding');\r\n      if (this.isYourTurn) {\r\n        this.handleAction('fold');\r\n        this.addToLog('Time expired - auto fold');\r\n      }\r\n    },\r\n\r\n    // Handle when winner display countdown completes\r\n    handleWinnerDisplayClose() {\r\n      console.log('Winner display closed');\r\n      this.showWinnerDisplay = false;\r\n      this.handWinners = [];\r\n\r\n      // Request a game state update to ensure UI is up to date\r\n      this.requestStateUpdate();\r\n\r\n      // After short delay, try to fetch user data to update balances\r\n      setTimeout(() => {\r\n        this.$store.dispatch('fetchUserData')\r\n          .then(() => console.log(\"User data refreshed after hand\"))\r\n          .catch(err => console.error(\"Failed to refresh user data:\", err));\r\n      }, 500);\r\n    },\r\n    handleHandResult(result) {\r\n      console.log(\"Received hand result:\", result);\r\n\r\n      // Add safety checks and debug info for hand result processing\r\n      if (!result) {\r\n        console.error(\"Hand result is empty or invalid\");\r\n        return;\r\n      }\r\n\r\n      // Deep inspect the result to see what we're receiving\r\n      console.log(\"Winners array:\", JSON.stringify(result.winners));\r\n      console.log(\"Pot amount:\", result.pot);\r\n\r\n      // Make sure winners array exists and is properly formatted\r\n      if (!result.winners || !Array.isArray(result.winners) || result.winners.length === 0) {\r\n        console.error(\"No valid winners in result data\");\r\n        return;\r\n      }\r\n\r\n      // Create a safe copy of the winners with default values for missing properties\r\n      const safeWinners = result.winners.map(winner => ({\r\n        playerId: winner.playerId || \"unknown\",\r\n        username: winner.username || \"Unknown Player\",\r\n        handName: winner.handName || \"Unknown Hand\",\r\n        hand: Array.isArray(winner.hand) ? winner.hand : []\r\n      }));\r\n\r\n      // Process all players' cards with proper hand evaluation\r\n      let allPlayersCards = [];\r\n\r\n      if (Array.isArray(result.allPlayersCards)) {\r\n        allPlayersCards = result.allPlayersCards.map(player => {\r\n          // Get player hand correctly evaluated\r\n          const hand = Array.isArray(player.hand) ? player.hand : [];\r\n          const communityCards = Array.isArray(result.communityCards) ? result.communityCards : [];\r\n\r\n          // Evaluate the actual hand type\r\n          const evaluation = PokerHandEvaluator.evaluateHand(hand, communityCards);\r\n\r\n          return {\r\n            ...player,\r\n            handName: evaluation.description,\r\n            handType: evaluation.type,\r\n            isWinner: player.isWinner || safeWinners.some(w => w.playerId === player.playerId)\r\n          };\r\n        });\r\n      }\r\n\r\n      // Store community cards\r\n      const communityCards = Array.isArray(result.communityCards) ? result.communityCards : [];\r\n\r\n      // Safely set the data on the component\r\n      this.handWinners = safeWinners;\r\n      this.allPlayersCards = allPlayersCards;\r\n      this.communityCards = communityCards;\r\n      this.winningPot = result?.pot || 0;\r\n      this.isFoldWin = result?.isFoldWin || false;\r\n      this.showWinnerDisplay = true;\r\n\r\n      // Format winner names for log\r\n      const winnerNames = this.handWinners\r\n        .map(winner => winner.username)\r\n        .join(\", \");\r\n\r\n      this.addToLog(`Hand complete. Winner(s): ${winnerNames}`);\r\n\r\n      // Force UI update\r\n      this.forceCardUpdate();\r\n    },\r\n\r\n    // Handle when winner display countdown completes\r\n    handleWinnerDisplayComplete() {\r\n      console.log('Winner display countdown complete');\r\n      this.showWinnerDisplay = false;\r\n      this.handWinners = [];\r\n    },\r\n\r\n    handleWinnerDisplayClose() {\r\n      console.log('Winner display closed');\r\n      this.showWinnerDisplay = false;\r\n      this.handWinners = [];\r\n\r\n      // Request a game state update to ensure UI is up to date\r\n      this.requestStateUpdate();\r\n\r\n      // After short delay, try to fetch user data to update balances\r\n      setTimeout(() => {\r\n        this.$store.dispatch('fetchUserData')\r\n          .then(() => console.log(\"User data refreshed after hand\"))\r\n          .catch(err => console.error(\"Failed to refresh user data:\", err));\r\n      }, 500);\r\n    },\r\n\r\n    //A method to handle game reset\r\n    resetGameState() {\r\n      console.log('Resetting game state for new hand');\r\n      // Reset game-related state but keep previousPlayerHand for reference\r\n      this.previousPlayerHand = [...this.playerHand]; // Store a copy of the current hand\r\n      this.playerHand = []; // Clear the active hand\r\n      this.communityCards = [];\r\n      this.isYourTurn = false;\r\n      this.availableActions = [];\r\n      this.handWinners = [];\r\n      this.showWinnerDisplay = false;\r\n      this.cardRefreshCounter = 0;\r\n\r\n      // Force UI update\r\n      this.$forceUpdate();\r\n\r\n      // Update child components\r\n      this.$nextTick(() => {\r\n        if (this.$refs.playerList && typeof this.$refs.playerList.forceUpdate === 'function') {\r\n          this.$refs.playerList.forceUpdate();\r\n        }\r\n      });\r\n    },\r\n\r\n    // Handle winner display close - modified to keep the correct state flow\r\n    handleWinnerDisplayClose() {\r\n      console.log('Winner display closed');\r\n      this.showWinnerDisplay = false;\r\n\r\n      // Don't clear handWinners immediately to maintain visual consistency\r\n      // Instead, schedule a delayed clearing\r\n      setTimeout(() => {\r\n        this.handWinners = [];\r\n      }, 300);\r\n\r\n      // IMPORTANT FIX: Make sure game turn state is reset properly\r\n      this.endTurn();\r\n      this.isYourTurn = false;\r\n      if (this.actionTimer) {\r\n        this.clearActionTimer();\r\n      }\r\n\r\n      // Also ensure isYourTurnProcessed is reset to prevent turn bugs\r\n      this.isYourTurnProcessed = false;\r\n\r\n      // Request a game state update to ensure UI is up to date\r\n      this.requestStateUpdate();\r\n\r\n      // After short delay, try to fetch user data to update balances\r\n      setTimeout(() => {\r\n        this.$store.dispatch('fetchUserData')\r\n          .then(() => console.log(\"User data refreshed after hand\"))\r\n          .catch(err => console.error(\"Failed to refresh user data:\", err));\r\n      }, 500);\r\n    },\r\n\r\n    startNextHand() {\r\n      if (!this.isCreator || !this.gameId || !this.currentUser) {\r\n        console.warn('Only the creator can start the next hand');\r\n        return;\r\n      }\r\n\r\n      console.log('Starting next hand...');\r\n      this.addToLog('Starting next hand...');\r\n\r\n      // Refresh user data first to ensure we have accurate balances\r\n      this.$store.dispatch('fetchUserData')\r\n        .then(() => {\r\n          // Then tell server to start the next hand\r\n          SocketService.gameSocket?.emit('startNextHand', {\r\n            gameId: this.gameId,\r\n            userId: this.currentUser.id\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(\"Failed to refresh user data before next hand:\", err);\r\n          // Still try to start the hand even if user data refresh fails\r\n          SocketService.gameSocket?.emit('startNextHand', {\r\n            gameId: this.gameId,\r\n            userId: this.currentUser.id\r\n          });\r\n        });\r\n    },\r\n    handleGameStateChange(gameState) {\r\n      // If game state changes from active to waiting, make sure to end any active turns\r\n      if (this.currentGame &&\r\n        this.currentGame.status === 'active' &&\r\n        gameState &&\r\n        gameState.status === 'waiting') {\r\n        console.log('Game state changed from active to waiting, ending any active turns');\r\n        if (this.isYourTurn) {\r\n          this.endTurn();\r\n        }\r\n      }\r\n\r\n      // Update the game state in store\r\n      this.updateGameState(gameState);\r\n\r\n      // Clear any error message after successful game state update\r\n      this.SET_ERROR_MESSAGE('');\r\n    },\r\n    handleDealCards(data) {\r\n      console.log(\"Received cards:\", data);\r\n\r\n      // Check if this is a new hand signal with timestamp\r\n      if (data.newHand && data.timestamp) {\r\n        console.log(\"Received new hand signal with timestamp:\", data.timestamp);\r\n\r\n        // Reset game state for new hand\r\n        this.resetGameState();\r\n\r\n        // Update the timestamp\r\n        this.currentHandTimestamp = data.timestamp;\r\n\r\n        // Small delay to ensure state reset before setting new cards\r\n        setTimeout(() => {\r\n          // Apply the new cards\r\n          this.playerHand = data.hand || [];\r\n          this.addToLog(\"You have been dealt new cards\");\r\n\r\n          // Force UI update\r\n          this.$forceUpdate();\r\n\r\n          // Also update store state\r\n          this.$store.commit('SET_PLAYER_HAND', data.hand || []);\r\n\r\n          // Force update child components\r\n          this.$nextTick(() => {\r\n            if (this.$refs.playerList && typeof this.$refs.playerList.forceUpdate === 'function') {\r\n              this.$refs.playerList.updateForNewHand(data.timestamp);\r\n            }\r\n          });\r\n\r\n          // Request a state update to ensure UI is in sync\r\n          setTimeout(() => {\r\n            this.requestStateUpdate();\r\n          }, 500);\r\n        }, 100);\r\n\r\n        return;\r\n      }\r\n\r\n      // For regular card deals or reconnects\r\n      if (!data || !data.hand || !Array.isArray(data.hand)) {\r\n        console.warn(\"Received invalid card data:\", data);\r\n        return;\r\n      }\r\n\r\n      // Only update if this doesn't have a timestamp or the timestamp is newer than our current hand\r\n      if (!this.currentHandTimestamp ||\r\n        !data.timestamp ||\r\n        data.timestamp >= this.currentHandTimestamp) {\r\n\r\n        console.log(\"Updating cards with data:\", data.hand.map(c => `${c.rank} of ${c.suit}`).join(\", \"));\r\n\r\n        // Small delay to ensure state reset before setting new cards\r\n        setTimeout(() => {\r\n          // Apply the new cards - create a fresh copy to ensure reactivity\r\n          this.playerHand = [...data.hand];\r\n\r\n          if (!data.newHand) {\r\n            this.addToLog(\"You have been dealt cards\");\r\n          }\r\n\r\n          // Force UI update\r\n          this.$forceUpdate();\r\n\r\n          // Update store state\r\n          this.$store.commit('SET_PLAYER_HAND', data.hand);\r\n\r\n          // Also update the timestamp if provided\r\n          if (data.timestamp) {\r\n            this.currentHandTimestamp = data.timestamp;\r\n          }\r\n\r\n          // Mark game as initialized when we get cards\r\n          this.gameInitialized = true;\r\n          this.gameInProgress = true;\r\n\r\n          // Clear any lingering error messages\r\n          this.clearErrorMessage();\r\n        }, 100);\r\n      } else {\r\n        console.log(\"Ignoring older card data with timestamp:\", data.timestamp);\r\n      }\r\n    },\r\n    handleGameStatusChange(statusData) {\r\n      console.log('Game status changed:', statusData);\r\n\r\n      // If game status is changing to waiting, reset for a new hand\r\n      if (statusData.status === 'waiting') {\r\n        console.log('Game status changed to waiting, preparing for new hand');\r\n\r\n        // End any active turns\r\n        if (this.isYourTurn) {\r\n          this.endTurn();\r\n        }\r\n\r\n        // Reset game state\r\n        this.resetGameState();\r\n\r\n        // Clear current hand timestamp to accept new cards\r\n        this.currentHandTimestamp = 0;\r\n      }\r\n    },\r\n    /**\r\n * Check if there's only one player left and show winner\r\n */\r\n    checkLastPlayerStanding() {\r\n      if (!this.currentGame || this.currentGame.status !== 'active' || this.showWinnerDisplay) {\r\n        return false;\r\n      }\r\n\r\n      // Filter for active players who haven't folded\r\n      const activePlayers = this.currentGame.players.filter(p => p.isActive && !p.hasFolded);\r\n\r\n      // If there's only one player remaining, they win\r\n      if (activePlayers.length === 1) {\r\n        const winner = activePlayers[0];\r\n        this.addToLog(`${winner.username} wins by default - last player remaining!`);\r\n\r\n        // Prepare winner data\r\n        this.handWinners = [{\r\n          playerId: winner.id,\r\n          username: winner.username,\r\n          handName: \"Last Player Standing\",\r\n          hand: this.currentUser && winner.id === this.currentUser.id ? this.playerHand : []\r\n        }];\r\n\r\n        // Prepare all players data\r\n        this.allPlayersCards = this.currentGame.players\r\n          .filter(p => p.isActive) // Only include active players\r\n          .map(player => {\r\n            const isWinner = player.id === winner.id;\r\n            return {\r\n              playerId: player.id,\r\n              username: player.username || \"Unknown Player\",\r\n              hand: isWinner && this.currentUser && player.id === this.currentUser.id ? this.playerHand : [],\r\n              isWinner: isWinner,\r\n              handType: isWinner ? \"Winner\" : \"Folded\",\r\n              handDescription: isWinner ? \"Last Player Standing\" : \"Folded\"\r\n            };\r\n          });\r\n\r\n        // Set pot and community cards\r\n        this.winningPot = this.currentGame.pot || 1; // Use at least 1 chip\r\n        this.communityCards = this.currentGame.communityCards || [];\r\n        this.isFoldWin = true;\r\n\r\n        // Show the winner display\r\n        this.showWinnerDisplay = true;\r\n\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n    handleGameUpdate(gameState) {\r\n      if (!gameState) return;\r\n\r\n      console.log(\"Handling game update with status:\", gameState.status);\r\n\r\n      // If game status is waiting but we think it's our turn, fix this inconsistency\r\n      if (gameState.status === 'waiting' && this.isYourTurn) {\r\n        console.log(\"Game is in waiting state but turn is active - fixing inconsistency\");\r\n\r\n        // End the turn and reset related state\r\n        this.endTurn();\r\n        this.clearActionTimer();\r\n        this.isYourTurn = false;\r\n        this.isYourTurnProcessed = false;\r\n\r\n        // Force a component update to reflect changes immediately\r\n        this.$forceUpdate();\r\n      }\r\n\r\n      // Update the game state in store\r\n      this.updateGameState(gameState);\r\n    },\r\n    handleObserverStatus(data) {\r\n      this.isObserver = data.isObserver;\r\n      this.observerMessage = data.message;\r\n\r\n      if (data.isObserver) {\r\n        this.addToLog('You are in observer mode. You can join when the current hand completes.');\r\n      }\r\n    },\r\n    /**\r\n  * Handle player removal notification due to insufficient chips\r\n  * @param {Object} data - Player removal data\r\n  */\r\n    handlePlayerRemoved(data) {\r\n      // Add to game log\r\n      this.addToLog(`${data.username} has been removed from the game due to insufficient chips`);\r\n\r\n      // If it's the current user\r\n      if (this.currentUser && data.userId === this.currentUser.id) {\r\n        // Show a notification to the user\r\n        this.SET_ERROR_MESSAGE(\"You've been removed from the game due to insufficient chips\");\r\n\r\n        // Set observer mode\r\n        this.isObserver = true;\r\n        this.observerMessage = \"You don't have enough chips to continue playing. You are now in observer mode.\";\r\n\r\n        // If it was the user's turn, end it\r\n        if (this.isYourTurn) {\r\n          this.endTurn();\r\n        }\r\n      }\r\n\r\n      // Request updated game state\r\n      this.requestStateUpdate();\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    'currentGame.currentTurn': function (newTurnId) {\r\n      if (newTurnId && this.currentUser && newTurnId !== this.currentUser.id && this.isYourTurn) {\r\n        console.log('Turn inconsistency detected - game says it\\'s not your turn but local state disagrees');\r\n        this.endTurn();\r\n      }\r\n    },\r\n    'currentGame.players': {\r\n      handler(newPlayers, oldPlayers) {\r\n        // Check if number of active players has changed\r\n        if (oldPlayers && newPlayers) {\r\n          const oldActivePlayers = oldPlayers.filter(p => p.isActive && !p.hasFolded);\r\n          const newActivePlayers = newPlayers.filter(p => p.isActive && !p.hasFolded);\r\n\r\n          if (oldActivePlayers.length !== newActivePlayers.length && newActivePlayers.length === 1) {\r\n            // Check if we need to show the winner\r\n            this.checkLastPlayerStanding();\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.gameId = this.$route.params.id;\r\n    this.SET_CURRENT_GAME_ID(this.gameId);\r\n\r\n    // Ensure we clear any previous game state\r\n    this.clearErrorMessage();\r\n\r\n    console.log(`Initializing game with ID: ${this.gameId}`);\r\n\r\n    // Add this line to check for last player standing on initialization\r\n    this.$nextTick(() => {\r\n      if (this.currentGame) this.checkLastPlayerStanding();\r\n    });\r\n  },\r\n\r\n  async mounted() {\r\n    // Get token from localStorage \r\n    const token = localStorage.getItem('token');\r\n    const isAuthenticated = !!token;\r\n\r\n    // Check authentication but avoid redirect loop\r\n    if (!isAuthenticated) {\r\n      console.log('User not authenticated, redirecting to login');\r\n      this.SET_ERROR_MESSAGE('Please login to view this game');\r\n\r\n      // Use replace instead of push to avoid the redirect error\r\n      this.$router.replace('/login');\r\n      return;\r\n    }\r\n\r\n    // If we're authenticated but don't have user data, try to fetch it\r\n    if (!this.currentUser && token) {\r\n      console.log('No user data, attempting to fetch');\r\n      this.$store.dispatch('fetchUserData').catch(err => {\r\n        console.error('Error fetching user data:', err);\r\n      });\r\n    }\r\n\r\n    // Continue with normal initialization\r\n    this.gameId = this.$route.params.id;\r\n    this.SET_CURRENT_GAME_ID(this.gameId);\r\n    this.clearErrorMessage();\r\n\r\n    console.log(`Initializing game with ID: ${this.gameId}`);\r\n\r\n    try {\r\n      // Fetch game data with retry logic\r\n      await this.fetchGameWithRetry(this.gameId, 3);\r\n\r\n      if (this.currentGame) {\r\n        this.addToLog(`Joined game #${this.gameId}`);\r\n\r\n        // Update local game state based on fetched data\r\n        if (this.currentGame.status === 'active') {\r\n          this.gameInProgress = true;\r\n          this.addToLog('Game is already active');\r\n        }\r\n\r\n        // Set up socket connection\r\n        await this.setupSocketConnection();\r\n\r\n        // Once connected, ensure we get regular updates\r\n        if (this.currentUser && this.gameId) {\r\n          // Request a game state update\r\n          if (SocketService.isSocketConnected()) {\r\n            this.requestStateUpdate();\r\n          }\r\n\r\n          // Additional check for active but uninitialized game\r\n          setTimeout(() => {\r\n            if (this.currentGame?.status === 'active' && !this.gameInitialized && this.isCreator) {\r\n              console.log('Game is active but not initialized, requesting initialization');\r\n              this.requestInitialization();\r\n            }\r\n          }, 2000);\r\n        }\r\n      } else {\r\n        throw new Error('Failed to load game data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error setting up game:', error);\r\n      this.SET_ERROR_MESSAGE('Failed to load game. Please try again.');\r\n    };\r\n\r\n    // Add a card refresh interval\r\n    this.cardRefreshInterval = setInterval(() => {\r\n      if (this.playerHand && this.playerHand.length > 0) {\r\n        // If we have cards, check if the UI needs updating\r\n        this.forceCardUpdate();\r\n      }\r\n    }, 2000); // Check every 2 seconds\r\n\r\n    if (this.handlers.handleHandResult) {\r\n      SocketService.on('handResult', this.handlers.handleHandResult);\r\n      this.eventHandlers.push({ event: 'handResult', handler: this.handlers.handleHandResult });\r\n    };\r\n\r\n    const gameUpdateHandler = (gameState) => {\r\n      this.handleGameStateChange(gameState);\r\n    };\r\n    SocketService.on('gameUpdate', gameUpdateHandler);\r\n    this.eventHandlers.push({ event: 'gameUpdate', handler: gameUpdateHandler });\r\n\r\n    SocketService.on('observerStatus', this.handleObserverStatus);\r\n    this.eventHandlers.push({ event: 'observerStatus', handler: this.handleObserverStatus });\r\n\r\n    SocketService.on('creatorChanged', this.handlers.handleCreatorChanged);\r\n    this.eventHandlers.push({ event: 'creatorChanged', handler: this.handlers.handleCreatorChanged });\r\n\r\n    SocketService.on('becameCreator', this.handlers.handleBecameCreator);\r\n    this.eventHandlers.push({ event: 'becameCreator', handler: this.handlers.handleBecameCreator });\r\n\r\n    // Register player removed handler\r\n    SocketService.on('playerRemoved', this.handlers.handlePlayerRemoved);\r\n    this.eventHandlers.push({ event: 'playerRemoved', handler: this.handlers.handlePlayerRemoved });\r\n\r\n    // Handle status changes\r\n    const gameStatusChangeHandler = (statusData) => {\r\n      console.log('Game status changed:', statusData);\r\n\r\n      // If game status is changing to waiting, reset for a new hand\r\n      if (statusData.status === 'waiting') {\r\n        console.log('Game status changed to waiting, preparing for new hand');\r\n\r\n        // End any active turns\r\n        if (this.isYourTurn) {\r\n          this.endTurn();\r\n        }\r\n\r\n        // Reset game state\r\n        this.resetGameState();\r\n\r\n        // Clear current hand timestamp to accept new cards\r\n        this.currentHandTimestamp = 0;\r\n      }\r\n    };\r\n\r\n    SocketService.on('gameStatusChange', gameStatusChangeHandler);\r\n    this.eventHandlers.push({ event: 'gameStatusChange', handler: gameStatusChangeHandler });\r\n\r\n    if (this.handlers && this.handlers.handleHandResult) {\r\n      SocketService.on('handResult', this.handlers.handleHandResult);\r\n      this.eventHandlers.push({ event: 'handResult', handler: this.handlers.handleHandResult });\r\n    }\r\n\r\n    // A fresh card handler for new hands\r\n    const newHandCardsHandler = (data) => {\r\n      if (data && data.newHand && data.timestamp) {\r\n        console.log('Received new hand cards event');\r\n        this.handleDealCards(data);\r\n      }\r\n    };\r\n    SocketService.on('newHandCards', newHandCardsHandler);\r\n    this.eventHandlers.push({ event: 'newHandCards', handler: newHandCardsHandler });\r\n\r\n    this.$watch('currentGame.status', (newStatus, oldStatus) => {\r\n      console.log(`Game status changed from ${oldStatus} to ${newStatus}`);\r\n\r\n      // If status changed from active to waiting, end any active turns\r\n      if (oldStatus === 'active' && newStatus === 'waiting') {\r\n        if (this.isYourTurn) {\r\n          console.log('Game is now waiting - ending current turn');\r\n          this.endTurn();\r\n          this.clearActionTimer();\r\n        }\r\n      }\r\n    });\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // Clear the card refresh interval\r\n    if (this.cardRefreshInterval) {\r\n      clearInterval(this.cardRefreshInterval);\r\n    }\r\n    // Remove event listeners\r\n    this.eventHandlers.forEach(({ event, handler }) => {\r\n      SocketService.off(event, handler);\r\n    });\r\n\r\n    // Clear any timers\r\n    this.clearActionTimer();\r\n\r\n    // Clear error message\r\n    this.clearErrorMessage();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.error-message {\r\n  background-color: #e74c3c;\r\n  color: white;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 300px;\r\n  font-size: 18px;\r\n}\r\n\r\n.game-area {\r\n  display: grid;\r\n  grid-template-columns: 1fr 3fr;\r\n  grid-template-rows: auto 1fr auto;\r\n  gap: 20px;\r\n  grid-template-areas:\r\n    \"status status\"\r\n    \"table table\"\r\n    \"log log\";\r\n}\r\n\r\n.game-table {\r\n  grid-area: table;\r\n  background-color: #1c4e38;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  min-height: 400px;\r\n  position: relative;\r\n}\r\n\r\n.debug-toggle {\r\n  position: fixed;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  background-color: #333;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  z-index: 1000;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .game-area {\r\n    grid-template-columns: 1fr;\r\n    grid-template-areas:\r\n      \"status\"\r\n      \"table\"\r\n      \"log\";\r\n  }\r\n}\r\n\r\n.game-status-wrapper {\r\n  grid-area: status;\r\n  width: 100%;\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Game.vue?vue&type=template&id=2996416b&scoped=true\"\nimport script from \"./Game.vue?vue&type=script&lang=js\"\nexport * from \"./Game.vue?vue&type=script&lang=js\"\nimport style0 from \"./Game.vue?vue&type=style&index=0&id=2996416b&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2996416b\",\n  null\n  \n)\n\nexport default component.exports","// client/src/router/index.js\r\nimport Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\nimport axios from 'axios'\r\nimport Home from '../views/Home.vue'\r\nimport Login from '../views/Login.vue'\r\nimport Register from '../views/Register.vue'\r\nimport Lobby from '../views/Lobby.vue'\r\nimport Game from '../views/Game.vue'\r\nimport store from '../store'\r\n\r\nVue.use(VueRouter)\r\n\r\nconst originalPush = VueRouter.prototype.push\r\nVueRouter.prototype.push = function push(location) {\r\n  return originalPush.call(this, location).catch(err => {\r\n    // Only throw error if it's not a NavigationDuplicated error\r\n    if (err.name !== 'NavigationDuplicated') {\r\n      return Promise.reject(err)\r\n    }\r\n    // Otherwise swallow the error\r\n    return Promise.resolve()\r\n  })\r\n}\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    name: 'Home',\r\n    component: Home\r\n  },\r\n  {\r\n    path: '/login',\r\n    name: 'Login',\r\n    component: Login\r\n  },\r\n  {\r\n    path: '/register',\r\n    name: 'Register',\r\n    component: Register\r\n  },\r\n  {\r\n    path: '/lobby',\r\n    name: 'Lobby',\r\n    component: Lobby,\r\n    meta: { requiresAuth: true }\r\n  },\r\n  {\r\n    path: '/game/:id',\r\n    name: 'Game',\r\n    component: Game,\r\n    meta: { requiresAuth: true }\r\n  }\r\n]\r\n\r\nconst router = new VueRouter({\r\n  mode: 'history',\r\n  base: process.env.BASE_URL,\r\n  routes\r\n})\r\n\r\n// Navigation guard for authentication\r\nrouter.beforeEach(async (to, from, next) => {\r\n  // Check if the route requires authentication\r\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\r\n  \r\n  // Get token from localStorage\r\n  const token = localStorage.getItem('token');\r\n  const isAuthenticated = !!token;\r\n  \r\n  // Set up auth header if token exists\r\n  if (token) {\r\n    axios.defaults.headers.common['x-auth-token'] = token;\r\n  } else {\r\n    delete axios.defaults.headers.common['x-auth-token'];\r\n  }\r\n  \r\n  console.log('Route navigation:', {\r\n    from: from.path,\r\n    to: to.path,\r\n    requiresAuth,\r\n    isAuthenticated,\r\n    hasUserData: !!store.getters.currentUser\r\n  });\r\n  \r\n  // If we have a token but no user data, try to fetch it\r\n  if (isAuthenticated && !store.getters.currentUser) {\r\n    try {\r\n      console.log('Token found, but no user data. Fetching user data...');\r\n      await store.dispatch('fetchUserData');\r\n      console.log('User data loaded successfully');\r\n    } catch (error) {\r\n      console.error('Failed to load user data, clearing auth:', error);\r\n      localStorage.removeItem('token');\r\n      delete axios.defaults.headers.common['x-auth-token'];\r\n      store.commit('CLEAR_AUTH');\r\n    }\r\n  }\r\n  \r\n  // Handle circular redirects\r\n  const isRedirectLoop = from.path === '/game/' + from.params.id && \r\n                        to.path === '/login' && \r\n                        isAuthenticated;\r\n  \r\n  if (isRedirectLoop) {\r\n    console.log('Preventing redirect loop, staying on current page');\r\n    return next(false);\r\n  }\r\n  \r\n  if (requiresAuth && !isAuthenticated) {\r\n    console.log('Authentication required, redirecting to login');\r\n    next('/login');\r\n  } else if (to.path === '/login' && isAuthenticated) {\r\n    // Optional: redirect already logged in users away from login page\r\n    console.log('Already authenticated, redirecting to lobby');\r\n    next('/lobby');\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n\r\nexport default router","// client/src/main.js\r\nimport Vue from \"vue\";\r\nimport App from \"./App.vue\";\r\nimport router from \"./router\";\r\nimport store from \"./store\";\r\nimport axios from \"axios\";\r\nimport { setupNetworkDebug } from \"./utils/debug\";\r\nimport SocketService from \"./services/SocketService\";\r\nimport { loadConfig } from \"./services/config\";\r\n\r\nVue.config.productionTip = false;\r\n\r\n// Set base URL for axios to local server with updated port\r\nconst localUrl = \"http://localhost:5000\"; // Updated from 3000 to 5000\r\naxios.defaults.baseURL = localUrl;\r\nconsole.log(\"Setting axios base URL to:\", localUrl);\r\n\r\n// Configure axios\r\naxios.defaults.timeout = 10000; // 10 seconds timeout\r\n\r\n// Set up global error handler\r\nVue.config.errorHandler = (err, vm, info) => {\r\n  console.error(\"Vue Error:\", err);\r\n  console.error(\"Error Info:\", info);\r\n};\r\n\r\n// Initialize auth from localStorage if available\r\nconst initAuth = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    // Set token in store\r\n    store.commit(\"SET_TOKEN\", token);\r\n    // Set header for future requests\r\n    axios.defaults.headers.common[\"x-auth-token\"] = token;\r\n\r\n    try {\r\n      // Fetch user data\r\n      await store.dispatch(\"fetchUserData\");\r\n      console.log(\"User data loaded from token\");\r\n    } catch (error) {\r\n      console.error(\"Error loading user data from token:\", error);\r\n      // Clear invalid token\r\n      localStorage.removeItem(\"token\");\r\n      delete axios.defaults.headers.common[\"x-auth-token\"];\r\n      store.commit(\"CLEAR_AUTH\");\r\n    }\r\n  }\r\n};\r\n\r\n// Load config and then initialize app\r\nloadConfig()\r\n  .then(async (config) => {\r\n    console.log(\"Application config loaded:\", config);\r\n\r\n    // Update axios base URL if it's different\r\n    if (config.apiUrl && config.apiUrl !== axios.defaults.baseURL) {\r\n      axios.defaults.baseURL = config.apiUrl;\r\n      console.log(\"Updated axios base URL to:\", config.apiUrl);\r\n    }\r\n\r\n    // Initialize auth before mounting app\r\n    await initAuth();\r\n\r\n    // Initialize Vue instance\r\n    new Vue({\r\n      router,\r\n      store,\r\n      render: (h) => h(App),\r\n    }).$mount(\"#app\");\r\n\r\n    // Initialize socket connection when a user is authenticated\r\n    store.watch(\r\n      (state) => state.user,\r\n      (newUser) => {\r\n        if (newUser && newUser.id) {\r\n          // Initialize socket and register user\r\n          SocketService.init()\r\n            .then(() => {\r\n              SocketService.registerUser(newUser.id);\r\n              console.log(\r\n                \"Socket initialized and user registered:\",\r\n                newUser.id\r\n              );\r\n            })\r\n            .catch((err) => {\r\n              console.error(\"Failed to initialize socket:\", err);\r\n            });\r\n        }\r\n      }\r\n    );\r\n  })\r\n  .catch((error) => {\r\n    console.error(\"Failed to load config:\", error);\r\n\r\n    // Still initialize auth\r\n    initAuth().then(() => {\r\n      // Initialize Vue even if config fails\r\n      new Vue({\r\n        router,\r\n        store,\r\n        render: (h) => h(App),\r\n      }).$mount(\"#app\");\r\n    });\r\n  });\r\n\r\n// Set up network debugging in development\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  setupNetworkDebug();\r\n}\r\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Lobby.vue?vue&type=style&index=0&id=5559e34d&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameStatus.vue?vue&type=style&index=0&id=a7794128&prod&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Login.vue?vue&type=style&index=0&id=de3b954c&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GameHeader.vue?vue&type=style&index=0&id=fa9af8ac&prod&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Register.vue?vue&type=style&index=0&id=08a69fab&prod&scoped=true&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=24649ee0&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerActions.vue?vue&type=style&index=0&id=a2b198c8&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ActionTimer.vue?vue&type=style&index=0&id=204ef513&prod&scoped=true&lang=css\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&id=543c6752&prod&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerReadyComponent.vue?vue&type=style&index=0&id=40df27a2&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PlayerList.vue?vue&type=style&index=0&id=b054c84e&prod&scoped=true&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CommunityCards.vue?vue&type=style&index=0&id=3701dc0c&prod&scoped=true&lang=css\""],"sourceRoot":""}