(function(e){function t(t){for(var a,i,o=t[0],l=t[1],c=t[2],u=0,m=[];u<o.length;u++)i=o[u],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&m.push(r[i][0]),r[i]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);d&&d(t);while(m.length)m.shift()();return n.push.apply(n,c||[]),s()}function s(){for(var e,t=0;t<n.length;t++){for(var s=n[t],a=!0,o=1;o<s.length;o++){var l=s[o];0!==r[l]&&(a=!1)}a&&(n.splice(t--,1),e=i(i.s=s[0]))}return e}var a={},r={app:0},n=[];function i(t){if(a[t])return a[t].exports;var s=a[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=a,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(s,a,function(t){return e[t]}.bind(null,a));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/";var o=window["webpackJsonp"]=window["webpackJsonp"]||[],l=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var d=l;n.push([0,"chunk-vendors"]),s()})({0:function(e,t,s){e.exports=s("56d7")},"131f":function(e,t,s){"use strict";s("30b58")},"1eff":function(e,t,s){},"218a":function(e,t,s){"use strict";s("1eff")},"26cf":function(e,t,s){},2885:function(e,t,s){},"2a43":function(e,t,s){},"30b58":function(e,t,s){},"34d1":function(e,t,s){"use strict";s("bdf7")},"3a66":function(e,t,s){"use strict";s("8fcd")},4234:function(e,t,s){"use strict";s("945c")},"43e3":function(e,t,s){"use strict";s("5846")},"44f4":function(e,t,s){},"46f2":function(e,t,s){},"56d7":function(e,t,s){"use strict";s.r(t);var a=s("2b0e"),r=function(){var e=this,t=e._self._c;return t("div",{attrs:{id:"app"}},[t("router-view")],1)},n=[],i=(s("bf87"),s("2877")),o={},l=Object(i["a"])(o,r,n,!1,null,null,null),c=l.exports,d=(s("14d9"),s("e9f5"),s("a732"),s("8c4f")),u=s("bc3a"),m=s.n(u),h=function(){var e=this,t=e._self._c;return t("div",{staticClass:"container"},[t("div",{staticClass:"home"},[t("h1",[e._v("Nyanguni Kancane")]),t("h2",[e._v("Texas Hold'em Poker")]),t("div",{staticClass:"card"},[t("p",[e._v("Welcome to Nyanguni Kancane, a simple Texas Hold'em poker game.")]),t("p",[e._v("1 chip = 500 rupiah")]),e.isAuthenticated?t("div",{staticClass:"action-buttons"},[t("router-link",{staticClass:"btn",attrs:{to:"/lobby"}},[e._v("Enter Lobby")]),t("button",{staticClass:"btn btn-secondary",on:{click:e.logout}},[e._v("Logout")])],1):t("div",{staticClass:"action-buttons"},[t("router-link",{staticClass:"btn",attrs:{to:"/login"}},[e._v("Login")]),t("router-link",{staticClass:"btn btn-secondary",attrs:{to:"/register"}},[e._v("Register")])],1)]),e._m(0)])])},g=[function(){var e=this,t=e._self._c;return t("div",{staticClass:"card rules"},[t("h3",[e._v("Game Rules")]),t("h4",[e._v("1. The Basics:")]),t("ul",[t("li",[t("strong",[e._v("Hole Cards:")]),e._v(" Each player is dealt two private cards, which they keep hidden from other players.")]),t("li",[t("strong",[e._v("Community Cards:")]),e._v(' Five cards are dealt face-up on the table, known as the "board".')]),t("li",[t("strong",[e._v("Hand Formation:")]),e._v(" Players combine their two hole cards with any combination of the five community cards to create their best five-card poker hand.")])]),t("h4",[e._v("2. The Game Flow:")]),t("ul",[t("li",[t("strong",[e._v("Blinds:")]),e._v(' Before any cards are dealt, two players (the "small blind" and "big blind") are required to place compulsory bets.')]),t("li",[t("strong",[e._v("Pre-Flop Betting:")]),e._v(' A round of betting occurs (players bet 1 chip into the pot) before the first three community cards (the "flop") are dealt.')]),t("li",[t("strong",[e._v("The Flop:")]),e._v(" Three community cards are dealt face-up, followed by another round of betting.")]),t("li",[t("strong",[e._v("The Turn:")]),e._v(' A fourth community card (the "turn") is dealt face-up, followed by another round of betting.')]),t("li",[t("strong",[e._v("The River:")]),e._v(' A fifth and final community card (the "river") is dealt face-up, followed by the final round of betting.')]),t("li",[t("strong",[e._v("Showdown:")]),e._v(" If multiple players remain in the hand after the final betting round, they reveal their hole cards, and the player with the best five-card poker hand wins the pot.")])]),t("h4",[e._v("3. Betting Options:")]),t("ul",[t("li",[t("strong",[e._v("Check:")]),e._v(" To pass the betting action to the next player without placing a bet.")]),t("li",[t("strong",[e._v("Bet:")]),e._v(" To place a bet, requiring other players to match the bet or fold.")]),t("li",[t("strong",[e._v("Call:")]),e._v(" To match the current bet.")]),t("li",[t("strong",[e._v("Raise:")]),e._v(" To increase the current bet.")]),t("li",[t("strong",[e._v("Fold:")]),e._v(" To discard your hand and forfeit your chips for that hand.")])]),t("h4",[e._v("4. Poker Hand Rankings (from highest to lowest):")]),t("ul",[t("li",[t("strong",[e._v("Royal Flush:")]),e._v(" Ace, King, Queen, Jack, and Ten of the same suit.")]),t("li",[t("strong",[e._v("Straight Flush:")]),e._v(" Five consecutive cards of the same suit.")]),t("li",[t("strong",[e._v("Four of a Kind:")]),e._v(" Four cards of the same rank.")]),t("li",[t("strong",[e._v("Full House:")]),e._v(" Three of a kind and a pair.")]),t("li",[t("strong",[e._v("Flush:")]),e._v(" Five cards of the same suit, not necessarily in sequence.")]),t("li",[t("strong",[e._v("Straight:")]),e._v(" Five consecutive cards, not necessarily of the same suit.")]),t("li",[t("strong",[e._v("Three of a Kind:")]),e._v(" Three cards of the same rank.")]),t("li",[t("strong",[e._v("Two Pair:")]),e._v(" Two different pairs of cards.")]),t("li",[t("strong",[e._v("One Pair:")]),e._v(" A pair of cards of the same rank.")]),t("li",[t("strong",[e._v("High Card:")]),e._v(" If no other hand is formed, the highest card in the hand determines the winner.")])])])}],p=s("2f62"),y={name:"Home",computed:{...Object(p["c"])(["isAuthenticated"])},methods:{...Object(p["b"])(["logout"])}},v=y,f=(s("a859"),Object(i["a"])(v,h,g,!1,null,"24649ee0",null)),C=f.exports,_=function(){var e=this,t=e._self._c;return t("div",{staticClass:"container"},[t("div",{staticClass:"auth-form"},[t("h2",[e._v("Login")]),e.errorMessage?t("div",{staticClass:"error-message"},[e._v(" "+e._s(e.errorMessage)+" "),t("button",{staticClass:"close-error",on:{click:e.clearErrorMessage}},[e._v("×")])]):e._e(),t("form",{on:{submit:function(t){return t.preventDefault(),e.handleLogin.apply(null,arguments)}}},[t("div",{staticClass:"form-group"},[t("label",{attrs:{for:"username"}},[e._v("Username")]),t("input",{directives:[{name:"model",rawName:"v-model",value:e.username,expression:"username"}],staticClass:"form-control",attrs:{type:"text",id:"username",required:""},domProps:{value:e.username},on:{input:function(t){t.target.composing||(e.username=t.target.value)}}})]),t("div",{staticClass:"form-group"},[t("label",{attrs:{for:"password"}},[e._v("Password")]),t("input",{directives:[{name:"model",rawName:"v-model",value:e.password,expression:"password"}],staticClass:"form-control",attrs:{type:"password",id:"password",required:""},domProps:{value:e.password},on:{input:function(t){t.target.composing||(e.password=t.target.value)}}})]),t("button",{staticClass:"btn",attrs:{type:"submit",disabled:e.isLoading}},[e._v(" "+e._s(e.isLoading?"Logging in...":"Login")+" ")])]),t("p",{staticClass:"register-link"},[e._v(" Don't have an account? "),t("router-link",{attrs:{to:"/register"}},[e._v("Register")])],1),e.showDiagnostics?t("div",[t("hr"),t("ApiDiagnostic",{ref:"diagnostics"})],1):e._e(),t("div",{staticClass:"debug-section"},[t("button",{staticClass:"debug-button",on:{click:e.toggleDiagnostics}},[e._v(" "+e._s(e.showDiagnostics?"Hide Diagnostics":"Show Diagnostics")+" ")])])])])},b=[],S=(s("d9e2"),function(){var e=this,t=e._self._c;return t("div",{staticClass:"diagnostic-panel"},[t("h3",[e._v("API Diagnostic")]),e.loading?t("div",{staticClass:"status-section"},[t("p",[e._v("Testing API connection...")]),t("div",{staticClass:"loader"})]):t("div",{staticClass:"status-section"},[t("div",{staticClass:"status-item",class:{success:"connected"===e.apiStatus,error:"failed"===e.apiStatus}},[t("span",{staticClass:"status-label"},[e._v("API Status:")]),t("span",{staticClass:"status-value"},[e._v(e._s("connected"===e.apiStatus?"Connected":"Failed"))])]),t("div",{staticClass:"status-item"},[t("span",{staticClass:"status-label"},[e._v("API URL:")]),t("span",{staticClass:"status-value"},[e._v(e._s(e.apiUrl))])]),t("div",{staticClass:"status-item"},[t("span",{staticClass:"status-label"},[e._v("Current Origin:")]),t("span",{staticClass:"status-value"},[e._v(e._s(e.currentOrigin))])]),e.errorMessage?t("div",{staticClass:"status-item"},[t("span",{staticClass:"status-label"},[e._v("Error:")]),t("span",{staticClass:"status-value error"},[e._v(e._s(e.errorMessage))])]):e._e()]),t("div",{staticClass:"action-section"},[t("button",{staticClass:"test-button",attrs:{disabled:e.loading},on:{click:e.testConnection}},[e._v(" Test Connection ")]),t("button",{staticClass:"test-button",attrs:{disabled:e.loading},on:{click:e.testDirectConnection}},[e._v(" Test Direct Connection (Port 5000) ")]),t("button",{staticClass:"test-button warning",attrs:{disabled:e.loading},on:{click:e.clearNgrok}},[e._v(" Clear Ngrok URL ")])])])}),T=[],R={name:"ApiDiagnostic",data(){return{apiStatus:"unknown",apiUrl:m.a.defaults.baseURL||window.location.origin+"/api",currentOrigin:window.location.origin,loading:!1,errorMessage:""}},mounted(){this.testConnection()},methods:{async clearNgrok(){this.loading=!0,this.errorMessage="";try{console.log("Removing ngrok URL from localStorage"),localStorage.removeItem("ngrokUrl"),localStorage.setItem("useNgrok","false"),this.apiUrl=window.location.origin+"/api",m.a.defaults.baseURL=this.apiUrl,await this.testConnection(),setTimeout(()=>{window.location.reload()},1e3)}catch(e){console.error("Error clearing ngrok settings:",e),this.errorMessage="Failed to clear ngrok settings: "+e.message}finally{this.loading=!1}},async testConnection(){this.loading=!0,this.errorMessage="";try{const t=await m.a.get("/api",{timeout:5e3});if(console.log("API ping response:",t.data),200===t.status){this.apiStatus="connected";try{const e=await m.a.get("/api/config",{timeout:5e3});console.log("API config:",e.data),e.data.apiUrl&&(this.apiUrl=e.data.apiUrl)}catch(e){console.log("Config fetch error (non-critical):",e)}}else this.apiStatus="failed",this.errorMessage="Unexpected status: "+t.status}catch(t){this.apiStatus="failed",console.error("API connection test failed:",t),t.response?this.errorMessage=`Server responded with error: ${t.response.status} ${t.response.statusText}`:t.request?this.errorMessage="No response received from server. Check your connection and make sure the server is running.":this.errorMessage="Request setup error: "+t.message}finally{this.loading=!1}},async testDirectConnection(){this.loading=!0,this.errorMessage="";try{const e="http://localhost:5000/api";console.log("Testing direct connection to:",e);const t=await m.a.get(e,{timeout:5e3});console.log("Direct API ping response:",t.data),200===t.status?(this.apiStatus="connected",this.apiUrl=e,this.errorMessage="Direct connection successful! Try restarting your client app."):(this.apiStatus="failed",this.errorMessage="Direct connection - Unexpected status: "+t.status)}catch(e){this.apiStatus="failed",console.error("Direct connection test failed:",e),e.response?this.errorMessage="Direct connection - Server responded: "+e.response.status:e.request?this.errorMessage="Direct connection failed - No response received. Ensure server is running on port 5000.":this.errorMessage="Direct connection error: "+e.message}finally{this.loading=!1}}}},w=R,G=(s("34d1"),Object(i["a"])(w,S,T,!1,null,"743b3513",null)),A=G.exports,E={name:"Login",components:{ApiDiagnostic:A},data(){return{username:"",password:"",isLoading:!1,showDiagnostics:!1,loginAttempts:0}},computed:{...Object(p["c"])(["errorMessage"])},methods:{...Object(p["b"])(["login","clearErrorMessage"]),...Object(p["d"])(["SET_ERROR_MESSAGE"]),toggleDiagnostics(){this.showDiagnostics=!this.showDiagnostics,this.showDiagnostics&&this.$refs.diagnostics&&this.$refs.diagnostics.testConnection()},async handleLogin(){this.isLoading=!0,this.clearErrorMessage();try{console.log("Login request to:",m.a.defaults.baseURL);const e=new Promise((e,t)=>{setTimeout(()=>t(new Error("Login request timed out")),1e4)}),t=await Promise.race([this.login({username:this.username,password:this.password}),e]);if(t.success){console.log("Login successful!",t);const e=t.token||localStorage.getItem("token");e?(localStorage.setItem("token",e),console.log("Token saved to localStorage"),m.a.defaults.headers.common["x-auth-token"]=e,console.log("Auth header set for axios"),this.$store.getters.currentUser||(console.log("No user data available, fetching from server"),await this.$store.dispatch("fetchUserData"))):console.warn("No token received from login"),this.$router.push("/lobby").catch(e=>{"NavigationDuplicated"!==e.name&&console.error("Navigation error:",e)})}else console.error("Login failed:",t),this.loginAttempts++,this.loginAttempts>=2&&(this.showDiagnostics=!0,this.$refs.diagnostics&&this.$refs.diagnostics.testConnection())}catch(t){var e;console.error("Login error:",t),"Login request timed out"===t.message?this.SET_ERROR_MESSAGE("Login request timed out. Please check your connection and try again."):0===(null===(e=t.response)||void 0===e?void 0:e.status)||t.message.includes("Network Error")?this.SET_ERROR_MESSAGE("Network error. Please ensure you have internet access and the server is running."):this.SET_ERROR_MESSAGE(t.message||"Login failed. Please try again."),this.showDiagnostics=!0,this.$refs.diagnostics&&this.$nextTick(()=>{this.$refs.diagnostics.testConnection()})}finally{this.isLoading=!1}},async createGameDirectly(){this.isCreating=!0,this.clearErrorMessage();try{const e=localStorage.getItem("token");if(!e)throw new Error("No authentication token found");const t=await m.a.post("/api/games",{creatorId:this.currentUser.id,creatorName:this.currentUser.username},{headers:{"x-auth-token":e,"Content-Type":"application/json"}});if(console.log("Direct API response:",t.data),!t.data||!t.data.gameId)throw new Error("Invalid server response");this.$router.push("/game/"+t.data.gameId)}catch(e){console.error("Direct API call error:",e),e.response?(console.error("Response data:",e.response.data),console.error("Status:",e.response.status),this.SET_ERROR_MESSAGE(e.response.data.msg||"Error "+e.response.status)):e.request?this.SET_ERROR_MESSAGE("No response from server. Check your connection."):this.SET_ERROR_MESSAGE(e.message||"Error creating game")}finally{this.isCreating=!1}},async testApiConnection(){this.apiTestResult="Testing API connection...";try{const s=await m.a.get("/api",{timeout:5e3});this.apiTestResult=`API base endpoint: ${s.status} OK\n`;const a=localStorage.getItem("token");if(!a)return void(this.apiTestResult+="No auth token found!\n");try{const e=await m.a.get("/api/auth/user",{headers:{"x-auth-token":a},timeout:5e3});this.apiTestResult+=`Auth test: ${e.status} OK\n`,this.apiTestResult+=`User data: ${JSON.stringify(e.data,null,2)}\n`}catch(e){this.apiTestResult+=`Auth test failed: ${e.message}\n`,e.response&&(this.apiTestResult+=`Status: ${e.response.status}\n`,this.apiTestResult+=`Response: ${JSON.stringify(e.response.data,null,2)}\n`)}try{const e=await m.a.get("/api/games",{headers:{"x-auth-token":a},timeout:5e3});this.apiTestResult+=`Games list test: ${e.status} OK\n`,this.apiTestResult+=`Games count: ${e.data.length}\n`}catch(t){this.apiTestResult+=`Games list test failed: ${t.message}\n`,t.response&&(this.apiTestResult+=`Status: ${t.response.status}\n`,this.apiTestResult+=`Response: ${JSON.stringify(t.response.data,null,2)}\n`)}}catch(s){this.apiTestResult="API test failed: "+s.message,console.error("API test error:",s)}},async directJoinGame(e){if(e){this.isJoining=!0,this.statusMessage="Joining game...";try{console.log("Directly joining game "+e);const t=localStorage.getItem("token");if(!t)throw new Error("No authentication token found");const s=await m.a.post("/api/games/join/"+e,{playerId:this.currentUser.id,playerName:this.currentUser.username},{headers:{"x-auth-token":t},timeout:5e3});console.log("Join game response:",s.data),this.$store.commit("SET_CURRENT_GAME_ID",e),this.statusMessage="Joined! Redirecting...",window.location.href="/game/"+e}catch(t){console.error("Error joining game:",t);let e="Error joining game. Please try again.";t.response?(console.error("Server response:",t.response.data),e=t.response.data.msg||"Server error: "+t.response.status):e=t.request?"No response from server. Check your network connection.":t.message||e,this.SET_ERROR_MESSAGE(e)}finally{this.statusMessage="",this.isJoining=!1}}else this.SET_ERROR_MESSAGE("Game ID is required")}},beforeUnmount(){this.clearErrorMessage()}},k=E,I=(s("7f75"),Object(i["a"])(k,_,b,!1,null,"de3b954c",null)),U=I.exports,P=function(){var e=this,t=e._self._c;return t("div",{staticClass:"container"},[t("div",{staticClass:"auth-form"},[t("h2",[e._v("Register")]),e.errorMessage?t("div",{staticClass:"error-message"},[e._v(" "+e._s(e.errorMessage)+" ")]):e._e(),t("form",{on:{submit:function(t){return t.preventDefault(),e.handleRegister.apply(null,arguments)}}},[t("div",{staticClass:"form-group"},[t("label",{attrs:{for:"username"}},[e._v("Username")]),t("input",{directives:[{name:"model",rawName:"v-model",value:e.username,expression:"username"}],staticClass:"form-control",attrs:{type:"text",id:"username",required:""},domProps:{value:e.username},on:{input:function(t){t.target.composing||(e.username=t.target.value)}}})]),t("div",{staticClass:"form-group"},[t("label",{attrs:{for:"password"}},[e._v("Password")]),t("input",{directives:[{name:"model",rawName:"v-model",value:e.password,expression:"password"}],staticClass:"form-control",attrs:{type:"password",id:"password",required:""},domProps:{value:e.password},on:{input:function(t){t.target.composing||(e.password=t.target.value)}}})]),t("div",{staticClass:"form-group"},[t("label",{attrs:{for:"confirmPassword"}},[e._v("Confirm Password")]),t("input",{directives:[{name:"model",rawName:"v-model",value:e.confirmPassword,expression:"confirmPassword"}],staticClass:"form-control",attrs:{type:"password",id:"confirmPassword",required:""},domProps:{value:e.confirmPassword},on:{input:function(t){t.target.composing||(e.confirmPassword=t.target.value)}}}),e.passwordsMatch?e._e():t("div",{staticClass:"validation-error"},[e._v(" Passwords do not match ")])]),t("button",{staticClass:"btn",attrs:{type:"submit",disabled:e.isLoading||!e.passwordsMatch}},[e._v(" "+e._s(e.isLoading?"Registering...":"Register")+" ")])]),t("p",{staticClass:"login-link"},[e._v(" Already have an account? "),t("router-link",{attrs:{to:"/login"}},[e._v("Login")])],1)])])},L=[],M={name:"Register",data(){return{username:"",password:"",confirmPassword:"",isLoading:!1}},computed:{...Object(p["c"])(["errorMessage"]),passwordsMatch(){return!this.confirmPassword||this.password===this.confirmPassword}},methods:{...Object(p["b"])(["register","clearErrorMessage"]),async handleRegister(){if(this.passwordsMatch){this.isLoading=!0;try{const e=await this.register({username:this.username,password:this.password});e.success&&this.$router.push("/lobby")}catch(e){console.error("Registration error:",e)}finally{this.isLoading=!1}}}},beforeUnmount(){this.clearErrorMessage()}},D=M,$=(s("8828"),Object(i["a"])(D,P,L,!1,null,"08a69fab",null)),O=$.exports,N=function(){var e=this,t=e._self._c;return t("div",{staticClass:"container"},[t("div",{staticClass:"lobby"},[t("h2",[e._v("Game Lobby")]),e.errorMessage?t("div",{staticClass:"error-message"},[e._v(" "+e._s(e.errorMessage)+" "),t("button",{staticClass:"close-error",on:{click:e.clearErrorMessage}},[e._v("×")])]):e._e(),e.statusMessage?t("div",{staticClass:"status-message"},[e._v(" "+e._s(e.statusMessage)+" ")]):e._e(),t("div",{staticClass:"user-info card"},[t("h3",[e._v("Welcome, "+e._s(e.currentUser?e.currentUser.username:"Player"))]),t("p",[e._v("Balance: "+e._s(e.currentUser?e.currentUser.balance:0)+" chips ("+e._s(e.formatRupiah(e.currentUser?500*e.currentUser.balance:0))+")")])]),t("div",{staticClass:"lobby-actions"},[t("div",{staticClass:"card"},[t("h3",[e._v("Create New Game")]),t("p",[e._v("Start a new poker table and invite other players")]),t("button",{staticClass:"btn",attrs:{disabled:e.isCreating||e.isJoining},on:{click:e.handleCreateGame}},[e._v(" "+e._s(e.isCreating?"Creating...":"Create Game")+" ")])]),t("div",{staticClass:"card"},[t("h3",[e._v("Join Existing Game")]),t("p",[e._v("Enter a 6-character game ID to join")]),t("div",{staticClass:"form-group"},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.gameIdInput,expression:"gameIdInput"}],staticClass:"form-control",attrs:{type:"text",placeholder:"Enter Game ID",maxlength:"6",disabled:e.isCreating||e.isJoining},domProps:{value:e.gameIdInput},on:{input:function(t){t.target.composing||(e.gameIdInput=t.target.value)}}})]),t("button",{staticClass:"btn",attrs:{disabled:!e.gameIdInput||6!==e.gameIdInput.length||e.isCreating||e.isJoining},on:{click:e.handleJoinGame}},[e._v(" "+e._s(e.isJoining?"Joining...":"Join Game")+" ")])])]),t("div",{staticClass:"lobby-footer"},[t("button",{staticClass:"btn btn-secondary",attrs:{disabled:e.isCreating||e.isJoining},on:{click:e.logout}},[e._v("Logout")])])])])},H=[],x=(s("910d"),s("7d54"),s("daa8"));s("ab43");a["a"].use(p["a"]);var F=new p["a"].Store({state:{user:null,token:localStorage.getItem("token")||"",currentGame:null,currentGameId:null,playerHand:[],errorMessage:"",isYourTurn:!1,availableActions:[],isLoading:!1,gamesList:[],userGames:[]},getters:{isAuthenticated:e=>!!e.token,currentUser:e=>e.user,currentGameId:e=>e.currentGameId,currentGame:e=>e.currentGame,playerHand:e=>e.playerHand,errorMessage:e=>e.errorMessage,isYourTurn:e=>e.isYourTurn,availableActions:e=>e.availableActions,isLoading:e=>e.isLoading,gamesList:e=>e.gamesList,userGames:e=>e.userGames},mutations:{SET_LOADING(e,t){e.isLoading=t},SET_TOKEN(e,t){e.token=t},SET_USER(e,t){if(t){var s,a,r,n;const i={...t};!i.id&&i._id&&(i.id=i._id),i.id&&!i._id&&(i._id=i.id),"object"===typeof i.id&&null!==(s=i.id)&&void 0!==s&&s.$oid&&(i.id=i.id.$oid),"object"===typeof i._id&&null!==(a=i._id)&&void 0!==a&&a.$oid&&(i._id=i._id.$oid),"object"===typeof i.id&&"function"===typeof(null===(r=i.id)||void 0===r?void 0:r.toString)&&(i.id=i.id.toString()),"object"===typeof i._id&&"function"===typeof(null===(n=i._id)||void 0===n?void 0:n.toString)&&(i._id=i._id.toString()),i.id&&(i.id=String(i.id)),i._id&&(i._id=String(i._id)),e.user=i,console.log("User data standardized and stored in state:",i)}else e.user=null},CLEAR_AUTH(e){e.token="",e.user=null},SET_CURRENT_GAME(e,t){e.currentGame=t},SET_CURRENT_GAME_ID(e,t){e.currentGameId=t},SET_PLAYER_HAND(e,t){e.playerHand=[],e.playerHand=[...t],console.log("Vuex store updated player hand:",t.map(e=>`${e.rank} of ${e.suit}`).join(", "))},FORCE_UPDATE_CARDS(e,t){t&&Array.isArray(t)&&(e.playerHand.length=0,t.forEach(t=>{e.playerHand.push({...t,_updated:Date.now()})}),console.log("Vuex store FORCE updated player hand:",e.playerHand.map(e=>`${e.rank} of ${e.suit}`).join(", ")))},SET_ERROR_MESSAGE(e,t){e.errorMessage=t},CLEAR_ERROR_MESSAGE(e){e.errorMessage=""},SET_YOUR_TURN(e,t){e.isYourTurn=t},SET_AVAILABLE_ACTIONS(e,t){e.availableActions=t},SET_GAMES_LIST(e,t){e.gamesList=t},SET_USER_GAMES(e,t){e.userGames=t},UPDATE_USER_BALANCE(e,t){e.user&&(e.user.balance=t)}},actions:{async login({commit:e,dispatch:t},s){e("SET_LOADING",!0),e("CLEAR_ERROR_MESSAGE");try{console.log("Sending login request with credentials:",{username:s.username,password:"***HIDDEN***"});const a=await m.a.post("/api/auth/login",s);console.log("Login response received:",a);const{token:r,user:n}=a.data;if(!r)return e("SET_ERROR_MESSAGE","No token received from server"),{success:!1,error:"Authentication failed"};if(localStorage.setItem("token",r),e("SET_TOKEN",r),m.a.defaults.headers.common["x-auth-token"]=r,n&&n.id&&n.username)return e("SET_USER",n),{success:!0,token:r};{const e=await t("fetchUserData");return{success:e.success,token:r}}}catch(r){var a;console.error("Login error full details:",r);const t=(null===(a=r.response)||void 0===a||null===(a=a.data)||void 0===a?void 0:a.msg)||"Login failed";return e("SET_ERROR_MESSAGE",t),{success:!1,error:t}}finally{e("SET_LOADING",!1)}},async register({commit:e,dispatch:t},s){e("SET_LOADING",!0),e("CLEAR_ERROR_MESSAGE");try{const a=await m.a.post("/api/auth/register",s),{token:r,user:n}=a.data;return localStorage.setItem("token",r),e("SET_TOKEN",r),n&&n.id&&n.username?(e("SET_USER",n),{success:!0}):await t("fetchUserData")}catch(r){var a;const t=(null===(a=r.response)||void 0===a||null===(a=a.data)||void 0===a?void 0:a.msg)||"Registration failed";return e("SET_ERROR_MESSAGE",t),{success:!1,error:t}}finally{e("SET_LOADING",!1)}},async fetchUserData({commit:e,state:t,dispatch:s}){e("SET_LOADING",!0);try{if(!t.token){const t=localStorage.getItem("token");if(!t)return e("SET_ERROR_MESSAGE","No authentication token"),{success:!1,error:"No authentication token"};e("SET_TOKEN",t),m.a.defaults.headers.common["x-auth-token"]=t}const s=await m.a.get("/api/auth/user",{headers:{"x-auth-token":t.token},timeout:8e3}),a=s.data;if(!a||!a.id&&!a._id||!a.username)return console.error("Incomplete user data received:",a),e("SET_ERROR_MESSAGE","Received incomplete user data from server"),{success:!1,error:"Incomplete user data"};const r={...a,id:a.id||a._id,_id:a._id||a.id};return"object"===typeof r.id&&r.id.$oid&&(r.id=r.id.$oid),"object"===typeof r._id&&r._id.$oid&&(r._id=r._id.$oid),r.id=String(r.id),r._id=String(r._id),e("SET_USER",r),console.log("User data fetched successfully:",r),{success:!0,user:r}}catch(a){return console.error("Failed to fetch user data:",a),a.response&&401===a.response.status&&(console.log("Authentication token expired. Logging out..."),s("logout")),e("SET_ERROR_MESSAGE","Failed to fetch user data"),{success:!1,error:"Failed to fetch user data"}}finally{e("SET_LOADING",!1)}},logout({commit:e}){localStorage.removeItem("token"),e("CLEAR_AUTH"),Mt.push("/login")},async fetchGames({commit:e,state:t}){e("SET_LOADING",!0);try{const s=await m.a.get("/api/games",{headers:{"x-auth-token":t.token}});return e("SET_GAMES_LIST",s.data),{success:!0,games:s.data}}catch(s){return console.error("Fetch games error:",s),{success:!1,error:"Failed to fetch games"}}finally{e("SET_LOADING",!1)}},async fetchUserGames({commit:e,state:t}){e("SET_LOADING",!0);try{const s=await m.a.get("/api/games/user",{headers:{"x-auth-token":t.token}});return e("SET_USER_GAMES",s.data),{success:!0,games:s.data}}catch(s){return console.error("Fetch user games error:",s),{success:!1,error:"Failed to fetch your games"}}finally{e("SET_LOADING",!1)}},async createGame({commit:e,state:t}){e("SET_LOADING",!0),e("CLEAR_ERROR_MESSAGE");try{if(!t.user||!t.token)return e("SET_ERROR_MESSAGE","User not authenticated"),{success:!1,error:"User not authenticated"};const r=t.user.id,n=t.user.username;if(!r||!n)return e("SET_ERROR_MESSAGE","User information incomplete"),{success:!1,error:"User information incomplete"};console.log("Creating game with user ID:",r,"and username:",n);try{const s=await m.a.post("/api/games",{creatorId:r,creatorName:n},{headers:{"x-auth-token":t.token},timeout:1e4});return console.log("Game creation API response:",s.data),s.data&&s.data.gameId?(e("SET_CURRENT_GAME_ID",s.data.gameId),{success:!0,gameId:s.data.gameId}):(console.error("Invalid server response format:",s.data),e("SET_ERROR_MESSAGE","Invalid server response format"),{success:!1,error:"Invalid server response"})}catch(a){if(console.error("Axios error during game creation:",a),a.response){var s;const t=(null===(s=a.response.data)||void 0===s?void 0:s.msg)||"Server error: "+a.response.status;return e("SET_ERROR_MESSAGE",t),{success:!1,error:t}}return a.request?(e("SET_ERROR_MESSAGE","No response from server. Check your connection."),{success:!1,error:"Network error - no response"}):(e("SET_ERROR_MESSAGE",a.message||"Request setup error"),{success:!1,error:a.message||"Unknown error"})}}catch(r){console.error("Create game error:",r);const t=r.message||"Failed to create game";return e("SET_ERROR_MESSAGE",t),{success:!1,error:t}}finally{e("SET_LOADING",!1)}},async joinGame({commit:e,state:t},s){e("SET_LOADING",!0),e("CLEAR_ERROR_MESSAGE");try{if(!t.user||!t.user.id||!t.user.username)return e("SET_ERROR_MESSAGE","User information incomplete"),{success:!1,error:"User information incomplete"};const a=new Promise((e,t)=>{setTimeout(()=>t(new Error("Join game request timed out")),8e3)}),r=m.a.post("/api/games/join/"+s,{playerId:t.user.id,playerName:t.user.username},{headers:{"x-auth-token":t.token}});return await Promise.race([r,a]),e("SET_CURRENT_GAME_ID",s),{success:!0}}catch(r){var a;console.error("Join game error:",r);const t="Join game request timed out"===r.message?"Request timed out. Please try again.":(null===(a=r.response)||void 0===a||null===(a=a.data)||void 0===a?void 0:a.msg)||"Failed to join game";return e("SET_ERROR_MESSAGE",t),{success:!1,error:t}}finally{e("SET_LOADING",!1)}},async fetchGame({commit:e,state:t},s){e("SET_LOADING",!0);try{const a=await m.a.get("/api/games/"+s,{headers:{"x-auth-token":t.token}});return e("SET_CURRENT_GAME",a.data),e("SET_CURRENT_GAME_ID",s),{success:!0,game:a.data}}catch(r){var a;const t=(null===(a=r.response)||void 0===a||null===(a=a.data)||void 0===a?void 0:a.msg)||"Failed to fetch game data";return e("SET_ERROR_MESSAGE",t),{success:!1,error:t}}finally{e("SET_LOADING",!1)}},async startGame({commit:e,state:t},s){e("SET_LOADING",!0),console.log("Store startGame action called with gameId:",s),console.log("Current user in store:",t.user);try{console.log("Making start game API request...");const a=await m.a.post("/api/games/start/"+s,{playerId:t.user.id},{headers:{"x-auth-token":t.token}});return console.log("Start game API response:",a.data),a.data&&a.data.success?(console.log("Game started successfully through API"),{success:!0}):(console.error("API response did not indicate success"),{success:!1,error:"Server did not report success"})}catch(r){var a;console.error("Start game API error details:",r);const t=(null===(a=r.response)||void 0===a||null===(a=a.data)||void 0===a?void 0:a.msg)||"Failed to start game";return e("SET_ERROR_MESSAGE",t),{success:!1,error:t}}finally{e("SET_LOADING",!1)}},updateGameState({commit:e,state:t},s){var a;if(!s)return;console.log("Updating game state with data:",{id:s.id,status:s.status,currentTurn:s.currentTurn,playerCount:(null===(a=s.players)||void 0===a?void 0:a.length)||0,bettingRound:s.bettingRound});const r={...s};s.players&&s.players.some(e=>e.hasCards)&&"active"!==s.status&&(console.log("Players have cards but game status is not active; forcing to active"),r.status="active"),!s.creator&&t.currentGame&&t.currentGame.creator&&(console.log("Preserving creator info that was missing in update"),r.creator=t.currentGame.creator),e("SET_CURRENT_GAME",r),t.user&&s.currentTurn&&s.currentTurn===t.user.id&&!t.isYourTurn&&(console.log("Game state shows it is your turn, updating isYourTurn flag"),e("SET_YOUR_TURN",!0),0===t.availableActions.length&&e("SET_AVAILABLE_ACTIONS",["fold","check","call","bet","raise"]))},receiveCards({commit:e},{hand:t}){t&&e("SET_PLAYER_HAND",t)},yourTurn({commit:e},{options:t}){e("SET_YOUR_TURN",!0),e("SET_AVAILABLE_ACTIONS",t||[])},endTurn({commit:e}){e("SET_YOUR_TURN",!1),e("SET_AVAILABLE_ACTIONS",[])},async performAction({commit:e},{action:t,amount:s}){try{return e("SET_YOUR_TURN",!1),{success:!0,action:t,amount:s}}catch(a){return e("SET_ERROR_MESSAGE","Failed to perform action"),{success:!1,error:"Failed to perform action"}}},clearErrorMessage({commit:e}){e("CLEAR_ERROR_MESSAGE")},async updateProfile({commit:e,state:t},s){e("SET_LOADING",!0);try{const a=await m.a.put("/api/auth/profile",s,{headers:{"x-auth-token":t.token}});return e("SET_USER",a.data),{success:!0,user:a.data}}catch(r){var a;const t=(null===(a=r.response)||void 0===a||null===(a=a.data)||void 0===a?void 0:a.msg)||"Failed to update profile";return e("SET_ERROR_MESSAGE",t),{success:!1,error:t}}finally{e("SET_LOADING",!1)}},async fetchUserStats({commit:e,state:t}){e("SET_LOADING",!0);try{const s=await m.a.get("/api/auth/stats",{headers:{"x-auth-token":t.token}});return{success:!0,stats:s.data}}catch(s){return console.error("Fetch user stats error:",s),{success:!1,error:"Failed to fetch user statistics"}}finally{e("SET_LOADING",!1)}},forceUpdatePlayerHand({commit:e},t){return e("FORCE_UPDATE_CARDS",t),{success:!0}}}});let j=null,q=!1,W=null,B=0;const Y=3e5,J=async(e=!1)=>{const t=Date.now();return j&&!e&&t-B<Y?j:(q||(q=!0,W=new Promise(e=>{const t=async()=>{try{const s="true"===localStorage.getItem("useNgrok");!s&&localStorage.getItem("ngrokUrl")&&(console.log("Removing saved ngrok URL from localStorage"),localStorage.removeItem("ngrokUrl"));let a=window.location.origin+"/api/config";console.log("Loading configuration from current origin:",a);try{const t=await m.a.get(a,{timeout:5e3,headers:{"Cache-Control":"no-cache"}});return j=t.data,console.log("Application configuration loaded:",j),s&&j.isNgrok&&j.apiUrl&&(localStorage.setItem("ngrokUrl",j.apiUrl),console.log("Saved ngrok URL to localStorage:",j.apiUrl)),B=Date.now(),q=!1,void e(j)}catch(t){console.warn("Failed to load from origin, will try fallback:",t)}j={apiUrl:z(),socketUrl:z(),env:"development",version:"1.0.0",isFallback:!0},console.log("Using fallback configuration:",j),B=Date.now(),q=!1,e(j)}catch(s){console.error("Failed to load configuration, using defaults:",s),j={apiUrl:window.location.origin,socketUrl:window.location.origin,env:"development",version:"1.0.0",isFallback:!0},console.log("Using emergency fallback configuration:",j),B=Date.now(),q=!1,e(j)}};t()})),W)};function z(){const e=window.location.hostname,t=window.location.origin,s="true"===localStorage.getItem("useNgrok");if(s){const e=localStorage.getItem("ngrokUrl");if(e)return e}return("localhost"===e||"127.0.0.1"===e||e.match(/192\.168\./)||e.match(/10\./))&&"5000"!==window.location.port?(console.log("Using current origin with proxy:",t),t):t}const K={};class V{constructor(){this.socket=null,this.gameSocket=null,this.isConnected=!1,this.events={},this.connectionPromise=null,this.connectionAttempts=0,this.maxConnectionAttempts=3,this.connectionTimeout=null}async init(){return this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),this.connectionPromise?this.connectionPromise:this.isConnected&&this.gameSocket?Promise.resolve(this.gameSocket):(this.connectionPromise=new Promise((e,t)=>{this.connectionTimeout=setTimeout(()=>{console.error("Socket connection timeout after 10 seconds"),this.connectionPromise=null,t(new Error("Connection timeout"))},1e4);const s=async()=>{try{const s=await J(),a=s.socketUrl||window.location.origin;console.log("Connecting to socket server at:",a),this.gameSocket&&(this.gameSocket.disconnect(),this.gameSocket=null);const r="WebSocket"in window&&2===window.WebSocket.CLOSING;this.gameSocket=Object(x["a"])(a+"/game",{transports:r?["websocket"]:["websocket","polling"],reconnection:!0,reconnectionAttempts:5,reconnectionDelay:1e3,timeout:8e3,autoConnect:!0,withCredentials:!0,forceNew:!0}),this.gameSocket.on("connect",()=>{console.log("Connected to game socket with ID:",this.gameSocket.id),console.log("Using transport:",this.gameSocket.io.engine.transport.name),this.isConnected=!0,this.connectionAttempts=0,this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null);const t=F.getters.currentUser;t&&t.id&&this.registerUser(t.id),e(this.gameSocket)}),this.gameSocket.on("connect_error",e=>{console.error("Socket connection error:",e),this.connectionAttempts++,this.connectionAttempts>=this.maxConnectionAttempts&&(this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),this.connectionPromise=null,t(new Error(`Failed to connect after ${this.maxConnectionAttempts} attempts`)))}),this.gameSocket.on("disconnect",e=>{console.log("Disconnected from game socket. Reason:",e),this.isConnected=!1,"io server disconnect"!==e&&"transport close"!==e||(this.connectionPromise=null)}),this.setupGameListeners()}catch(s){console.error("Error during socket setup:",s),this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),this.connectionPromise=null,t(s)}};s()}),this.connectionPromise)}registerUser(e){if(e){if(!this.gameSocket)return console.warn("Cannot register user - socket not initialized"),this.init().then(()=>this.registerUser(e));if(!this.isConnected)return console.warn("Socket not connected, will register when connected"),void this.gameSocket.once("connect",()=>{this.registerUser(e)});this.gameSocket.emit("register",{userId:e}),console.log(`Registered user ${e} with socket`)}else console.warn("Cannot register user - no userId provided")}async joinGame(e,t,s){if(!e||!t||!s)throw new Error("Missing required parameters for joinGame");try{await this.init();const a=new Promise((a,r)=>{const n=setTimeout(()=>{r(new Error("Join game timeout after 8 seconds"))},8e3);this.gameSocket.once("gameUpdate",()=>{clearTimeout(n),a(!0)});const i=e=>{clearTimeout(n),r(e)};this.gameSocket.once("gameError",i),console.log(`Joining game ${e} as ${s} (${t})`),this.gameSocket.emit("joinGame",{gameId:e,userId:t,username:s}),setTimeout(()=>{this.requestGameUpdate(e,t)},500)});return await a}catch(a){throw console.error("Error joining game:",a),a}}startGame(e,t){return this.init().then(()=>new Promise((s,a)=>{if(!e||!t)return a(new Error("Missing required parameters for startGame"));if(!this.gameSocket||!this.isConnected)return a(new Error("Socket not connected"));console.log("Emitting startGame event for game "+e);const r=setTimeout(()=>{a(new Error("Start game timeout after 10 seconds"))},1e4);this.gameSocket.once("gameStarted",e=>{console.log("Received gameStarted event:",e),clearTimeout(r),s(e)});const n=e=>{console.error("Game error during start:",e),clearTimeout(r),a(e)};this.gameSocket.once("gameError",n),this.gameSocket.emit("startGame",{gameId:e,userId:t}),this.gameSocket.emit("chatMessage",{gameId:e,userId:t,username:"System",message:"Starting game..."})})).catch(e=>{throw console.error("Error in startGame:",e),e})}leaveGame(e,t){e&&t?this.gameSocket&&this.isConnected?(console.log("Leaving game "+e),this.gameSocket.emit("leaveGame",{gameId:e,userId:t})):console.warn("Cannot leave game - socket not connected"):console.warn("Cannot leave game - missing required parameters")}requestGameUpdate(e,t){return new Promise(s=>{if(!e)return console.warn("Cannot request game update - gameId is required"),void s(!1);if(!this.gameSocket||!this.isConnected)return console.warn("Cannot request game update - socket not connected"),void this.init().then(()=>{console.log("Reconnected, now requesting game update"),this.requestGameUpdate(e,t).then(s)}).catch(e=>{console.error("Failed to reconnect:",e),s(!1)});const a=Date.now(),r=K[e]||0;if(a-r<2e3)return console.log("Throttling game update request"),void s(!1);console.log("Requesting game update for "+e),K[e]=a;const n=()=>{console.log("Received game update after request"),s(!0),this.gameSocket.off("gameUpdate",n)},i=setTimeout(()=>{console.log("Game update request timed out"),this.gameSocket.off("gameUpdate",n),s(!1)},5e3);return this.gameSocket.once("gameUpdate",n),this.gameSocket.emit("requestGameUpdate",{gameId:e,userId:t}),()=>{clearTimeout(i),this.gameSocket.off("gameUpdate",n)}})}sendPlayerAction(e,t,s,a=0){e&&t&&s?this.gameSocket&&this.isConnected?("bet"!==s&&"raise"!==s&&"call"!==s||(a=parseFloat(a),isNaN(a)&&(console.error(`Invalid amount for ${s}: ${a}`),a=0)),console.log(`Sending player action: ${s} with amount: ${a}`),this.gameSocket.emit("playerAction",{gameId:e,userId:t,action:s,amount:a})):console.warn("Cannot send player action - socket not connected"):console.warn("Cannot send player action - missing required parameters")}sendChatMessage(e,t,s,a){e&&t&&s&&a?this.gameSocket&&this.isConnected?this.gameSocket.emit("sendMessage",{gameId:e,userId:t,username:s,message:a}):console.warn("Cannot send chat message - socket not connected"):console.warn("Cannot send chat message - missing required parameters")}setupGameListeners(){if(!this.gameSocket)return;const e=["gameUpdate","gameStarted","playerJoined","playerLeft","chatMessage","dealCards","yourTurn","turnChanged","actionTaken","dealFlop","dealTurn","dealRiver","handResult","newHand","gameEnded","gameError","playerConnectionChange","creatorChanged","becameCreator","playerRemoved"];e.forEach(e=>{this.gameSocket.off(e),this.gameSocket.on(e,t=>{this.emit(e,t)})})}disconnect(){this.gameSocket&&(this.gameSocket.disconnect(),this.gameSocket=null),this.isConnected=!1,this.connectionPromise=null,this.connectionAttempts=0}on(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)}off(e,t){this.events[e]&&(this.events[e]=this.events[e].filter(e=>e!==t))}emit(e,t){this.events[e]&&this.events[e].forEach(e=>e(t))}isSocketConnected(){return this.isConnected&&this.gameSocket&&this.gameSocket.connected}debug(){var e,t,s;console.group("Socket Debug Info"),console.log("Is Connected:",this.isConnected),console.log("Socket ID:",(null===(e=this.gameSocket)||void 0===e?void 0:e.id)||"none"),console.log("Socket Connected:",(null===(t=this.gameSocket)||void 0===t?void 0:t.connected)||!1),console.log("Connection Attempts:",this.connectionAttempts),console.log("Registered Event Handlers:");const a=Object.keys(this.events);return a.forEach(e=>{console.log(`- ${e}: ${this.events[e].length} handlers`)}),console.groupEnd(),{connected:this.isConnected,socketId:null===(s=this.gameSocket)||void 0===s?void 0:s.id,handlers:a.length}}async joinGameWithRetry(e,t,s,a=3){let r=0;while(r<a)try{return console.log(`Attempt ${r+1} to join game ${e}`),this.isConnected&&this.gameSocket||await this.init(),await this.joinGame(e,t,s),console.log(`Successfully joined game ${e} on attempt ${r+1}`),this.requestGameUpdate(e,t),!0}catch(n){if(console.error(`Join game attempt ${r+1} failed:`,n),r++,r>=a)throw console.error(`Failed to join game after ${a} attempts`),n;await new Promise(e=>setTimeout(e,1e3))}}ensureGameUpdate(e,t,s=5e3,a=2e4){console.log("Setting up game update polling for game "+e);const r=Date.now(),n=K[e]||0;r-n>2e3?(this.requestGameUpdate(e,t),K[e]=r):console.log("Skipping immediate update due to recent request");const i=setInterval(()=>{if(!this.isConnected)return;const s=Date.now(),a=K[e]||0;s-a>2e3&&(this.requestGameUpdate(e,t),K[e]=s)},s);return setTimeout(()=>{clearInterval(i),console.log("Stopped game update polling")},a),i}setPlayerReady(e,t,s){this.gameSocket&&this.isConnected?e&&t?(console.log(`Setting player ${t} ready status to ${s} for game ${e}`),this.gameSocket.emit("playerReady",{gameId:e,userId:t,isReady:s})):console.warn("Cannot set player status: missing required parameters"):console.warn("Cannot set player status: socket not connected")}}var Q=new V,Z={name:"Lobby",data(){return{gameIdInput:"",isCreating:!1,isJoining:!1,statusMessage:"",connectionAttempts:0,maxConnectionAttempts:2,operationTimeout:null,showFallbackOptions:!1,apiTestResult:null}},computed:{...Object(p["c"])(["currentUser","errorMessage"]),isValidGameId(){return 6===this.gameIdInput.length&&/^[0-9a-f]{6}$/.test(this.gameIdInput)}},created(){this.clearErrorMessage()},async mounted(){if(!this.currentUser&&localStorage.getItem("token")){console.log("No user data in Lobby, attempting to fetch from server"),this.statusMessage="Loading user data...";try{await this.$store.dispatch("fetchUserData"),console.log("User data loaded in Lobby:",this.currentUser)}catch(e){console.error("Error fetching user data in Lobby:",e),this.SET_ERROR_MESSAGE("Failed to load user data. Please log in again.")}finally{this.statusMessage=""}}else console.log("Current user in Lobby:",this.currentUser)},methods:{...Object(p["b"])(["createGame","joinGame","clearErrorMessage","logout"]),...Object(p["d"])(["SET_ERROR_MESSAGE"]),formatRupiah(e){return new Intl.NumberFormat("id-ID",{style:"currency",currency:"IDR",minimumFractionDigits:0}).format(e)},async initSocketConnection(){try{return await Q.init(),this.statusMessage="",!0}catch(e){return console.error("Socket initialization error:",e),!1}},setOperationTimeout(e,t=15e3){this.operationTimeout&&clearTimeout(this.operationTimeout),this.operationTimeout=setTimeout(()=>{this.isCreating=!1,this.isJoining=!1,this.SET_ERROR_MESSAGE(e+" operation timed out. Please try again.")},t)},clearOperationTimeout(){this.operationTimeout&&(clearTimeout(this.operationTimeout),this.operationTimeout=null)},async handleCreateGame(){if(!this.currentUser)return console.error("Cannot create game: No user data available"),void this.SET_ERROR_MESSAGE("Your session appears to be invalid. Please log out and log in again.");this.isCreating=!0,this.statusMessage="Creating new game...",this.clearErrorMessage();try{console.log("Creating game with user:",this.currentUser);const e=localStorage.getItem("token");if(!e)throw new Error("No authentication token found");const t=await m.a.post("/api/games",{creatorId:this.currentUser.id,creatorName:this.currentUser.username},{headers:{"x-auth-token":e},timeout:1e4});if(console.log("Game creation response:",t.data),!t.data||!t.data.gameId)throw new Error("Invalid response from server (no game ID)");{const e=t.data.gameId;console.log("Game created successfully with ID:",e),this.statusMessage="Game created! Redirecting...",this.$store.commit("SET_CURRENT_GAME_ID",e),setTimeout(()=>{window.location.href="/game/"+e},500)}}catch(e){console.error("Error creating game:",e);let t="Error creating game. Please try again.";e.response?(console.error("Server response:",e.response.data),t=e.response.data.msg||"Server error: "+e.response.status):t=e.request?"No response from server. Check your network connection.":e.message||t,this.SET_ERROR_MESSAGE(t),this.statusMessage="",this.isCreating=!1}},async handleJoinGame(){if(this.isValidGameId)return this.currentUser?void await this.directJoinGame(this.gameIdInput):(console.error("Cannot join game: No user data available"),void this.SET_ERROR_MESSAGE("Your session appears to be invalid. Please log out and log in again."))},async directJoinGame(e){if(e){this.isJoining=!0,this.statusMessage="Joining game...";try{console.log("Directly joining game "+e);const t=localStorage.getItem("token");if(!t)throw new Error("No authentication token found");const s=await m.a.post("/api/games/join/"+e,{playerId:this.currentUser.id,playerName:this.currentUser.username},{headers:{"x-auth-token":t},timeout:5e3});console.log("Join game response:",s.data),this.$store.commit("SET_CURRENT_GAME_ID",e),this.statusMessage="Joined! Redirecting...",window.location.href="/game/"+e}catch(t){console.error("Error joining game:",t);let e="Error joining game. Please try again.";t.response?(console.error("Server response:",t.response.data),e=t.response.data.msg||"Server error: "+t.response.status):e=t.request?"No response from server. Check your network connection.":t.message||e,this.SET_ERROR_MESSAGE(e)}finally{this.statusMessage="",this.isJoining=!1}}else this.SET_ERROR_MESSAGE("Game ID is required")},async createGameDirectly(){if(!this.currentUser)return console.error("Cannot create game directly: No user data available"),void this.SET_ERROR_MESSAGE("Your session appears to be invalid. Please log out and log in again.");this.isCreating=!0,this.clearErrorMessage();try{const e=localStorage.getItem("token");if(!e)throw new Error("No authentication token found");const t=await m.a.post("/api/games",{creatorId:this.currentUser.id,creatorName:this.currentUser.username},{headers:{"x-auth-token":e,"Content-Type":"application/json"}});if(console.log("Direct API response:",t.data),!t.data||!t.data.gameId)throw new Error("Invalid server response");this.$router.push("/game/"+t.data.gameId)}catch(e){console.error("Direct API call error:",e),e.response?(console.error("Response data:",e.response.data),console.error("Status:",e.response.status),this.SET_ERROR_MESSAGE(e.response.data.msg||"Error "+e.response.status)):e.request?this.SET_ERROR_MESSAGE("No response from server. Check your connection."):this.SET_ERROR_MESSAGE(e.message||"Error creating game")}finally{this.isCreating=!1}},async testApiConnection(){this.apiTestResult="Testing API connection...";try{const s=await m.a.get("/api",{timeout:5e3});this.apiTestResult=`API base endpoint: ${s.status} OK\n`;const a=localStorage.getItem("token");if(!a)return void(this.apiTestResult+="No auth token found!\n");try{const e=await m.a.get("/api/auth/user",{headers:{"x-auth-token":a},timeout:5e3});this.apiTestResult+=`Auth test: ${e.status} OK\n`,this.apiTestResult+=`User data: ${JSON.stringify(e.data,null,2)}\n`}catch(e){this.apiTestResult+=`Auth test failed: ${e.message}\n`,e.response&&(this.apiTestResult+=`Status: ${e.response.status}\n`,this.apiTestResult+=`Response: ${JSON.stringify(e.response.data,null,2)}\n`)}try{const e=await m.a.get("/api/games",{headers:{"x-auth-token":a},timeout:5e3});this.apiTestResult+=`Games list test: ${e.status} OK\n`,this.apiTestResult+=`Games count: ${e.data.length}\n`}catch(t){this.apiTestResult+=`Games list test failed: ${t.message}\n`,t.response&&(this.apiTestResult+=`Status: ${t.response.status}\n`,this.apiTestResult+=`Response: ${JSON.stringify(t.response.data,null,2)}\n`)}}catch(s){this.apiTestResult="API test failed: "+s.message,console.error("API test error:",s)}},beforeDestroy(){this.clearErrorMessage(),this.clearOperationTimeout()}}},X=Z,ee=(s("64bf"),Object(i["a"])(X,N,H,!1,null,"5559e34d",null)),te=ee.exports,se=function(){var e=this,t=e._self._c;return t("div",{staticClass:"game-container"},[t("GameHeader",{attrs:{gameId:e.gameId,currentGame:e.currentGame},on:{copyGameId:e.copyGameId,leaveGame:e.leaveGame}}),e.errorMessage?t("div",{staticClass:"error-message"},[e._v(" "+e._s(e.errorMessage)+" ")]):e._e(),e.currentGame?t("div",{staticClass:"game-area"},[t("div",{staticClass:"game-status-wrapper"},[t("GameStatus",{key:e.currentGame?e.currentGame.status+"-"+e.gameInitialized:"loading",attrs:{currentGame:e.currentGame,currentUser:e.currentUser,gameId:e.gameId,isCreator:e.isCreator,isStarting:e.isStarting,gameInitialized:e.gameInitialized},on:{startGame:e.handleStartGame,getCurrentPlayerName:e.getCurrentPlayerName,requestInitialization:e.requestInitialization,requestStateUpdate:e.requestStateUpdate,addToLog:e.addToLog}})],1),t("div",{staticClass:"game-table"},[t("CommunityCards",{attrs:{communityCards:e.currentGame.communityCards,formatCard:e.formatCard}}),t("PlayerList",{ref:"playerList",attrs:{players:e.currentGame.players,currentUser:e.currentUser,currentTurn:e.currentGame.currentTurn,playerHand:e.playerHand,formatCard:e.formatCard}}),e.isYourTurn||e.shouldShowActions()?t("PlayerActions",{attrs:{availableActions:e.availableActions,currentGame:e.currentGame,betAmount:e.betAmount,raiseAmount:e.raiseAmount,isYourTurn:e.isYourTurn},on:{updateBetAmount:function(t){e.betAmount=t},updateRaiseAmount:function(t){e.raiseAmount=t},handleAction:e.handleAction,endTurn:e.endTurn,getPlayerChipsInPot:e.getPlayerChipsInPot,getCurrentPlayer:e.getCurrentPlayer}}):e._e(),e.isYourTurn?t("ActionTimer",{attrs:{initialTime:e.actionTimeLimit,isActive:e.isYourTurn,currentGame:e.currentGame},on:{timerComplete:e.handleTimerComplete}}):e._e(),t("WinnerDisplay",{attrs:{winners:e.handWinners,allPlayers:e.allPlayersCards,communityCards:e.communityCards,pot:e.winningPot,visible:e.showWinnerDisplay,formatCard:e.formatCard,currentGame:e.currentGame,currentUser:e.currentUser,gameId:e.gameId,isCreator:e.isCreator,isFoldWin:e.isFoldWin,previousPlayerHand:e.previousPlayerHand},on:{close:e.handleWinnerDisplayClose,addToLog:e.addToLog,startNextHand:e.startNextHand}})],1),t("GameLog",{attrs:{gameLog:e.gameLog}}),t("GameChat",{attrs:{gameId:e.gameId,currentUser:e.currentUser}})],1):t("div",{staticClass:"loading"},[e._v(" Loading game... ")]),t("button",{staticClass:"debug-toggle",on:{click:function(t){e.showDebugPanel=!e.showDebugPanel}}},[e._v(" "+e._s(e.showDebugPanel?"Hide Debug":"Show Debug")+" ")]),t("GameDebugPanel",{attrs:{enabled:e.showDebugPanel,gameId:e.gameId,currentGame:e.currentGame,currentUser:e.currentUser,isCreator:e.isCreator,isConnected:e.isConnected},on:{close:function(t){e.showDebugPanel=!1},log:e.addToLog,forceStart:e.forceStartGame}})],1)},ae=[],re=(s("f665"),function(){var e=this,t=e._self._c;return t("div",{staticClass:"game-header"},[t("h2",[e._v("Nyanguni Kancane - Game #"+e._s(e.gameId))]),t("div",{staticClass:"game-info"},[t("span",[e._v("Pot: "+e._s(e.currentGame?e.currentGame.pot:0)+" chips")]),t("button",{staticClass:"btn-secondary btn-sm",on:{click:function(t){return e.$emit("copyGameId")}}},[e._v(" Share Game ID ")]),t("button",{staticClass:"btn-danger btn-sm",on:{click:function(t){return e.$emit("leaveGame")}}},[e._v(" Leave Game ")])])])}),ne=[],ie={name:"GameHeader",props:{gameId:{type:String,required:!0},currentGame:{type:Object,default:null}}},oe=ie,le=(s("8799"),Object(i["a"])(oe,re,ne,!1,null,"fa9af8ac",null)),ce=le.exports,de=function(){var e=this,t=e._self._c;return t("div",{staticClass:"game-status"},[e.isObserver?t("div",{staticClass:"observer-message"},[t("p",[e._v(e._s(e.observerMessage||"You are currently observing this game."))]),e.currentGame&&"waiting"===e.currentGame.status?t("button",{staticClass:"join-btn",on:{click:e.joinGame}},[e._v(" Join Game ")]):e._e()]):e._e(),"waiting"===e.currentGame.status?t("div",{staticClass:"waiting-status"},[t("p",[e._v("Waiting for players to join...")]),t("p",[e._v("Game ID: "),t("strong",[e._v(e._s(e.gameId))])]),t("p",[e._v("Players: "+e._s(e.currentGame.players.length)+"/8")]),t("PlayerReadyComponent",{attrs:{currentGame:e.currentGame,currentUser:e.currentUser,gameId:e.gameId,isCreator:e.isCreator},on:{addToLog:e.addToLog,playersReady:e.onPlayersReady}}),e.isCreator?t("div",{staticClass:"creator-info"},[t("div",{staticClass:"creator-badge"},[e._v(" You are the game creator ")]),t("div",{staticClass:"player-count-info"},[e.currentGame.players.length>=2?t("p",{staticClass:"ready-message"},[e.enoughPlayersReady?t("span",[e._v("✅ Enough players are ready to start the game!")]):t("span",[e._v("⏳ Waiting for players to mark themselves as ready...")])]):t("p",{staticClass:"waiting-message"},[e._v(" ⏳ Waiting for more players to join (need at least 2) ")])]),e.currentGame.players.length>=2?t("div",{staticClass:"start-game-container"},[t("button",{staticClass:"start-btn",attrs:{disabled:e.isStarting||!e.enoughPlayersReady},on:{click:e.startGame}},[e._v(" "+e._s(e.isStarting?"Starting...":"START GAME")+" ")])]):t("div",{staticClass:"start-game-container"},[t("button",{staticClass:"start-btn disabled",attrs:{disabled:""}},[e._v(" Need More Players ")])])]):t("div",{staticClass:"waiting-message"},[t("p",[e._v("Waiting for game creator to start the game...")])])],1):"active"===e.currentGame.status?t("div",{staticClass:"active-status"},[t("p",[e._v("Game in progress")]),t("div",{staticClass:"game-info"},[t("div",{staticClass:"info-item"},[t("span",{staticClass:"label"},[e._v("Current turn:")]),t("span",{staticClass:"value"},[e._v(e._s(e.getCurrentPlayerName()))])]),t("div",{staticClass:"info-item"},[t("span",{staticClass:"label"},[e._v("Current bet:")]),t("span",{staticClass:"value"},[e._v(e._s(e.currentGame.currentBet)+" chips")])]),t("div",{staticClass:"info-item"},[t("span",{staticClass:"label"},[e._v("Betting round:")]),t("span",{staticClass:"value"},[e._v(e._s(e.formatBettingRound(e.currentGame.bettingRound)))])])]),e.isCreator&&!e.gameInitialized?t("div",{staticClass:"initialization-message"},[t("p",[e._v("Game is active but not fully initialized.")]),t("button",{staticClass:"initialize-btn",on:{click:e.requestInitialization}},[e._v(" Initialize Game ")])]):e._e()]):"completed"===e.currentGame.status?t("div",{staticClass:"completed-status"},[t("p",[e._v(e._s(e.getCompletionMessage()))]),e.hasZeroBalance()?t("div",[t("p",{staticClass:"error-message"},[e._v("You don't have enough chips to continue!")]),t("button",{staticClass:"btn",on:{click:e.returnToLobby}},[e._v(" Return to Lobby ")])]):e.isObserver?t("div",[t("p",[e._v("You can continue watching or return to the lobby.")]),t("button",{staticClass:"btn",on:{click:e.returnToLobby}},[e._v(" Return to Lobby ")])]):t("div",[t("p",[e._v("Waiting for the game to start again...")]),t("p",{staticClass:"status-message"},[e._v("Players without chips have been removed.")]),t("div",{staticClass:"ready-status-container"},[t("button",{staticClass:"ready-btn",class:{"ready-confirm":e.isCurrentPlayerReady},on:{click:e.toggleReady}},[e._v(" "+e._s(e.isCurrentPlayerReady?"I'm Ready ✓":"Mark as Ready")+" ")])])])]):t("div",{staticClass:"completed-status"},[t("p",[e._v("Game completed")]),t("button",{staticClass:"btn",on:{click:e.returnToLobby}},[e._v(" Return to Lobby ")])]),e.isDevelopment?t("div",{staticClass:"debug-section"},[t("button",{staticClass:"debug-toggle",on:{click:function(t){e.debugVisible=!e.debugVisible}}},[e._v(" "+e._s(e.debugVisible?"Hide Debug Info":"Show Debug Info")+" ")]),e.debugVisible?t("div",{staticClass:"debug-details"},[t("div",{staticClass:"debug-item"},[t("span",{staticClass:"debug-label"},[e._v("Creator:")]),t("span",{staticClass:"debug-value"},[e._v(e._s(e.getCreatorUsername()))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"debug-label"},[e._v("Is Creator:")]),t("span",{staticClass:"debug-value"},[e._v(e._s(e.isCreator))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"debug-label"},[e._v("Players:")]),t("span",{staticClass:"debug-value"},[e._v(e._s(e.currentGame.players.length))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"debug-label"},[e._v("Ready Players:")]),t("span",{staticClass:"debug-value"},[e._v(e._s(e.readyPlayersCount))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"debug-label"},[e._v("Enough Ready:")]),t("span",{staticClass:"debug-value"},[e._v(e._s(e.enoughPlayersReady))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"debug-label"},[e._v("Status:")]),t("span",{staticClass:"debug-value"},[e._v(e._s(e.currentGame.status))])]),t("button",{staticClass:"debug-btn",on:{click:e.forceStartGame}},[e._v("Force Start Game")]),t("button",{staticClass:"debug-btn",on:{click:e.requestStateUpdate}},[e._v("Request Game Update")]),t("button",{staticClass:"debug-btn",on:{click:e.checkReadyPlayers}},[e._v("Check Ready Players")])]):e._e()]):e._e()])},ue=[],me=function(){var e=this,t=e._self._c;return t("div",{staticClass:"player-ready-section"},[t("div",{staticClass:"ready-status-container"},[t("h3",[e._v("Player Readiness")]),t("div",{staticClass:"ready-status-list"},e._l(e.currentGame.players,(function(s){return t("div",{key:s.id,staticClass:"player-ready-item"},[t("span",{staticClass:"player-name"},[e._v(e._s(s.username))]),t("span",{staticClass:"ready-indicator",class:{ready:s.isReady,"not-ready":!s.isReady}},[e._v(" "+e._s(s.isReady?"Ready ✓":"Not Ready")+" ")])])})),0),t("div",{staticClass:"ready-summary"},[t("p",[e._v(e._s(e.readySummary))])])]),"waiting"===e.currentGame.status?t("div",{staticClass:"current-player-controls"},[t("button",{staticClass:"ready-btn",class:{"ready-confirm":e.isCurrentPlayerReady},on:{click:e.toggleReady}},[e._v(" "+e._s(e.isCurrentPlayerReady?"I'm Ready ✓":"Mark as Ready")+" ")])]):e._e()])},he=[],ge=(s("d866"),{name:"PlayerReadyComponent",props:{currentGame:{type:Object,required:!0},currentUser:{type:Object,required:!0},gameId:{type:String,required:!0},isCreator:{type:Boolean,default:!1}},computed:{isCurrentPlayerReady(){if(!this.currentUser||!this.currentGame||!this.currentGame.players)return!1;const e=this.currentGame.players.find(e=>e.id===this.currentUser.id);return!!e&&e.isReady},readySummary(){if(!this.currentGame||!this.currentGame.players)return"Waiting for players...";const e=this.currentGame.players.filter(e=>e.isReady).length,t=this.currentGame.players.length;return 0===e?"No players are ready yet":e===t&&t>=2?"All players are ready!":`${e} of ${t} players ready`},areEnoughPlayersReady(){if(!this.currentGame||!this.currentGame.players)return!1;const e=this.currentGame.players.filter(e=>e.isReady);return e.length>=2}},watch:{currentGame:{handler(){this.checkReadyStatus()},deep:!0},areEnoughPlayersReady:{handler(e){console.log("Enough players ready changed:",e),this.$emit("playersReady",e)}}},mounted(){Q.on("playerReadyUpdate",this.handlePlayerReadyUpdate),Q.on("allPlayersReady",this.handleAllPlayersReady),this.$nextTick(()=>{this.checkReadyStatus()})},beforeDestroy(){Q.off("playerReadyUpdate",this.handlePlayerReadyUpdate),Q.off("allPlayersReady",this.handleAllPlayersReady)},methods:{checkReadyStatus(){const e=this.areEnoughPlayersReady;if(console.log("Checking ready status:",e),this.$emit("playersReady",e),this.currentGame&&this.currentGame.players){const e=this.currentGame.players.length>=2&&this.currentGame.players.every(e=>e.isReady);e&&this.handleAllPlayersReady({readyCount:this.currentGame.players.length,totalPlayers:this.currentGame.players.length})}},toggleReady(){var e;if(this.currentUser&&this.gameId){if(!Q.isSocketConnected())return console.warn("Socket not connected, trying to reconnect..."),void Q.init().then(()=>{this.toggleReady()});null===(e=Q.gameSocket)||void 0===e||e.emit("playerReady",{gameId:this.gameId,userId:this.currentUser.id,isReady:!this.isCurrentPlayerReady}),this.$emit("addToLog","You marked yourself as "+(this.isCurrentPlayerReady?"not ready":"ready"))}else console.error("Cannot toggle ready: missing user or game data")},handlePlayerReadyUpdate(e){var t;e.userId!==(null===(t=this.currentUser)||void 0===t?void 0:t.id)&&this.$emit("addToLog",`${e.username} is ${e.isReady?"ready":"not ready"}`),this.$nextTick(()=>{this.checkReadyStatus()})},handleAllPlayersReady(e){console.log("All players ready event received:",e),this.isCreator&&this.$emit("playersReady",!0),this.$emit("addToLog","All players are ready! Game can start.")}}}),pe=ge,ye=(s("c35c"),Object(i["a"])(pe,me,he,!1,null,"40df27a2",null)),ve=ye.exports,fe={name:"GameStatus",components:{PlayerReadyComponent:ve},props:{currentGame:{type:Object,required:!0},currentUser:{type:Object,default:null},gameId:{type:String,required:!0},isCreator:{type:Boolean,default:!1},isStarting:{type:Boolean,default:!1},gameInitialized:{type:Boolean,default:!1}},data(){return{debugVisible:!1,isDevelopment:!1,enoughPlayersReady:!1}},computed:{readyPlayersCount(){return this.currentGame&&this.currentGame.players?this.currentGame.players.filter(e=>e.isReady).length:0}},watch:{currentGame:{handler(e){this.checkReadyPlayers()},deep:!0}},mounted(){this.checkReadyPlayers()},methods:{getCompletionMessage(){const e=this.findCompletionMessage();return e&&e.includes("Chip e entek")?"Game ended: Chip e entek":"Game completed"},findCompletionMessage(){if(!this.currentGame||!this.currentGame.actionHistory)return null;const e=this.currentGame.actionHistory.filter(e=>"gameCompleted"===e.action).pop();return e?e.message:null},hasZeroBalance(){if(!this.currentUser||!this.currentGame||!this.currentGame.players)return!1;const e=this.currentGame.players.find(e=>e.id===this.currentUser.id);return e&&e.totalChips<=0},toggleReady(){this.currentUser&&this.gameId?(SocketService.setPlayerReady(this.gameId,this.currentUser.id,!this.isCurrentPlayerReady),this.$emit("addToLog","You marked yourself as "+(this.isCurrentPlayerReady?"not ready":"ready"))):console.error("Cannot toggle ready: missing user or game data")},getCurrentPlayerName(){if(!this.currentGame||!this.currentGame.currentTurn)return"N/A";const e=this.currentGame.players.find(e=>e.id===this.currentGame.currentTurn);return e?e.username:"Unknown"},getCreatorUsername(){var e;return(null===(e=this.currentGame.creator)||void 0===e?void 0:e.username)||"Unknown"},formatBettingRound(e){const t={preflop:"Pre-Flop",flop:"Flop",turn:"Turn",river:"River",showdown:"Showdown"};return t[e]||e},startGame(){if(console.log("Start game button clicked"),!this.enoughPlayersReady)return console.warn("Cannot start game - not enough players are ready"),void this.addToLog("Cannot start game - need at least 2 ready players");this.$emit("startGame")},forceStartGame(){console.log("Forcing game start from debug panel"),this.$emit("startGame")},requestInitialization(){this.$emit("requestInitialization")},requestStateUpdate(){this.$emit("requestStateUpdate")},returnToLobby(){this.$router.push("/lobby")},onPlayersReady(e){this.enoughPlayersReady=e,console.log("Players ready status updated:",e)},addToLog(e){this.$emit("addToLog",e)},checkReadyPlayers(){if(!this.currentGame||!this.currentGame.players)return void(this.enoughPlayersReady=!1);const e=this.currentGame.players.filter(e=>e.isReady),t=e.length>=2;console.log(`Ready players check: ${e.length} ready, enough: ${t}`),this.enoughPlayersReady=t,this.$emit("playersReady",t)}}},Ce=fe,_e=(s("64e9"),Object(i["a"])(Ce,de,ue,!1,null,"a7794128",null)),be=_e.exports,Se=function(){var e=this,t=e._self._c;return t("div",{staticClass:"community-cards"},[t("h3",[e._v("Community Cards")]),t("div",{staticClass:"cards-container"},[e._l(e.communityCards,(function(s,a){return t("div",{key:a,staticClass:"card-display",attrs:{"data-suit":s.suit}},[e._v(" "+e._s(e.formatCard(s))+" ")])})),e._l(5-e.communityCards.length,(function(s){return t("div",{key:"empty-"+s,staticClass:"card-display empty"},[e._v(" ? ")])}))],2)])},Te=[],Re={name:"CommunityCards",props:{communityCards:{type:Array,default:()=>[]},formatCard:{type:Function,required:!0}}},we=Re,Ge=(s("c9b5"),Object(i["a"])(we,Se,Te,!1,null,"3701dc0c",null)),Ae=Ge.exports,Ee=function(){var e=this,t=e._self._c;return t("div",{staticClass:"players-container"},[e.players&&0!==e.players.length?e._e():t("div",{staticClass:"no-players"},[e._v(" No players have joined yet ")]),e._l(e.players,(function(s){return t("div",{key:`player-${s.id}-${e.updateKey}`,staticClass:"player-spot",class:{"current-player":e.currentUser&&s.id===e.currentUser.id,"active-turn":e.currentTurn&&s.id===e.currentTurn,folded:s.hasFolded}},[t("div",{staticClass:"player-info"},[t("div",{staticClass:"player-name"},[e._v(e._s(s.username||"Unknown Player"))]),t("div",{staticClass:"player-chips"},[e._v(" Chips: "+e._s(s.totalChips||0)+" "),s.chips>0?t("span",[e._v("("+e._s(s.chips)+" in pot)")]):e._e()]),s.hasFolded?t("div",{staticClass:"player-status"},[e._v("Folded")]):s.hasActed?t("div",{staticClass:"player-status"},[e._v("Acted")]):e._e()]),e.currentUser&&s.id===e.currentUser.id?t("div",{staticClass:"player-hand"},e._l(e.displayPlayerHand,(function(s,a){return t("div",{key:`card-${a}-${s.rank}-${s.suit}`,staticClass:"card-display player-card",attrs:{"data-suit":s.suit}},[e._v(" "+e._s(e.formatCard(s))+" ")])})),0):t("div",{staticClass:"player-hand"},e._l(s.hasCards?2:0,(function(s){return t("div",{key:`back-${s}-${e.updateKey}`,staticClass:"card-display card-back"},[e._v(" ●● ")])})),0)])}))],2)},ke=[],Ie={name:"PlayerList",props:{players:{type:Array,default:()=>[]},currentUser:{type:Object,default:null},currentTurn:{type:String,default:null},playerHand:{type:Array,default:()=>[]},formatCard:{type:Function,required:!0}},data(){return{updateKey:0,lastHandUpdate:Date.now(),currentHandTimestamp:0,lastKnownHandState:[]}},computed:{playerDebugInfo(){if(!this.players)return"No players";const e=this.players[0];return e?"First player: "+JSON.stringify(e):"No first player"},displayPlayerHand(){return this.playerHand&&Array.isArray(this.playerHand)?this.playerHand.map(e=>({...e,_key:`${e.rank}-${e.suit}-${this.lastHandUpdate}-${this.updateKey}`})):(console.warn("Invalid playerHand in PlayerList component:",this.playerHand),[])},displayPlayerHand(){return this.playerHand&&Array.isArray(this.playerHand)?(this.playerHand.length>0&&(this.lastKnownHandState=[...this.playerHand]),"waiting"===this.getCurrentGameStatus()&&0===this.playerHand.length?[]:this.playerHand.map(e=>({...e,_key:`${e.rank}-${e.suit}-${this.lastHandUpdate}-${this.updateKey}`}))):(console.warn("Invalid playerHand in PlayerList component:",this.playerHand),"waiting"===this.getCurrentGameStatus()&&this.lastKnownHandState.length,[])}},watch:{playerHand:{handler(e,t){if(e&&e.length>0){const s=JSON.stringify(e),a=t?JSON.stringify(t):"";s!==a&&(console.log("PlayerList detected hand change:",e.map(e=>`${e.rank} of ${e.suit}`).join(", ")),this.updateKey++,this.lastHandUpdate=Date.now())}},deep:!0},"$parent.currentGame.status":{handler(e){console.log("Game status changed:",e),"waiting"===e&&setTimeout(()=>{this.clearPlayerCards()},100)}}},mounted(){console.log("PlayerList mounted with players:",this.players),console.log("CurrentUser in PlayerList:",this.currentUser),console.log("Initial playerHand:",this.playerHand),this.updateInterval=setInterval(()=>{this.updateKey++},5e3)},beforeDestroy(){this.updateInterval&&clearInterval(this.updateInterval)},methods:{getCurrentGameStatus(){const e=this.$parent;return e&&e.currentGame?e.currentGame.status:null},forceUpdate(){this.updateKey++,this.lastHandUpdate=Date.now(),console.log("PlayerList forced update"),"waiting"===this.getCurrentGameStatus()&&console.log("Game in waiting state, clearing card display")},updateForNewHand(e){!e||e<=this.currentHandTimestamp||(console.log("PlayerList updating for new hand with timestamp:",e),this.currentHandTimestamp=e,this.updateKey+=10,this.lastHandUpdate=Date.now(),this.$forceUpdate())},clearPlayerCards(){this.updateKey+=20,this.lastHandUpdate=Date.now(),console.log("PlayerList cleared visual card display")}}},Ue=Ie,Pe=(s("c5b8"),Object(i["a"])(Ue,Ee,ke,!1,null,"b054c84e",null)),Le=Pe.exports,Me=function(){var e=this,t=e._self._c;return t("div",{staticClass:"player-actions"},[t("h3",[e._v("Your Turn")]),e.isGameActive&&e.isYourTurn?t("div",{staticClass:"action-buttons"},[e.availableActions.includes("fold")?t("button",{staticClass:"btn btn-danger",on:{click:function(t){return e.$emit("handleAction","fold")}}},[e._v(" Fold ")]):e._e(),e.availableActions.includes("check")?t("button",{staticClass:"btn",on:{click:function(t){return e.$emit("handleAction","check")}}},[e._v(" Check ")]):e._e(),e.availableActions.includes("call")?t("button",{staticClass:"btn",on:{click:function(t){e.$emit("handleAction","call",e.getCallAmount())}}},[e._v(" Call "+e._s(e.formattedCallAmount)+" chips ")]):e._e(),e.availableActions.includes("allIn")?t("button",{staticClass:"btn btn-warning",on:{click:e.handleAllIn}},[e._v(" All-In ("+e._s(e.getMaxChips())+" chips) ")]):e._e(),e.availableActions.includes("bet")&&!e.availableActions.includes("raise")?t("div",{staticClass:"bet-action"},[t("div",{staticClass:"bet-input-group"},[t("label",{attrs:{for:"betAmount"}},[e._v("Bet Amount:")]),t("div",{staticClass:"input-with-controls"},[t("button",{staticClass:"amount-btn",attrs:{type:"button"},on:{click:e.decrementBet}},[e._v("-")]),t("input",{directives:[{name:"model",rawName:"v-model.number",value:e.internalBetAmount,expression:"internalBetAmount",modifiers:{number:!0}}],staticClass:"amount-input",attrs:{type:"number",id:"betAmount",min:1,max:e.getMaxBetAmount()},domProps:{value:e.internalBetAmount},on:{change:e.updateLocalBetAmount,blur:[e.validateBetAmount,function(t){return e.$forceUpdate()}],input:function(t){t.target.composing||(e.internalBetAmount=e._n(t.target.value))}}}),t("button",{staticClass:"amount-btn",attrs:{type:"button"},on:{click:e.incrementBet}},[e._v("+")])])]),t("button",{staticClass:"btn",on:{click:e.handleBet}},[e._v(" Bet "+e._s(e.internalBetAmount)+" chips ")])]):e._e(),e.availableActions.includes("raise")?t("div",{staticClass:"bet-action"},[t("div",{staticClass:"bet-input-group"},[t("label",{attrs:{for:"raiseAmount"}},[e._v("Raise Amount:")]),t("div",{staticClass:"input-with-controls"},[t("button",{staticClass:"amount-btn",attrs:{type:"button"},on:{click:e.decrementRaise}},[e._v("-")]),t("input",{directives:[{name:"model",rawName:"v-model.number",value:e.internalRaiseAmount,expression:"internalRaiseAmount",modifiers:{number:!0}}],staticClass:"amount-input",attrs:{type:"number",id:"raiseAmount",min:e.getMinRaiseAmount(),max:e.getMaxRaiseAmount()},domProps:{value:e.internalRaiseAmount},on:{change:e.updateLocalRaiseAmount,blur:[e.validateRaiseAmount,function(t){return e.$forceUpdate()}],input:function(t){t.target.composing||(e.internalRaiseAmount=e._n(t.target.value))}}}),t("button",{staticClass:"amount-btn",attrs:{type:"button"},on:{click:e.incrementRaise}},[e._v("+")])])]),t("button",{staticClass:"btn",on:{click:e.handleRaise}},[e._v(" Raise to "+e._s(e.internalRaiseAmount)+" chips ")])]):e._e()]):e.isGameActive?t("div",{staticClass:"waiting-message"},[e._v(" Waiting for your turn... ")]):t("div",{staticClass:"waiting-message"},[e._v(" Waiting for next hand to start... ")])])},De=[],$e={name:"PlayerActions",props:{availableActions:{type:Array,required:!0},currentGame:{type:Object,required:!0},betAmount:{type:Number,required:!0},raiseAmount:{type:Number,required:!0},isYourTurn:{type:Boolean,default:!1}},data(){return{internalBetAmount:1,internalRaiseAmount:2}},computed:{formattedCallAmount(){const e=this.getCallAmount();return isNaN(e)?0:e},isGameActive(){return this.currentGame&&"active"===this.currentGame.status}},created(){this.internalBetAmount=this.betAmount||1,this.internalRaiseAmount=this.raiseAmount||this.getMinRaiseAmount()},methods:{getMaxChips(){const e=this.getCurrentPlayer();return e?e.totalChips:0},handleAllIn(){if(!this.isGameActive||!this.isYourTurn)return;const e=this.getMaxChips();this.$emit("handleAction","allIn",e)},getCurrentPlayer(){const e=this.currentGame.players.find(e=>e.id===this.$store.getters.currentUser.id);return e},getPlayerChipsInPot(){const e=this.getCurrentPlayer();return e&&e.chips||0},getCallAmount(){const e=this.currentGame&&this.currentGame.currentBet||0,t=this.getPlayerChipsInPot(),s=e-t;return Math.max(0,s)},getMaxBetAmount(){const e=this.getCurrentPlayer();return e&&e.totalChips||1},getMinRaiseAmount(){const e=this.currentGame&&this.currentGame.currentBet||0;return Math.max(2*e,2)},getMaxRaiseAmount(){const e=this.getCurrentPlayer();if(!e)return 2;const t=e.totalChips||0,s=e.chips||0;return t+s},handleBet(){this.isGameActive&&this.isYourTurn&&(this.validateBetAmount(),this.$emit("handleAction","bet",this.internalBetAmount))},handleRaise(){this.isGameActive&&this.isYourTurn&&(this.validateRaiseAmount(),this.$emit("handleAction","raise",this.internalRaiseAmount))},updateLocalBetAmount(){this.validateBetAmount(),this.$emit("updateBetAmount",this.internalBetAmount)},updateLocalRaiseAmount(){this.validateRaiseAmount(),this.$emit("updateRaiseAmount",this.internalRaiseAmount)},validateBetAmount(){let e=parseInt(this.internalBetAmount);(isNaN(e)||e<1)&&(e=1);const t=this.getMaxBetAmount();e>t&&(e=t),this.internalBetAmount=e},validateRaiseAmount(){let e=parseInt(this.internalRaiseAmount);const t=this.getMinRaiseAmount();(isNaN(e)||e<t)&&(e=t);const s=this.getMaxRaiseAmount();e>s&&(e=s),this.internalRaiseAmount=e},incrementBet(){this.validateBetAmount();const e=Math.min(this.internalBetAmount+1,this.getMaxBetAmount());this.internalBetAmount=e,this.updateLocalBetAmount()},decrementBet(){this.validateBetAmount();const e=Math.max(this.internalBetAmount-1,1);this.internalBetAmount=e,this.updateLocalBetAmount()},incrementRaise(){this.validateRaiseAmount();const e=Math.min(this.internalRaiseAmount+1,this.getMaxRaiseAmount());this.internalRaiseAmount=e,this.updateLocalRaiseAmount()},decrementRaise(){this.validateRaiseAmount();const e=Math.max(this.internalRaiseAmount-1,this.getMinRaiseAmount());this.internalRaiseAmount=e,this.updateLocalRaiseAmount()}},watch:{betAmount:{handler(e){e!==this.internalBetAmount&&(this.internalBetAmount=e)},immediate:!0},raiseAmount:{handler(e){e!==this.internalRaiseAmount&&(this.internalRaiseAmount=e)},immediate:!0},"currentGame.status":{handler(e){"active"!==e&&this.isYourTurn&&this.$emit("endTurn")},immediate:!0},"currentGame.currentBet":{handler(){if(this.availableActions.includes("raise")){const e=this.getMinRaiseAmount();this.internalRaiseAmount<e&&(this.internalRaiseAmount=e,this.updateLocalRaiseAmount())}},immediate:!0}}},Oe=$e,Ne=(s("f6b2"),Object(i["a"])(Oe,Me,De,!1,null,"49aac5a4",null)),He=Ne.exports,xe=function(){var e=this,t=e._self._c;return t("div",{staticClass:"game-log"},[t("h3",[e._v("Game Log")]),t("div",{staticClass:"log-entries"},e._l(e.gameLog,(function(s,a){return t("div",{key:a,staticClass:"log-entry"},[e._v(" "+e._s(s)+" ")])})),0)])},Fe=[],je={name:"GameLog",props:{gameLog:{type:Array,default:()=>[]}}},qe=je,We=(s("131f"),Object(i["a"])(qe,xe,Fe,!1,null,"09e9840d",null)),Be=We.exports,Ye=function(){var e=this,t=e._self._c;return e.enabled?t("div",{staticClass:"debug-panel"},[t("div",{staticClass:"debug-header"},[t("h3",[e._v("Game Debug Panel")]),t("button",{staticClass:"close-btn",on:{click:function(t){return e.$emit("close")}}},[e._v("×")])]),t("div",{staticClass:"debug-content"},[t("div",{staticClass:"debug-section"},[t("h4",[e._v("Game Info")]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"label"},[e._v("Game ID:")]),t("span",{staticClass:"value"},[e._v(e._s(e.gameId))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"label"},[e._v("Status:")]),t("span",{staticClass:"value"},[e._v(e._s(e.currentGame?e.currentGame.status:"Unknown"))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"label"},[e._v("Players:")]),t("span",{staticClass:"value"},[e._v(e._s(e.currentGame?e.currentGame.players.length:0))])])]),t("div",{staticClass:"debug-section"},[t("h4",[e._v("Current User")]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"label"},[e._v("User ID:")]),t("span",{staticClass:"value"},[e._v(e._s(e.currentUser?e.currentUser.id:"Not logged in"))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"label"},[e._v("Username:")]),t("span",{staticClass:"value"},[e._v(e._s(e.currentUser?e.currentUser.username:"Not logged in"))])]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"label"},[e._v("Is Creator:")]),t("span",{staticClass:"value"},[e._v(e._s(e.isCreator?"Yes":"No"))])])]),t("div",{staticClass:"debug-section"},[t("h4",[e._v("Socket Status")]),t("div",{staticClass:"debug-item"},[t("span",{staticClass:"label"},[e._v("Connected:")]),t("span",{staticClass:"value",class:{"status-good":e.isConnected,"status-bad":!e.isConnected}},[e._v(" "+e._s(e.isConnected?"Yes":"No")+" ")])])]),t("div",{staticClass:"debug-actions"},[t("button",{staticClass:"debug-btn",on:{click:e.refreshGameState}},[e._v("Refresh Game State")]),t("button",{staticClass:"debug-btn",attrs:{disabled:!e.isCreator},on:{click:e.forceStartGame}},[e._v("Force Start Game")]),t("button",{staticClass:"debug-btn",on:{click:e.reconnectSocket}},[e._v("Reconnect Socket")])])])]):e._e()},Je=[],ze={name:"GameDebugPanel",props:{enabled:{type:Boolean,default:!1},gameId:{type:String,required:!0},currentGame:{type:Object,default:null},currentUser:{type:Object,default:null},isCreator:{type:Boolean,default:!1},isConnected:{type:Boolean,default:!1}},methods:{refreshGameState(){this.gameId&&this.currentUser&&(console.log("Debug: Requesting game state update"),Q.requestGameUpdate(this.gameId,this.currentUser.id),this.$emit("log","Debug: Requested game state update"))},forceStartGame(){this.isCreator?(console.log("Debug: Forcing game start"),this.$emit("forceStart")):console.log("Debug: Only creator can start game")},reconnectSocket(){console.log("Debug: Attempting to reconnect socket"),Q.disconnect(),setTimeout(()=>{Q.init().then(()=>{this.currentUser&&this.gameId&&Q.joinGame(this.gameId,this.currentUser.id,this.currentUser.username).then(()=>{this.$emit("log","Debug: Socket reconnected and rejoined game")}).catch(e=>{this.$emit("log","Debug: Error rejoining game: "+e.message)})}).catch(e=>{this.$emit("log","Debug: Error reconnecting socket: "+e.message)})},1e3)}}},Ke=ze,Ve=(s("4234"),Object(i["a"])(Ke,Ye,Je,!1,null,"63a2e319",null)),Qe=Ve.exports;const Ze=["2","3","4","5","6","7","8","9","10","J","Q","K","A"],Xe={};function et(e,t){if(!e||!Array.isArray(e)||0===e.length)return{type:"Unknown Hand",value:0,description:"Unknown Hand"};const s=[...e,...t||[]];if(0===e.length||"Folded"===e[0].rank)return{type:"Folded",value:0,description:"Folded"};const a=tt(s,5),r=a.map(e=>st(e));return r.sort((e,t)=>t.value-e.value),r[0]}function tt(e,t){const s=[];if(t>e.length||t<=0||0===e.length)return s;if(5===e.length&&5===t)return[e];function a(r,n){if(r.length!==t)for(let t=n;t<e.length;t++)r.push(e[t]),a(r,t+1),r.pop();else s.push([...r])}return a([],0),s}function st(e){if(!e||!Array.isArray(e)||5!==e.length)return{type:"Invalid Hand",value:0,description:"Invalid Hand"};const t={};e.forEach(e=>{t[e.rank]=(t[e.rank]||0)+1});const s={};e.forEach(e=>{s[e.suit]=(s[e.suit]||0)+1});const a=Object.values(s).some(e=>5===e),r=e.map(e=>Xe[e.rank]).sort((e,t)=>e-t);let n=!0;for(let u=1;u<r.length;u++)if(r[u]!==r[u-1]+1){n=!1;break}const i=2===r[0]&&3===r[1]&&4===r[2]&&5===r[3]&&14===r[4];i&&(n=!0);const o=Object.values(t).sort((e,t)=>t-e);let l="",c=0,d="";if(a&&n&&14===r[4]&&10===r[0])l="Royal Flush",c=9e3,d="Royal Flush";else if(a&&n)l="Straight Flush",c=8e3+r[4],d=`Straight Flush, ${Ze[r[4]-2]} high`;else if(4===o[0]){const e=Object.keys(t).find(e=>4===t[e]);l="Four of a Kind",c=7e3+Xe[e],d=`Four of a Kind, ${e}s`}else if(3===o[0]&&2===o[1]){const e=Object.keys(t).find(e=>3===t[e]);l="Full House",c=6e3+Xe[e],d=`Full House, ${e}s full`}else if(a)l="Flush",c=5e3+r[4],d=`Flush, ${Ze[r[4]-2]} high`;else if(n)l="Straight",c=4e3+(i?5:r[4]),d=`Straight, ${i?"5":Ze[r[4]-2]} high`;else if(3===o[0]){const e=Object.keys(t).find(e=>3===t[e]);l="Three of a Kind",c=3e3+Xe[e],d=`Three of a Kind, ${e}s`}else if(2===o[0]&&2===o[1]){const e=Object.keys(t).filter(e=>2===t[e]).sort((e,t)=>Xe[t]-Xe[e]);l="Two Pair",c=2e3+10*Xe[e[0]]+Xe[e[1]],d=`Two Pair, ${e[0]}s and ${e[1]}s`}else if(2===o[0]){const e=Object.keys(t).find(e=>2===t[e]);l="One Pair",c=1e3+Xe[e],d=`One Pair, ${e}s`}else l="High Card",c=r[4],d="High Card "+Ze[r[4]-2];return{type:l,value:c,description:d}}function at(e,t){const s=et(e,t);return s.description}Ze.forEach((e,t)=>{Xe[e]=t+2});var rt={evaluateHand:et,getHandDescription:at},nt={createHandlers(e){return{handleGameUpdate(t){var s;if(!t)return;const a=t.players?t.players.filter(e=>e.isActive&&!e.hasFolded):[];if("active"===t.status&&1===a.length&&e.currentGame&&e.currentGame.players&&e.currentGame.players.length>1){const s=a[0];e.addToLog(s.username+" wins by default - last player remaining!"),e.showWinnerDisplay||(e.handWinners=[{playerId:s.id,username:s.username,handName:"Last Player Standing",hand:e.currentUser&&s.id===e.currentUser.id?e.playerHand:[]}],e.winningPot=t.pot||1,e.isFoldWin=!0,e.showWinnerDisplay=!0)}console.log("Updating game state with data:",{id:t.id,status:t.status,currentTurn:t.currentTurn,playerCount:(null===(s=t.players)||void 0===s?void 0:s.length)||0,bettingRound:t.bettingRound});const r={...t};t.players&&t.players.some(e=>e.hasCards)&&"active"!==t.status&&(console.log("Players have cards but game status is not active; forcing to active"),r.status="active"),!t.creator&&e.currentGame&&e.currentGame.creator&&(console.log("Preserving creator info that was missing in update"),r.creator=e.currentGame.creator),e.isYourTurn&&e.currentUser&&t.currentTurn&&t.currentTurn!==e.currentUser.id&&(console.log("Game state indicates it is no longer your turn, updating UI"),e.endTurn()),e.updateGameState(r),e.currentUser&&t.currentTurn&&t.currentTurn===e.currentUser.id&&!e.isYourTurn&&(console.log("Game state shows it is your turn, updating isYourTurn flag"),e.yourTurn({options:e.getDefaultOptions?e.getDefaultOptions():["fold","check","call","bet","raise"]})),e.SET_ERROR_MESSAGE(""),e.isConnected||(e.isConnected=!0,e.addToLog("Connected to game server"))},handleGameStarted(t){console.log("Game started event received:",t),t&&"active"!==t.status&&(t.status="active"),e.updateGameState(t),e.addToLog("Game has started!"),e.gameInProgress=!0,setTimeout(()=>{e.requestStateUpdate()},800),e.clearErrorMessage()},handlePlayerJoined(t){t&&t.username?(console.log("Player joined event received:",t),e.addToLog(t.username+" joined the game"),setTimeout(()=>{e.requestStateUpdate()},300)):console.warn("Received playerJoined event with invalid data:",t)},handlePlayerLeft(t){if(e.addToLog(t.username+" left the game"),e.currentGame&&"active"===e.currentGame.status){const t=e.currentGame.players.filter(e=>e.isActive&&!e.hasFolded);if(1===t.length){const s=t[0];e.addToLog(s.username+" wins by default - last player remaining!"),e.showWinnerDisplay||(e.handWinners=[{playerId:s.id,username:s.username,handName:"Last Player Standing",hand:e.currentUser&&s.id===e.currentUser.id?e.playerHand:[]}],e.winningPot=e.currentGame.pot||1,e.isFoldWin=!0,e.showWinnerDisplay=!0)}}},handleChatMessage(t){"system"===t.type&&e.addToLog(t.message)},handleDealCards(t){console.log("Received cards:",t),t&&t.hand&&Array.isArray(t.hand)||(console.warn("Received invalid card data:",t),t={hand:[]}),e.playerHand=[],setTimeout(()=>{e.playerHand=t.hand,e.addToLog("You have been dealt new cards"),e.$forceUpdate(),e.gameInitialized=!0,e.gameInProgress=!0,e.currentGame&&"active"!==e.currentGame.status&&(e.$set(e.currentGame,"status","active"),e.addToLog("Game status updated to active")),e.clearErrorMessage(),setTimeout(()=>{e.requestStateUpdate()},500)},100)},handleYourTurn(t){if(e.currentGame&&"waiting"===e.currentGame.status)console.log("Received yourTurn event but game is in waiting status - ignoring");else{if(e.currentGame&&e.currentUser){const t=e.currentGame.currentTurn,s=e.currentUser.id;if(t&&s&&t!==s)return console.warn("Received yourTurn event but game state says it's not our turn!",{userTurn:s,gameTurn:t}),void setTimeout(()=>{e.requestStateUpdate()},300)}e.isYourTurnProcessed?console.log("Already processed yourTurn, ignoring duplicate"):(console.log("Your turn event received:",t),e.yourTurn(t),e.isYourTurn=!0,e.addToLog("It is your turn"),e.currentGame&&"active"!==e.currentGame.status&&e.$set(e.currentGame,"status","active"),e.gameInitialized=!0,e.gameInProgress=!0,e.startActionTimer(t.timeLimit||60),e.isYourTurnProcessed=!0,setTimeout(()=>{e.isYourTurnProcessed=!1},3e3))}},handleTurnChanged(t){e.currentUser&&t.playerId===e.currentUser.id?(e.addToLog("It is your turn"),e.isYourTurn||e.yourTurn({options:e.getDefaultOptions?e.getDefaultOptions():["fold","check","call","bet","raise"]})):e.addToLog(`It is ${t.username}'s turn`)},handleActionTaken(t){const s=e.currentUser&&t.playerId===e.currentUser.id;if(s&&e.endTurn(),!s){var a;const s=null===(a=e.currentGame)||void 0===a||null===(a=a.players)||void 0===a?void 0:a.find(e=>e.id===t.playerId),r=s?s.username:"Unknown";let n=`${r} ${t.action}s`;"bet"!==t.action&&"raise"!==t.action&&"allIn"!==t.action||(n+=` ${t.amount} chips`),e.addToLog(n)}},handleDealFlop(){e.addToLog("Flop is dealt")},handleDealTurn(){e.addToLog("Turn is dealt")},handleDealRiver(){e.addToLog("River is dealt")},handleHandResult(t){if(console.log("Received hand result:",t),!t)return void console.error("Hand result is empty or invalid");if(console.log("Winners array:",JSON.stringify(t.winners)),console.log("All players cards:",JSON.stringify(t.allPlayersCards)),console.log("Community cards:",JSON.stringify(t.communityCards)),console.log("Pot amount:",t.pot),console.log("Is fold win:",t.isFoldWin),!t.winners||!Array.isArray(t.winners)||0===t.winners.length)return void console.error("No valid winners in result data");const s=t.winners.map(e=>({playerId:e.playerId||"unknown",username:e.username||"Unknown Player",handName:e.handName||"Unknown Hand",hand:Array.isArray(e.hand)?e.hand:[]})),a=Array.isArray(t.allPlayersCards)?t.allPlayersCards.map(a=>{const r=Array.isArray(a.hand)?a.hand:[],n=Array.isArray(t.communityCards)?t.communityCards:[];let i="Unknown",o="Unknown Hand";if(r.length>0){const t=e.evaluateHand?e.evaluateHand(r,n):{type:"Unknown",description:"Unknown Hand"};i=t.type,o=t.description}else"Folded"===a.handName&&(i="Folded",o="Folded");return{playerId:a.playerId||"unknown",username:a.username||"Unknown Player",handName:o,handType:i,hand:r,isWinner:a.isWinner||s.some(e=>e.playerId===a.playerId)}}):[],r=Array.isArray(t.communityCards)?t.communityCards:[];e.handWinners=s,e.allPlayersCards=a,e.communityCards=r,e.winningPot=(null===t||void 0===t?void 0:t.pot)||0,e.isFoldWin=(null===t||void 0===t?void 0:t.isFoldWin)||!1,e.showWinnerDisplay=!0;const n=s.map(e=>e.username).join(", ");let i="Hand complete. Winner(s): "+n;t.isFoldWin&&(i=n+" wins by fold"),e.addToLog(i),e.previousPlayerHand=[...e.playerHand],e.playerHand=[],e.forceCardUpdate(),(t.isFoldWin||1===t.winners.length)&&(e.endTurn(),e.isYourTurn=!1,e.clearActionTimer(),e.currentGame&&"waiting"!==e.currentGame.status&&e.$set(e.currentGame,"status","waiting"),e.isYourTurnProcessed=!1)},handleNewHand(t){e.addToLog("Starting a new hand"),e.updateGameState(t)},handleGameEnded(e){if(console.log("Game ended: "+e.message),e.message&&e.message.includes("Chip e entek")){const t=this.getCurrentPlayer();t&&t.totalChips<=0?this.addToLog(`Game ended: ${e.message} - You have no chips left!`):this.addToLog("Game paused: Some players have no chips left. Ready up to continue playing.")}else this.addToLog("Game ended: "+e.message)},handleGameError(t){e.gameInProgress&&e.playerHand&&e.playerHand.length>0?e.addToLog(`Warning: ${t.message} (game continuing)`):(e.SET_ERROR_MESSAGE(t.message),e.addToLog("Error: "+t.message))},handleCreatorInfo(t){console.log("Received creator info:",t),e.currentGame&&!e.currentGame.creator&&t.creator&&(e.$set(e.currentGame,"creator",t.creator),e.addToLog("Creator info received and updated")),e.explicitIsCreator=t.isCreator},handleClearPlayerHands(t){console.log("Received clearPlayerHands event:",t),e.previousPlayerHand=[...e.playerHand],e.playerHand=[],t&&t.message&&e.addToLog(t.message),e.$forceUpdate(),e.$refs.playerList&&"function"===typeof e.$refs.playerList.forceUpdate&&e.$refs.playerList.forceUpdate()},handleCreatorChanged(t){if(console.log("Creator changed:",t),e.currentGame){e.currentGame.creator||(e.currentGame.creator={}),e.currentGame.creator={user:t.newCreator.userId,username:t.newCreator.username},e.$forceUpdate();const s=e.currentUser&&e.currentUser.id===t.newCreator.userId;s&&(e.explicitIsCreator=!0),e.addToLog(`${t.previousCreator.username} is no longer the creator. ${t.newCreator.username} is now the creator. Reason: ${t.reason}`),e.requestStateUpdate()}},handleBecameCreator(t){console.log("Became creator:",t),e.explicitIsCreator=!0,e.addToLog("You are now the game creator! "+t.message),alert("You are now the game creator! "+t.message),e.requestStateUpdate()},handlePlayerRemoved(t){console.log("Player removed:",t),e.addToLog(`${t.username} has been removed from the game. Reason: ${t.reason}`),e.currentUser&&t.userId===e.currentUser.id&&(alert("You've been removed from the game: "+t.reason),t.reason.includes("insufficient chips")&&(e.SET_ERROR_MESSAGE("You've been removed from the game due to insufficient chips"),e.isObserver=!0,e.observerMessage="You don't have enough chips to continue playing. You are now in observer mode.",e.isYourTurn&&e.endTurn())),e.requestStateUpdate()}}}};const it=()=>["fold","check","call","bet","raise"],ot=(e,t,s)=>{const a=Date.now();return e.some(e=>e.message===t&&a-e.time<s)},lt=(e,t,s,a)=>{const r=(new Date).toLocaleTimeString(),n=Date.now(),i=t||[],o=ot(i,s,a);if(o)return console.log("Suppressed duplicate log message: "+s),{gameLog:e,lastLogMessages:i};i.push({message:s,time:n}),i.length>10&&i.shift();const l=[`[${r}] ${s}`,...e];return l.length>50&&l.pop(),{gameLog:l,lastLogMessages:i}};var ct=function(){var e=this,t=e._self._c;return e.isGameActive&&e.timeRemaining>0?t("div",{staticClass:"action-timer"},[t("div",{staticClass:"timer-bar"},[t("div",{staticClass:"timer-progress",style:{width:e.progressPercentage+"%",backgroundColor:e.timerColor}})]),t("div",{staticClass:"timer-text"},[e._v(" "+e._s(e.timeRemaining)+" seconds to act ")])]):e._e()},dt=[],ut={name:"ActionTimer",props:{initialTime:{type:Number,default:60},isActive:{type:Boolean,default:!1},currentGame:{type:Object,required:!0}},data(){return{timeRemaining:0,timerInterval:null}},computed:{progressPercentage(){return this.timeRemaining/this.initialTime*100},timerColor(){return this.timeRemaining<=10?"#e74c3c":this.timeRemaining<=20?"#f39c12":"#2ecc71"},isGameActive(){return this.currentGame&&"active"===this.currentGame.status}},watch:{isActive(e){e&&this.isGameActive?this.startTimer():this.stopTimer()},initialTime(e){this.isActive&&this.isGameActive&&(this.timeRemaining=e,this.restartTimer())},"currentGame.status"(e){"active"!==e?this.stopTimer():this.isActive&&this.startTimer()}},mounted(){this.isActive&&this.isGameActive&&this.startTimer()},beforeDestroy(){this.stopTimer()},methods:{startTimer(){this.stopTimer(),this.isGameActive?(this.timeRemaining=this.initialTime,this.timerInterval=setInterval(()=>{this.timeRemaining>0?this.timeRemaining--:(this.stopTimer(),this.$emit("timerComplete"))},1e3)):console.log("Cannot start timer - game is not active")},stopTimer(){this.timerInterval&&(clearInterval(this.timerInterval),this.timerInterval=null)},restartTimer(){this.stopTimer(),this.isGameActive&&this.startTimer()},resetTimer(){this.timeRemaining=this.initialTime}}},mt=ut,ht=(s("bda1"),Object(i["a"])(mt,ct,dt,!1,null,"204ef513",null)),gt=ht.exports,pt=function(){var e=this,t=e._self._c;return e.visible?t("div",{staticClass:"winner-display"},[t("div",{staticClass:"winner-overlay"}),t("div",{staticClass:"winner-content"},[t("h2",{staticClass:"winner-title"},[e.winners&&1===e.winners.length?t("span",[e._v("Winner!")]):e.winners&&e.winners.length>1?t("span",[e._v("Split Pot!")]):t("span",[e._v("Game Result")])]),t("div",{staticClass:"community-cards-section"},[t("h3",[e._v("Community Cards")]),e.isFoldWin&&!e.displayCommunityCards.length?t("div",{staticClass:"fold-win-message"},[e._v(" Hand ended early - other player(s) folded or left ")]):e.displayCommunityCards.length?t("div",{staticClass:"community-cards"},e._l(e.displayCommunityCards,(function(s,a){return t("div",{key:"community-"+a,staticClass:"card-display community-card",attrs:{"data-suit":s.suit}},[e._v(" "+e._s(e.formatCard(s))+" ")])})),0):t("div",{staticClass:"fold-win-message"},[e._v(" No community cards ")])]),t("div",{staticClass:"all-players-section"},[t("h3",[e._v("Players' Hands")]),t("div",{staticClass:"players-grid"},e._l(e.processedPlayers,(function(s){return t("div",{key:s.playerId,staticClass:"player-result",class:{"winner-result":s.isWinner,"folded-player":"Folded"===s.handType}},[t("div",{staticClass:"player-name-heading"},[e._v(" "+e._s(s.username)+" "),s.isWinner?t("span",{staticClass:"winner-badge"},[e._v("Winner")]):e._e(),"Folded"===s.handType?t("span",{staticClass:"folded-badge"},[e._v("Folded")]):e._e()]),t("div",{staticClass:"player-hand-name"},[e._v(e._s(s.handDescription))]),"Folded"===s.handType?t("div",{staticClass:"folded-message"},[e._v(" Player folded their hand ")]):t("div",{staticClass:"player-cards"},[e._l(s.hand,(function(a,r){return t("div",{key:"player-"+s.playerId+"-card-"+r,staticClass:"card-display",class:{"winning-card":s.isWinner},attrs:{"data-suit":a.suit}},[e._v(" "+e._s(e.formatCard(a))+" ")])})),0===s.hand.length?t("div",{staticClass:"no-cards"},[e._v(" Cards not shown ")]):e._e()],2)])})),0)]),e.winners&&e.winners.length>0?t("div",{staticClass:"winner-info"},[t("div",{staticClass:"winner-pot"},[1===e.winners.length&&e.isFoldWin&&e.pot>0?t("span",[e._v(" "+e._s(e.winners[0].username)+" wins "+e._s(e.pot)+" chips (last player standing) ")]):1===e.winners.length&&e.pot>0?t("span",[e._v(" "+e._s(e.winners[0].username)+" won "+e._s(e.pot)+" chips ")]):e.winners.length>1&&e.pot>0?t("span",[e._v(" Split pot: "+e._s(e.winners.map(e=>e.username).join(", "))+" each won "+e._s(e.splitPotAmount(e.winners[0]))+" chips ")]):!e.pot||e.pot<=0?t("span",{staticClass:"error-message"},[e._v(" Error: No pot amount available. Please refresh the game page. ")]):e._e()])]):e._e(),t("div",{staticClass:"ready-up-section"},[t("p",{staticClass:"ready-message"},[e._v("Please ready up for the next hand")]),t("button",{staticClass:"ready-btn",class:{"ready-confirm":e.isCurrentPlayerReady},on:{click:e.toggleReady}},[e._v(" "+e._s(e.isCurrentPlayerReady?"I'm Ready ✓":"Mark as Ready")+" ")]),e.readySummary?t("p",{staticClass:"ready-info"},[e._v(e._s(e.readySummary))]):e._e(),e.isCreator&&e.areEnoughPlayersReady?t("div",{staticClass:"start-next-hand"},[t("button",{staticClass:"start-next-hand-btn",on:{click:e.emitStartNextHand}},[e._v(" Start Next Hand ")])]):e._e(),e.currentGame&&"active"===e.currentGame.status?t("p",{staticClass:"warning-message"},[e._v(" Warning: Game state is inconsistent. Please refresh the page if issues persist. ")]):e._e()]),t("button",{staticClass:"close-display-btn",on:{click:e.closeWinnerDisplay}},[e._v("Close")])])]):e._e()},yt=[],vt=(s("13d5"),s("9485"),{name:"WinnerDisplay",props:{winners:{type:Array,default:()=>[]},allPlayers:{type:Array,default:()=>[]},communityCards:{type:Array,default:()=>[]},pot:{type:Number,default:0},visible:{type:Boolean,default:!1},formatCard:{type:Function,required:!0},currentGame:{type:Object,default:null},currentUser:{type:Object,default:null},gameId:{type:String,default:""},isCreator:{type:Boolean,default:!1},isFoldWin:{type:Boolean,default:!1},previousPlayerHand:{type:Array,default:()=>[]}},computed:{isCurrentPlayerReady(){if(!this.currentUser||!this.currentGame||!this.currentGame.players)return!1;const e=this.currentGame.players.find(e=>e.id===this.currentUser.id);return!!e&&e.isReady},readySummary(){if(!this.currentGame||!this.currentGame.players)return"Waiting for players...";const e=this.currentGame.players.filter(e=>e.isReady).length,t=this.currentGame.players.length;return 0===e?"No players are ready yet":e===t&&t>=2?"All players are ready!":`${e} of ${t} players ready`},areEnoughPlayersReady(){if(!this.currentGame||!this.currentGame.players)return!1;const e=this.currentGame.players.filter(e=>e.isReady);return e.length>=2},displayCommunityCards(){return Array.isArray(this.communityCards)?this.communityCards:[]},formattedPlayerResults(){return this.allPlayers.map(e=>{const t={...e};return t.handName=this.determineHandType(e.hand,this.communityCards),t})},processedPlayers(){return(this.allPlayers||[]).map(e=>{const t={...e};this.currentUser&&e.playerId===this.currentUser.id&&(!e.hand||0===e.hand.length)&&this.previousPlayerHand&&this.previousPlayerHand.length>0&&(t.hand=this.previousPlayerHand);const s=rt.evaluateHand(t.hand||[],this.communityCards||[]);return t.handType=s.type,t.handDescription=s.description,t})}},watch:{currentGame:{handler(){this.isCreator&&this.areEnoughPlayersReady&&console.log("Enough players are ready for next hand")},deep:!0}},methods:{splitPotAmount(e){return!this.pot||this.pot<=0?(console.error("Invalid pot amount:",this.pot),0):!this.winners||this.winners.length<=0?(console.error("No winners provided for pot calculation"),0):this.winners.length<=1?this.pot:Math.floor(this.pot/this.winners.length)},closeWinnerDisplay(){this.$emit("close")},toggleReady(){var e;if(this.currentUser&&this.gameId){if(!Q.isSocketConnected())return console.warn("Socket not connected, trying to reconnect..."),void Q.init().then(()=>{this.toggleReady()});null===(e=Q.gameSocket)||void 0===e||e.emit("playerReady",{gameId:this.gameId,userId:this.currentUser.id,isReady:!this.isCurrentPlayerReady}),this.$emit("addToLog","You marked yourself as "+(this.isCurrentPlayerReady?"not ready":"ready"))}else console.error("Cannot toggle ready: missing user or game data")},emitStartNextHand(){this.isCreator?this.areEnoughPlayersReady?(console.log("Emitting startNextHand event"),this.$emit("startNextHand"),this.$emit("addToLog","Starting next hand..."),this.closeWinnerDisplay()):this.$emit("addToLog","Not enough players are ready yet"):console.warn("Only the creator can start the next hand")},determineHandType(e,t){if(!e||!Array.isArray(e)||0===e.length)return"Unknown Hand";if(0===e.length)return"Folded";const s=[...e,...t],a=s.map(e=>e.rank),r={};a.forEach(e=>{r[e]=(r[e]||0)+1});const n=Object.values(r).filter(e=>2===e).length,i=Object.values(r).some(e=>3===e),o=Object.values(r).some(e=>4===e);if(o)return"Four of a Kind";if(i&&n>0)return"Full House";if(i)return"Three of a Kind";if(n>=2)return"Two Pair";if(1===n)return"One Pair";const l={2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10,J:11,Q:12,K:13,A:14},c=a.reduce((e,t)=>l[t]>l[e]?t:e,a[0]);return"High Card "+c}}}),ft=vt,Ct=(s("3a66"),Object(i["a"])(ft,pt,yt,!1,null,"e566e614",null)),_t=Ct.exports,bt=function(){var e=this,t=e._self._c;return t("div",{staticClass:"game-chat"},[t("div",{staticClass:"chat-header"},[t("h3",[e._v("Game Chat")]),t("div",{staticClass:"chat-controls"},[t("button",{staticClass:"toggle-btn",on:{click:e.toggleChat}},[e._v(" "+e._s(e.chatMinimized?"Show Chat":"Hide Chat")+" ")])])]),e.chatMinimized?e._e():t("div",{staticClass:"chat-content"},[t("div",{ref:"messagesContainer",staticClass:"messages-container"},e._l(e.chatMessages,(function(s,a){return t("div",{key:a,staticClass:"message",class:{"system-message":"system"===s.type,"own-message":s.userId===e.currentUser.id,"player-message":"system"!==s.type}},[t("div",{staticClass:"message-header"},[t("span",{staticClass:"username"},[e._v(e._s(s.username))]),t("span",{staticClass:"timestamp"},[e._v(e._s(e.formatTime(s.timestamp)))])]),t("div",{staticClass:"message-content"},[e._v(e._s(s.message))])])})),0),t("div",{staticClass:"message-input"},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.newMessage,expression:"newMessage"}],attrs:{type:"text",placeholder:"Type a message...",disabled:e.inputDisabled},domProps:{value:e.newMessage},on:{keyup:function(t){return!t.type.indexOf("key")&&e._k(t.keyCode,"enter",13,t.key,"Enter")?null:e.sendMessage.apply(null,arguments)},input:function(t){t.target.composing||(e.newMessage=t.target.value)}}}),t("button",{staticClass:"send-btn",attrs:{disabled:e.inputDisabled},on:{click:e.sendMessage}},[e._v(" Send ")])])])])},St=[],Tt={name:"GameChat",props:{gameId:{type:String,required:!0},currentUser:{type:Object,required:!0}},data(){return{chatMessages:[],newMessage:"",chatMinimized:!1,inputDisabled:!1,recentMessages:new Map,messageDedupeTime:3e3,rateLimit:{messageCount:0,lastResetTime:Date.now(),timeout:null,waiting:!1},messageRateLimit:3,rateLimitResetTime:5e3}},mounted(){this.setupChatListeners(),this.scrollToBottom()},methods:{setupChatListeners(){Q.on("chatMessage",this.handleChatMessage),Q.on("playerJoined",this.handlePlayerJoined),Q.on("playerLeft",this.handlePlayerLeft),Q.on("gameStarted",this.handleGameStarted),Q.on("gameEnded",this.handleGameEnded),Q.on("handResult",this.handleHandResult)},handleChatMessage(e){this.isDuplicateMessage(e)||(this.chatMessages.push(e),this.scrollToBottom(),"system"!==e.type&&this.recentMessages.set(e.userId,{message:e.message,timestamp:Date.now()}))},handlePlayerJoined(e){this.chatMessages.push({type:"system",username:"System",message:e.username+" has joined the game",timestamp:Date.now()}),this.scrollToBottom()},handlePlayerLeft(e){this.chatMessages.push({type:"system",username:"System",message:e.username+" has left the game",timestamp:Date.now()}),this.scrollToBottom()},handleGameStarted(){this.chatMessages.push({type:"system",username:"System",message:"The game has started!",timestamp:Date.now()}),this.scrollToBottom()},handleGameEnded(e){this.chatMessages.push({type:"system",username:"System",message:"Game ended: "+(e.message||"Game completed"),timestamp:Date.now()}),this.scrollToBottom()},handleHandResult(e){let t="Unknown";e.winners&&e.winners.length&&(t=e.winners.map(e=>e.username).join(", "));const s=e.isFoldWin?t+" won by fold":"Hand complete. Winner(s): "+t;this.chatMessages.push({type:"system",username:"System",message:s,timestamp:Date.now()}),this.scrollToBottom()},isDuplicateMessage(e){if("system"===e.type)return!1;if(this.recentMessages.has(e.userId)){const t=this.recentMessages.get(e.userId),s=Date.now()-t.timestamp;if(t.message===e.message&&s<this.messageDedupeTime)return console.log("Duplicate message suppressed: "+e.message),!0}return!1},sendMessage(){if(!this.newMessage.trim())return;if(this.isRateLimited())return this.chatMessages.push({type:"system",username:"System",message:"Please wait a moment before sending more messages",timestamp:Date.now()}),void this.scrollToBottom();const e=this.recentMessages.get(this.currentUser.id);if(e&&e.message===this.newMessage&&Date.now()-e.timestamp<this.messageDedupeTime)return this.chatMessages.push({type:"system",username:"System",message:"Duplicate message not sent",timestamp:Date.now()}),void this.scrollToBottom();this.incrementRateLimit(),this.recentMessages.set(this.currentUser.id,{message:this.newMessage,timestamp:Date.now()}),Q.sendChatMessage(this.gameId,this.currentUser.id,this.currentUser.username,this.newMessage),this.chatMessages.push({type:"user",userId:this.currentUser.id,username:this.currentUser.username,message:this.newMessage,timestamp:Date.now()}),this.newMessage="",this.scrollToBottom()},isRateLimited(){const e=Date.now();return e-this.rateLimit.lastResetTime>this.rateLimitResetTime&&(this.rateLimit.messageCount=0,this.rateLimit.lastResetTime=e,this.rateLimit.waiting=!1),this.rateLimit.waiting||this.rateLimit.messageCount>=this.messageRateLimit},incrementRateLimit(){this.rateLimit.messageCount++,this.rateLimit.messageCount>=this.messageRateLimit&&(this.rateLimit.waiting=!0,this.inputDisabled=!0,this.rateLimit.timeout&&clearTimeout(this.rateLimit.timeout),this.rateLimit.timeout=setTimeout(()=>{this.rateLimit.messageCount=0,this.rateLimit.lastResetTime=Date.now(),this.rateLimit.waiting=!1,this.inputDisabled=!1},this.rateLimitResetTime))},toggleChat(){this.chatMinimized=!this.chatMinimized,this.chatMinimized||this.$nextTick(()=>{this.scrollToBottom()})},scrollToBottom(){this.$nextTick(()=>{this.$refs.messagesContainer&&(this.$refs.messagesContainer.scrollTop=this.$refs.messagesContainer.scrollHeight)})},formatTime(e){const t=new Date(e);return t.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}},beforeDestroy(){Q.off("chatMessage",this.handleChatMessage),Q.off("playerJoined",this.handlePlayerJoined),Q.off("playerLeft",this.handlePlayerLeft),Q.off("gameStarted",this.handleGameStarted),Q.off("gameEnded",this.handleGameEnded),Q.off("handResult",this.handleHandResult),this.rateLimit.timeout&&clearTimeout(this.rateLimit.timeout)}},Rt=Tt,wt=(s("218a"),Object(i["a"])(Rt,bt,St,!1,null,"ac0316a6",null)),Gt=wt.exports,At={name:"Game",components:{GameHeader:ce,GameStatus:be,CommunityCards:Ae,PlayerList:Le,PlayerActions:He,GameLog:Be,GameDebugPanel:Qe,ActionTimer:gt,WinnerDisplay:_t,PlayerReadyComponent:ve,GameChat:Gt},data(){return{gameId:"",socket:null,isConnected:!1,isStarting:!1,gameLog:[],lastLogMessages:[],betAmount:1,raiseAmount:0,showResult:!1,handResult:null,actionTimer:null,actionTimeLimit:60,actionTimeRemaining:60,showDebugPanel:!1,explicitIsCreator:!1,gameInProgress:!1,gameInitialized:!1,messageDedupeTime:1e3,isYourTurnProcessed:!1,setupComplete:!1,handlers:null,eventHandlers:[],isYourTurn:!1,showWinnerDisplay:!1,handWinners:[],winningPot:0,previousPlayerHand:[],playerHand:[],availableActions:[],allPlayersCards:[],communityCards:[],isFoldWin:!1,currentHandTimestamp:0,cardRefreshCounter:0,isObserver:!1,observerMessage:""}},computed:{...Object(p["c"])(["currentUser","currentGame","errorMessage"]),isAuthenticated(){return!!this.$store.getters.token||!!localStorage.getItem("token")},isCreator(){if(!this.currentGame||!this.currentUser)return console.log("isCreator check failed: missing required data"),!1;if(this.currentGame.creator&&this.currentGame.creator.user){let e="";e="object"===typeof this.currentGame.creator.user&&this.currentGame.creator.user.$oid?this.currentGame.creator.user.$oid:"string"===typeof this.currentGame.creator.user?this.currentGame.creator.user:"function"===typeof this.currentGame.creator.user.toString?this.currentGame.creator.user.toString():String(this.currentGame.creator.user);const t=String(this.currentUser.id||this.currentUser._id);return console.log("Creator ID for comparison:",e),console.log("User ID for comparison:",t),e===t}if(console.log("No creator field found - using fallback method"),this.currentGame.players&&this.currentGame.players.length>0){const e=this.currentGame.players[0],t=String(e.id||e.user||""),s=String(this.currentUser.id||this.currentUser._id||"");return console.log("First player ID:",t),console.log("Current user ID:",s),console.log("Is first player? (fallback):",t===s),t===s}return!!this.explicitIsCreator&&(console.log("Using explicit creator status: true"),!0)},canJoinGame(){return this.isObserver&&this.currentGame&&"waiting"===this.currentGame.status}},methods:{...Object(p["b"])(["fetchGame","startGame","clearErrorMessage","updateGameState","receiveCards","yourTurn","endTurn","performAction"]),...Object(p["d"])(["SET_CURRENT_GAME_ID","SET_ERROR_MESSAGE"]),formatCard(e){if(!e||!e.suit||!e.rank)return console.warn("Invalid card data received:",e),"?";const t={hearts:"♥",diamonds:"♦",clubs:"♣",spades:"♠"},s=t[e.suit.toLowerCase()]||"?";return`${e.rank}${s}`},getDefaultOptions:it,yourTurn(e){this.isYourTurn=!0,this.availableActions=e.options||[],this.$store.commit("SET_YOUR_TURN",!0),this.$store.commit("SET_AVAILABLE_ACTIONS",e.options||[])},getCurrentPlayerName(){if(!this.currentGame||!this.currentGame.currentTurn)return"N/A";const e=this.currentGame.players.find(e=>e.id===this.currentGame.currentTurn);return e?e.username:"Unknown"},endTurn(){this.isYourTurn=!1,this.availableActions=[],this.clearActionTimer(),this.$store.commit("SET_YOUR_TURN",!1),this.$store.commit("SET_AVAILABLE_ACTIONS",[]),this.isYourTurnProcessed=!1,this.$forceUpdate(),console.log("Turn ended successfully")},getCurrentPlayer(){if(!this.currentGame||!this.currentUser)return null;const e=this.currentGame.players.find(e=>e.id===this.currentUser.id||e.user&&e.user.toString()===this.currentUser.id.toString());return e||null},getPlayerChipsInPot(){const e=this.getCurrentPlayer();return e&&e.chips||0},copyGameId(){navigator.clipboard.writeText(this.gameId).then(()=>{alert("Game ID copied to clipboard")}).catch(e=>{console.error("Could not copy text: ",e);const t=document.createElement("textarea");t.value=this.gameId,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),alert("Game ID copied to clipboard")})},leaveGame(){confirm("Are you sure you want to leave the game?")&&(Q.leaveGame(this.gameId,this.currentUser.id),this.$router.push("/lobby"))},async handleStartGame(){this.isStarting=!0,this.addToLog("Attempting to start the game..."),this.clearErrorMessage();try{if(console.log("Starting game:",this.gameId),console.log("Current user:",this.currentUser),console.log("Is creator:",this.isCreator),console.log("Players in game:",this.currentGame.players.length),"active"===this.currentGame.status)return this.addToLog("Game is already active, refreshing state..."),this.requestStateUpdate(),void(this.gameInProgress=!0);const e=await this.startGame(this.gameId);if(!e.success)throw console.error("Start game API returned error:",e.error),new Error(e.error||"Failed to start game on the server");this.addToLog("Game started on server, initializing..."),this.gameInProgress=!0,setTimeout(()=>{this.requestStateUpdate(),setTimeout(()=>{0===this.playerHand.length&&(console.log("No cards received yet, trying direct socket method"),this.triggerGameInitialize())},2e3)},500)}catch(e){console.error("Error starting game:",e),e.message&&e.message.includes("already been started")?(this.addToLog("Game is already in progress, refreshing state..."),this.gameInProgress=!0,this.requestStateUpdate()):(this.SET_ERROR_MESSAGE(e.message||"Error starting game. Please try again."),this.addToLog("Failed to start game: "+e.message))}finally{this.isStarting=!1}},triggerGameInitialize(){var e;null===(e=Q.gameSocket)||void 0===e||e.emit("initializeGame",{gameId:this.gameId,userId:this.currentUser.id}),this.addToLog("Sent initialize game request")},handleAction(e,t=0){if(!this.isYourTurn)return void console.warn("Not your turn - ignoring action");if(this.clearActionTimer(),this.endTurn(),("bet"===e||"raise"===e||"call"===e||"allIn"===e)&&(t=parseFloat(t),isNaN(t)))if(console.error(`Invalid amount for ${e}: ${t}`),"call"===e){const e=this.currentGame.currentBet||0,s=this.getPlayerChipsInPot();t=Math.max(0,e-s)}else if("allIn"===e){const e=this.getCurrentPlayer();t=e?e.totalChips:0}else t=1;console.log(`Sending player action: ${e} with amount: ${t}`),Q.sendPlayerAction(this.gameId,this.currentUser.id,e,t),this.$store.dispatch("performAction",{action:e,amount:t});let s="You "+e;"bet"===e||"raise"===e||"call"===e&&t>0?s+=` ${t} chips`:"allIn"===e&&(s+=` with ${t} chips`),this.addToLog(s)},addToLog(e){const t=lt(this.gameLog,this.lastLogMessages,e,this.messageDedupeTime);this.gameLog=t.gameLog,this.lastLogMessages=t.lastLogMessages},async setupSocketConnection(){try{await Q.init(),await Q.joinGame(this.gameId,this.currentUser.id,this.currentUser.username),this.isConnected=Q.isSocketConnected(),this.addToLog("Connected to game server"),this.handlers=nt.createHandlers(this);const e=["gameUpdate","gameStarted","playerJoined","playerLeft","chatMessage","dealCards","yourTurn","turnChanged","actionTaken","dealFlop","dealTurn","dealRiver","handResult","newHand","gameEnded","gameError","creatorInfo","forceCardUpdate","clearPlayerHands","creatorChanged","becameCreator","playerRemoved"];e.forEach(e=>{const t="handle"+(e.charAt(0).toUpperCase()+e.slice(1));if(this.handlers[t]){const s=this.handlers[t];Q.on(e,s),this.eventHandlers.push({event:e,handler:s})}});const t=e=>{console.log("Player ready update received:",e);const t=`${e.username} is ${e.isReady?"ready":"not ready"}`;this.addToLog(t)};Q.on("playerReadyUpdate",t),this.eventHandlers.push({event:"playerReadyUpdate",handler:t});const s=e=>{console.log("All players ready:",e),this.addToLog(`All players are ready (${e.readyCount}/${e.totalPlayers})!`)};return Q.on("allPlayersReady",s),this.eventHandlers.push({event:"allPlayersReady",handler:s}),Q.gameSocket.on("connect",()=>{console.log("Socket connected event received"),this.isConnected=!0}),Q.gameSocket.on("disconnect",()=>{console.log("Socket disconnected event received"),this.isConnected=!1}),this.requestGameState(),!0}catch(e){return console.error("Error setting up socket connection:",e),this.addToLog("Failed to connect to game server"),this.isConnected=!1,setTimeout(()=>{this.isConnected||(console.log("Attempting to reconnect..."),this.setupSocketConnection())},3e3),!1}},requestGameState(e=3){Q.requestGameUpdate(this.gameId,this.currentUser.id),e>0&&setTimeout(()=>{this.currentGame||(console.log(`Game state not received, retrying... (${e} attempts left)`),this.requestGameState(e-1))},1e3)},startActionTimer(e=60){this.actionTimeLimit=e,this.clearActionTimer(),this.actionTimer=setInterval(()=>{this.actionTimeLimit--,this.actionTimeLimit<=0&&(this.clearActionTimer(),this.handleTimerComplete())},1e3)},clearActionTimer(){this.actionTimer&&(clearInterval(this.actionTimer),this.actionTimer=null,console.log("Action timer cleared"))},requestInitialization(){this.addToLog("Requesting game initialization..."),this.triggerGameInitialize()},requestStateUpdate(){this.addToLog("Requesting game state update..."),Q.requestGameUpdate(this.gameId,this.currentUser.id)},shouldShowActions(){return!(!this.currentGame||"active"!==this.currentGame.status)&&this.isYourTurn},forceStartGame(){console.log("Force starting game through debug panel"),this.handleStartGame()},async fetchGameWithRetry(e,t=3){let s=0;while(s<t)try{console.log(`Attempt ${s+1} to fetch game data`);const t=await this.fetchGame(e);if(t.success)return console.log("Successfully fetched game data"),t;throw new Error(t.error||"Failed to fetch game")}catch(a){if(console.error(`Fetch attempt ${s+1} failed:`,a),s++,s>=t)throw console.error(`Failed to fetch game after ${t} attempts`),a;await new Promise(e=>setTimeout(e,1e3))}},forceCardUpdate(){this.$forceUpdate(),this.$children.forEach(e=>{"function"===typeof e.$forceUpdate&&e.$forceUpdate()}),console.log("Forced game component update")},handleTimerComplete(){console.log("Timer complete - auto folding"),this.isYourTurn&&(this.handleAction("fold"),this.addToLog("Time expired - auto fold"))},handleWinnerDisplayClose(){console.log("Winner display closed"),this.showWinnerDisplay=!1,this.handWinners=[],this.requestStateUpdate(),setTimeout(()=>{this.$store.dispatch("fetchUserData").then(()=>console.log("User data refreshed after hand")).catch(e=>console.error("Failed to refresh user data:",e))},500)},handleHandResult(e){if(console.log("Received hand result:",e),!e)return void console.error("Hand result is empty or invalid");if(console.log("Winners array:",JSON.stringify(e.winners)),console.log("Pot amount:",e.pot),!e.winners||!Array.isArray(e.winners)||0===e.winners.length)return void console.error("No valid winners in result data");const t=e.winners.map(e=>({playerId:e.playerId||"unknown",username:e.username||"Unknown Player",handName:e.handName||"Unknown Hand",hand:Array.isArray(e.hand)?e.hand:[]}));let s=[];Array.isArray(e.allPlayersCards)&&(s=e.allPlayersCards.map(s=>{const a=Array.isArray(s.hand)?s.hand:[],r=Array.isArray(e.communityCards)?e.communityCards:[],n=rt.evaluateHand(a,r);return{...s,handName:n.description,handType:n.type,isWinner:s.isWinner||t.some(e=>e.playerId===s.playerId)}}));const a=Array.isArray(e.communityCards)?e.communityCards:[];this.handWinners=t,this.allPlayersCards=s,this.communityCards=a,this.winningPot=(null===e||void 0===e?void 0:e.pot)||0,this.isFoldWin=(null===e||void 0===e?void 0:e.isFoldWin)||!1,this.showWinnerDisplay=!0;const r=this.handWinners.map(e=>e.username).join(", ");this.addToLog("Hand complete. Winner(s): "+r),this.forceCardUpdate()},handleWinnerDisplayComplete(){console.log("Winner display countdown complete"),this.showWinnerDisplay=!1,this.handWinners=[]},handleWinnerDisplayClose(){console.log("Winner display closed"),this.showWinnerDisplay=!1,this.handWinners=[],this.requestStateUpdate(),setTimeout(()=>{this.$store.dispatch("fetchUserData").then(()=>console.log("User data refreshed after hand")).catch(e=>console.error("Failed to refresh user data:",e))},500)},resetGameState(){console.log("Resetting game state for new hand"),this.previousPlayerHand=[...this.playerHand],this.playerHand=[],this.communityCards=[],this.isYourTurn=!1,this.availableActions=[],this.handWinners=[],this.showWinnerDisplay=!1,this.cardRefreshCounter=0,this.$forceUpdate(),this.$nextTick(()=>{this.$refs.playerList&&"function"===typeof this.$refs.playerList.forceUpdate&&this.$refs.playerList.forceUpdate()})},handleWinnerDisplayClose(){console.log("Winner display closed"),this.showWinnerDisplay=!1,setTimeout(()=>{this.handWinners=[]},300),this.endTurn(),this.isYourTurn=!1,this.actionTimer&&this.clearActionTimer(),this.isYourTurnProcessed=!1,this.requestStateUpdate(),setTimeout(()=>{this.$store.dispatch("fetchUserData").then(()=>console.log("User data refreshed after hand")).catch(e=>console.error("Failed to refresh user data:",e))},500)},startNextHand(){this.isCreator&&this.gameId&&this.currentUser?(console.log("Starting next hand..."),this.addToLog("Starting next hand..."),this.$store.dispatch("fetchUserData").then(()=>{var e;null===(e=Q.gameSocket)||void 0===e||e.emit("startNextHand",{gameId:this.gameId,userId:this.currentUser.id})}).catch(e=>{var t;console.error("Failed to refresh user data before next hand:",e),null===(t=Q.gameSocket)||void 0===t||t.emit("startNextHand",{gameId:this.gameId,userId:this.currentUser.id})})):console.warn("Only the creator can start the next hand")},handleGameStateChange(e){this.currentGame&&"active"===this.currentGame.status&&e&&"waiting"===e.status&&(console.log("Game state changed from active to waiting, ending any active turns"),this.isYourTurn&&this.endTurn()),this.updateGameState(e),this.SET_ERROR_MESSAGE("")},handleDealCards(e){if(console.log("Received cards:",e),e.newHand&&e.timestamp)return console.log("Received new hand signal with timestamp:",e.timestamp),this.resetGameState(),this.currentHandTimestamp=e.timestamp,void setTimeout(()=>{this.playerHand=e.hand||[],this.addToLog("You have been dealt new cards"),this.$forceUpdate(),this.$store.commit("SET_PLAYER_HAND",e.hand||[]),this.$nextTick(()=>{this.$refs.playerList&&"function"===typeof this.$refs.playerList.forceUpdate&&this.$refs.playerList.updateForNewHand(e.timestamp)}),setTimeout(()=>{this.requestStateUpdate()},500)},100);e&&e.hand&&Array.isArray(e.hand)?!this.currentHandTimestamp||!e.timestamp||e.timestamp>=this.currentHandTimestamp?(console.log("Updating cards with data:",e.hand.map(e=>`${e.rank} of ${e.suit}`).join(", ")),setTimeout(()=>{this.playerHand=[...e.hand],e.newHand||this.addToLog("You have been dealt cards"),this.$forceUpdate(),this.$store.commit("SET_PLAYER_HAND",e.hand),e.timestamp&&(this.currentHandTimestamp=e.timestamp),this.gameInitialized=!0,this.gameInProgress=!0,this.clearErrorMessage()},100)):console.log("Ignoring older card data with timestamp:",e.timestamp):console.warn("Received invalid card data:",e)},handleGameStatusChange(e){console.log("Game status changed:",e),"waiting"===e.status&&(console.log("Game status changed to waiting, preparing for new hand"),this.isYourTurn&&this.endTurn(),this.resetGameState(),this.currentHandTimestamp=0)},checkLastPlayerStanding(){if(!this.currentGame||"active"!==this.currentGame.status||this.showWinnerDisplay)return!1;const e=this.currentGame.players.filter(e=>e.isActive&&!e.hasFolded);if(1===e.length){const t=e[0];return this.addToLog(t.username+" wins by default - last player remaining!"),this.handWinners=[{playerId:t.id,username:t.username,handName:"Last Player Standing",hand:this.currentUser&&t.id===this.currentUser.id?this.playerHand:[]}],this.allPlayersCards=this.currentGame.players.filter(e=>e.isActive).map(e=>{const s=e.id===t.id;return{playerId:e.id,username:e.username||"Unknown Player",hand:s&&this.currentUser&&e.id===this.currentUser.id?this.playerHand:[],isWinner:s,handType:s?"Winner":"Folded",handDescription:s?"Last Player Standing":"Folded"}}),this.winningPot=this.currentGame.pot||1,this.communityCards=this.currentGame.communityCards||[],this.isFoldWin=!0,this.showWinnerDisplay=!0,!0}return!1},handleGameUpdate(e){e&&(console.log("Handling game update with status:",e.status),"waiting"===e.status&&this.isYourTurn&&(console.log("Game is in waiting state but turn is active - fixing inconsistency"),this.endTurn(),this.clearActionTimer(),this.isYourTurn=!1,this.isYourTurnProcessed=!1,this.$forceUpdate()),this.updateGameState(e))},handleObserverStatus(e){this.isObserver=e.isObserver,this.observerMessage=e.message,e.isObserver&&this.addToLog("You are in observer mode. You can join when the current hand completes.")},handlePlayerRemoved(e){this.addToLog(e.username+" has been removed from the game due to insufficient chips"),this.currentUser&&e.userId===this.currentUser.id&&(this.SET_ERROR_MESSAGE("You've been removed from the game due to insufficient chips"),this.isObserver=!0,this.observerMessage="You don't have enough chips to continue playing. You are now in observer mode.",this.isYourTurn&&this.endTurn()),this.requestStateUpdate()}},watch:{"currentGame.currentTurn":function(e){e&&this.currentUser&&e!==this.currentUser.id&&this.isYourTurn&&(console.log("Turn inconsistency detected - game says it's not your turn but local state disagrees"),this.endTurn())},"currentGame.players":{handler(e,t){if(t&&e){const s=t.filter(e=>e.isActive&&!e.hasFolded),a=e.filter(e=>e.isActive&&!e.hasFolded);s.length!==a.length&&1===a.length&&this.checkLastPlayerStanding()}},deep:!0}},created(){this.gameId=this.$route.params.id,this.SET_CURRENT_GAME_ID(this.gameId),this.clearErrorMessage(),console.log("Initializing game with ID: "+this.gameId),this.$nextTick(()=>{this.currentGame&&this.checkLastPlayerStanding()})},async mounted(){const e=localStorage.getItem("token"),t=!!e;if(!t)return console.log("User not authenticated, redirecting to login"),this.SET_ERROR_MESSAGE("Please login to view this game"),void this.$router.replace("/login");!this.currentUser&&e&&(console.log("No user data, attempting to fetch"),this.$store.dispatch("fetchUserData").catch(e=>{console.error("Error fetching user data:",e)})),this.gameId=this.$route.params.id,this.SET_CURRENT_GAME_ID(this.gameId),this.clearErrorMessage(),console.log("Initializing game with ID: "+this.gameId);try{if(await this.fetchGameWithRetry(this.gameId,3),!this.currentGame)throw new Error("Failed to load game data");this.addToLog("Joined game #"+this.gameId),"active"===this.currentGame.status&&(this.gameInProgress=!0,this.addToLog("Game is already active")),await this.setupSocketConnection(),this.currentUser&&this.gameId&&(Q.isSocketConnected()&&this.requestStateUpdate(),setTimeout(()=>{var e;"active"===(null===(e=this.currentGame)||void 0===e?void 0:e.status)&&!this.gameInitialized&&this.isCreator&&(console.log("Game is active but not initialized, requesting initialization"),this.requestInitialization())},2e3))}catch(n){console.error("Error setting up game:",n),this.SET_ERROR_MESSAGE("Failed to load game. Please try again.")}this.cardRefreshInterval=setInterval(()=>{this.playerHand&&this.playerHand.length>0&&this.forceCardUpdate()},2e3),this.handlers.handleHandResult&&(Q.on("handResult",this.handlers.handleHandResult),this.eventHandlers.push({event:"handResult",handler:this.handlers.handleHandResult}));const s=e=>{this.handleGameStateChange(e)};Q.on("gameUpdate",s),this.eventHandlers.push({event:"gameUpdate",handler:s}),Q.on("observerStatus",this.handleObserverStatus),this.eventHandlers.push({event:"observerStatus",handler:this.handleObserverStatus}),Q.on("creatorChanged",this.handlers.handleCreatorChanged),this.eventHandlers.push({event:"creatorChanged",handler:this.handlers.handleCreatorChanged}),Q.on("becameCreator",this.handlers.handleBecameCreator),this.eventHandlers.push({event:"becameCreator",handler:this.handlers.handleBecameCreator}),Q.on("playerRemoved",this.handlers.handlePlayerRemoved),this.eventHandlers.push({event:"playerRemoved",handler:this.handlers.handlePlayerRemoved});const a=e=>{console.log("Game status changed:",e),"waiting"===e.status&&(console.log("Game status changed to waiting, preparing for new hand"),this.isYourTurn&&this.endTurn(),this.resetGameState(),this.currentHandTimestamp=0)};Q.on("gameStatusChange",a),this.eventHandlers.push({event:"gameStatusChange",handler:a}),this.handlers&&this.handlers.handleHandResult&&(Q.on("handResult",this.handlers.handleHandResult),this.eventHandlers.push({event:"handResult",handler:this.handlers.handleHandResult}));const r=e=>{e&&e.newHand&&e.timestamp&&(console.log("Received new hand cards event"),this.handleDealCards(e))};Q.on("newHandCards",r),this.eventHandlers.push({event:"newHandCards",handler:r}),this.$watch("currentGame.status",(e,t)=>{console.log(`Game status changed from ${t} to ${e}`),"active"===t&&"waiting"===e&&this.isYourTurn&&(console.log("Game is now waiting - ending current turn"),this.endTurn(),this.clearActionTimer())})},beforeDestroy(){this.cardRefreshInterval&&clearInterval(this.cardRefreshInterval),this.eventHandlers.forEach(({event:e,handler:t})=>{Q.off(e,t)}),this.clearActionTimer(),this.clearErrorMessage()}},Et=At,kt=(s("43e3"),Object(i["a"])(Et,se,ae,!1,null,"2996416b",null)),It=kt.exports;a["a"].use(d["a"]);const Ut=d["a"].prototype.push;d["a"].prototype.push=function(e){return Ut.call(this,e).catch(e=>"NavigationDuplicated"!==e.name?Promise.reject(e):Promise.resolve())};const Pt=[{path:"/",name:"Home",component:C},{path:"/login",name:"Login",component:U},{path:"/register",name:"Register",component:O},{path:"/lobby",name:"Lobby",component:te,meta:{requiresAuth:!0}},{path:"/game/:id",name:"Game",component:It,meta:{requiresAuth:!0}}],Lt=new d["a"]({mode:"history",base:"/",routes:Pt});Lt.beforeEach(async(e,t,s)=>{const a=e.matched.some(e=>e.meta.requiresAuth),r=localStorage.getItem("token"),n=!!r;if(r?m.a.defaults.headers.common["x-auth-token"]=r:delete m.a.defaults.headers.common["x-auth-token"],console.log("Route navigation:",{from:t.path,to:e.path,requiresAuth:a,isAuthenticated:n,hasUserData:!!F.getters.currentUser}),n&&!F.getters.currentUser)try{console.log("Token found, but no user data. Fetching user data..."),await F.dispatch("fetchUserData"),console.log("User data loaded successfully")}catch(o){console.error("Failed to load user data, clearing auth:",o),localStorage.removeItem("token"),delete m.a.defaults.headers.common["x-auth-token"],F.commit("CLEAR_AUTH")}const i=t.path==="/game/"+t.params.id&&"/login"===e.path&&n;if(i)return console.log("Preventing redirect loop, staying on current page"),s(!1);a&&!n?(console.log("Authentication required, redirecting to login"),s("/login")):"/login"===e.path&&n?(console.log("Already authenticated, redirecting to lobby"),s("/lobby")):s()});var Mt=Lt;a["a"].config.productionTip=!1;const Dt="http://localhost:5000";m.a.defaults.baseURL=Dt,console.log("Setting axios base URL to:",Dt),m.a.defaults.timeout=1e4,a["a"].config.errorHandler=(e,t,s)=>{console.error("Vue Error:",e),console.error("Error Info:",s)};const $t=async()=>{const e=localStorage.getItem("token");if(e){F.commit("SET_TOKEN",e),m.a.defaults.headers.common["x-auth-token"]=e;try{await F.dispatch("fetchUserData"),console.log("User data loaded from token")}catch(t){console.error("Error loading user data from token:",t),localStorage.removeItem("token"),delete m.a.defaults.headers.common["x-auth-token"],F.commit("CLEAR_AUTH")}}};J().then(async e=>{console.log("Application config loaded:",e),e.apiUrl&&e.apiUrl!==m.a.defaults.baseURL&&(m.a.defaults.baseURL=e.apiUrl,console.log("Updated axios base URL to:",e.apiUrl)),await $t(),new a["a"]({router:Mt,store:F,render:e=>e(c)}).$mount("#app"),F.watch(e=>e.user,e=>{e&&e.id&&Q.init().then(()=>{Q.registerUser(e.id),console.log("Socket initialized and user registered:",e.id)}).catch(e=>{console.error("Failed to initialize socket:",e)})})}).catch(e=>{console.error("Failed to load config:",e),$t().then(()=>{new a["a"]({router:Mt,store:F,render:e=>e(c)}).$mount("#app")})})},5846:function(e,t,s){},"5c09":function(e,t,s){},"632b":function(e,t,s){},"64bf":function(e,t,s){"use strict";s("bf0c")},"64e9":function(e,t,s){"use strict";s("cc00")},7947:function(e,t,s){},"7f75":function(e,t,s){"use strict";s("d54a")},8799:function(e,t,s){"use strict";s("c695")},8828:function(e,t,s){"use strict";s("5c09")},"8fcd":function(e,t,s){},"945c":function(e,t,s){},a859:function(e,t,s){"use strict";s("632b")},bda1:function(e,t,s){"use strict";s("7947")},bdf7:function(e,t,s){},bf0c:function(e,t,s){},bf87:function(e,t,s){"use strict";s("2a43")},c35c:function(e,t,s){"use strict";s("26cf")},c5b8:function(e,t,s){"use strict";s("46f2")},c695:function(e,t,s){},c9b5:function(e,t,s){"use strict";s("2885")},cc00:function(e,t,s){},d54a:function(e,t,s){},f6b2:function(e,t,s){"use strict";s("44f4")}});
//# sourceMappingURL=app.81c6ce1b.js.map